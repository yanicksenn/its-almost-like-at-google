<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<doc>
  <members>
    <assembly>
      <name>UnityEditor.QuickSearchModule</name>
    </assembly>
    <member name="T:UnityEditor.Search.AssetIndexChangeSet">
      <summary>
        <para>Defines a set of changes that happens in order to update a search asset index.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.AssetIndexChangeSet.all">
      <summary>
        <para>Enumerate all changes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.AssetIndexChangeSet.empty">
      <summary>
        <para>Indicates if the changeset is empty.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.AssetIndexChangeSet.removed">
      <summary>
        <para>Enumerate all asset that were removed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.AssetIndexChangeSet.updated">
      <summary>
        <para>Enumerates all assets that were updated.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.AssetIndexChangeSet.#ctor(System.String[],System.String[])">
      <summary>
        <para>Create a search asset index changeset.</para>
      </summary>
      <param name="updated">Assets that were updated.</param>
      <param name="removed">Assets that were deleted.</param>
      <param name="moved">Existing assets that were moved.</param>
      <param name="predicate">Predicate used to exclude any updated, removed or moved assets from the change set.</param>
    </member>
    <member name="M:UnityEditor.Search.AssetIndexChangeSet.#ctor(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.Func`2&lt;System.String,System.Boolean&gt;)">
      <summary>
        <para>Create a search asset index changeset.</para>
      </summary>
      <param name="updated">Assets that were updated.</param>
      <param name="removed">Assets that were deleted.</param>
      <param name="moved">Existing assets that were moved.</param>
      <param name="predicate">Predicate used to exclude any updated, removed or moved assets from the change set.</param>
    </member>
    <member name="M:UnityEditor.Search.AssetIndexChangeSet.#ctor(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.Func`2&lt;System.String,System.Boolean&gt;)">
      <summary>
        <para>Create a search asset index changeset.</para>
      </summary>
      <param name="updated">Assets that were updated.</param>
      <param name="removed">Assets that were deleted.</param>
      <param name="moved">Existing assets that were moved.</param>
      <param name="predicate">Predicate used to exclude any updated, removed or moved assets from the change set.</param>
    </member>
    <member name="T:UnityEditor.Search.CustomObjectIndexerAttribute">
      <summary>
        <para>Allows a user to register a custom Indexing function for a specific type.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.CustomObjectIndexerAttribute.type">
      <summary>
        <para>Each time an object of a specific type is indexed, the registered function is called.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.CustomObjectIndexerAttribute.version">
      <summary>
        <para>Version of the custom indexer. Increment this number to have the indexer re-index the indexes.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.CustomObjectIndexerAttribute.#ctor(System.Type)">
      <summary>
        <para>Register a new Indexing function bound to the specific type.</para>
      </summary>
      <param name="type">Type of object to be indexed.</param>
    </member>
    <member name="T:UnityEditor.Search.CustomObjectIndexerTarget">
      <summary>
        <para>Represents a descriptor for the object that is about to be indexed. It stores a reference to the object itself as well as an already set up SerializedObject.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.CustomObjectIndexerTarget.documentIndex">
      <summary>
        <para>Document Index which owns the object to index.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.CustomObjectIndexerTarget.id">
      <summary>
        <para>Object Id. The object path for an asset or the GlobalObjectId for a scene object.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.CustomObjectIndexerTarget.serializedObject">
      <summary>
        <para>Serialized representation of the object to be indexed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.CustomObjectIndexerTarget.target">
      <summary>
        <para>Object to index.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.CustomObjectIndexerTarget.targetType">
      <summary>
        <para>Object type to index.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.Dispatcher">
      <summary>
        <para>The search dispatcher is used to synchronize events from the search provider threads and the main UI threads.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.Dispatcher.CallDelayed(UnityEditor.EditorApplication/CallbackFunction,System.Double)">
      <summary>
        <para>Register a callback to be executed later in the main thread.</para>
      </summary>
      <param name="callback">Callback to be executed later in the main thread.</param>
      <param name="seconds">Number of seconds to wait until the main thread executes the user callback.</param>
      <returns>
        <para>Returns an off handler that can be used to unregister the callback before it gets executed in the main thread later.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.Dispatcher.Enqueue(System.Action)">
      <summary>
        <para>This function can be used in a thread to enqueue an action that will be executed later in the main thread.</para>
      </summary>
      <param name="action">Action to be executed in the main thread later.</param>
      <param name="delay">Minimum amount of time in seconds for which the main thread will wait before executing the enqueued action.</param>
      <param name="delayInSeconds"></param>
    </member>
    <member name="M:UnityEditor.Search.Dispatcher.Enqueue(System.Action,System.Double)">
      <summary>
        <para>This function can be used in a thread to enqueue an action that will be executed later in the main thread.</para>
      </summary>
      <param name="action">Action to be executed in the main thread later.</param>
      <param name="delay">Minimum amount of time in seconds for which the main thread will wait before executing the enqueued action.</param>
      <param name="delayInSeconds"></param>
    </member>
    <member name="M:UnityEditor.Search.Dispatcher.ProcessOne">
      <summary>
        <para>This function can called in the main thread to force the execution of one enqueued action.</para>
      </summary>
      <returns>
        <para>Returns true if an enqueued action was processed.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.DisplayMode">
      <summary>
        <para>Options for setting the display mode to use for a search view.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.DisplayMode.Compact">
      <summary>
        <para>Display as a compact list view.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.DisplayMode.Grid">
      <summary>
        <para>Display as a grid of icons of various sizes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.DisplayMode.List">
      <summary>
        <para>Display as a list view.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.DisplayMode.None">
      <summary>
        <para>Unspecified ISearchView display mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.DisplayMode.Table">
      <summary>
        <para>Display search results in a table.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.FetchPreviewOptions">
      <summary>
        <para>Options for the search provider on how the preview should be fetched.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.FetchPreviewOptions.Large">
      <summary>
        <para>Indicates that the preview resolution should be higher than 256x256.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.FetchPreviewOptions.None">
      <summary>
        <para>No options are defined.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.FetchPreviewOptions.Normal">
      <summary>
        <para>Indicates that the preview size should be around 128x128.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.FetchPreviewOptions.Preview2D">
      <summary>
        <para>Indicates that the search provider should generate a 2D preview.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.FetchPreviewOptions.Preview3D">
      <summary>
        <para>Indicates that the search provider should generate a 3D preview.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.FuzzySearch">
      <summary>
        <para>Provides a method to match query text using a fuzzy search algorithm.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.FuzzySearch.FuzzyMatch(System.String,System.String,System.Int64&amp;,System.Collections.Generic.List`1&lt;System.Int32&gt;)">
      <summary>
        <para>Performs a fuzzy search for a pattern on a string.</para>
      </summary>
      <param name="pattern">The pattern that the method is searching for in the string.</param>
      <param name="origin">The string the method is searching.</param>
      <param name="outScore">If there is a match, this parameter contains the match score. The higher the match score, the closer the pattern matched a part of the given string.</param>
      <param name="matches">List of indices in the string where the pattern was found.</param>
      <returns>
        <para>Returns true if a match was found.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.FuzzySearch.FuzzyMatch(System.String,System.String,System.Collections.Generic.List`1&lt;System.Int32&gt;)">
      <summary>
        <para>Performs a fuzzy search for a pattern on a string.</para>
      </summary>
      <param name="pattern">The pattern that the method is searching for in the string.</param>
      <param name="origin">The string the method is searching.</param>
      <param name="outScore">If there is a match, this parameter contains the match score. The higher the match score, the closer the pattern matched a part of the given string.</param>
      <param name="matches">List of indices in the string where the pattern was found.</param>
      <returns>
        <para>Returns true if a match was found.</para>
      </returns>
    </member>
    <member name="?:UnityEditor.Search.IFilterNode">
      <summary>
        <para>Interface representing a filter node.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IFilterNode.filterId">
      <summary>
        <para>The filter identifier.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IFilterNode.filterValue">
      <summary>
        <para>The filter value. This can be null or empty if the value has not been written yet.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IFilterNode.operatorId">
      <summary>
        <para>The operator identifier. This can be null or empty if the operator has not been written yet.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IFilterNode.paramValue">
      <summary>
        <para>The parameter value. This can be null or empty if the filter is not a filter function, or there is no parameter written yet.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IFilterNode.usesParameter">
      <summary>
        <para>Indicates if the filter uses a parameter.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.IndexingOptions">
      <summary>
        <para>Use Indexing options to specify the contents of your search index.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.IndexingOptions.All">
      <summary>
        <para>Apply all indexing options.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.IndexingOptions.Dependencies">
      <summary>
        <para>Include Asset dependencies in your index.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.IndexingOptions.Extended">
      <summary>
        <para>Include extended information in your index such as sub objects in Scene and Prefab Assets.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.IndexingOptions.Keep">
      <summary>
        <para>Use this option to save the created index as an Asset file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.IndexingOptions.None">
      <summary>
        <para>Do not include additional indexing options.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.IndexingOptions.Properties">
      <summary>
        <para>Include Asset serialized properties in your index.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.IndexingOptions.Temporary">
      <summary>
        <para>Save the search index to a temporary folder that is not managed by Unity.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.IndexingOptions.Types">
      <summary>
        <para>Include additional types of information in your Asset index.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.Search.INestedQueryNode">
      <summary>
        <para>Interface representing a nested query node.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.INestedQueryNode.associatedFilter">
      <summary>
        <para>If the nested query is part of a filter operation, this represents the filter identifier. Otherwise, this is null or empty.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.Search.IPropertyDatabaseRecord">
      <summary>
        <para>Interface of a record that is stored in the Search.PropertyDatabase|PropertyDatabase.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IPropertyDatabaseRecord.key">
      <summary>
        <para>The key of the record.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IPropertyDatabaseRecord.validRecord">
      <summary>
        <para>Boolean indicating if the record is valid.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IPropertyDatabaseRecord.value">
      <summary>
        <para>The value of the record.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.Search.IPropertyDatabaseRecordValue">
      <summary>
        <para>Interface of a record value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IPropertyDatabaseRecordValue.type">
      <summary>
        <para>The type of record value.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.Search.IPropertyDatabaseView">
      <summary>
        <para>Interface of a Search.PropertyDatabase|PropertyDatabase view.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.Clear">
      <summary>
        <para>Clears the entire content of the Search.PropertyDatabase|PropertyDatabase.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.CreateDocumentKey(System.String)">
      <summary>
        <para>Creates a document key from a document identifier.</para>
      </summary>
      <param name="documentId">A document identifier.</param>
      <returns>
        <para>The document key.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.CreatePropertyHash(System.String)">
      <summary>
        <para>Creates a property hash from a property path.</para>
      </summary>
      <param name="propertyPath">The path or name of a property.</param>
      <returns>
        <para>The computed property hash.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.CreateRecordKey(System.String,System.String)">
      <summary>
        <para>Creates a record key from a document identifier and a property path.</para>
      </summary>
      <param name="documentId">A document identifier.</param>
      <param name="propertyPath">A property path or name.</param>
      <returns>
        <para>The record key.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.CreateRecordKey(System.String,UnityEngine.Hash128)">
      <summary>
        <para>Creates a record key from a document identifier and a property hash.</para>
      </summary>
      <param name="documentId">A document identifier.</param>
      <param name="propertyHash">A property hash.</param>
      <returns>
        <para>The record key.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.CreateRecordKey(System.UInt64,UnityEngine.Hash128)">
      <summary>
        <para>Creates a record key from a document key and a property hash.</para>
      </summary>
      <param name="documentKey">A document key.</param>
      <param name="propertyPathHash">A property hash.</param>
      <returns>
        <para>The record key.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.CreateRecordKey(System.String)">
      <summary>
        <para>Creates a record key from a property path.</para>
      </summary>
      <param name="propertyPath">A property path or name.</param>
      <returns>
        <para>The record key.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.CreateRecordKey(UnityEngine.Hash128)">
      <summary>
        <para>Creates a record key from a property hash.</para>
      </summary>
      <param name="propertyHash">A property hash.</param>
      <returns>
        <para>The record key.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.EnumerateAll">
      <summary>
        <para>Enumerates all records stored in the Search.PropertyDatabase|PropertyDatabase</para>
      </summary>
      <returns>
        <para>An enumeration of all the records.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.GetValueFromRecord(UnityEditor.Search.IPropertyDatabaseRecordValue)">
      <summary>
        <para>Deserialize a record value into its proper type.</para>
      </summary>
      <param name="recordValue">A serialized record value.</param>
      <returns>
        <para>The deserialized value.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.Invalidate(UnityEditor.Search.PropertyDatabaseRecordKey&amp; modreq(System.Runtime.InteropServices.InAttribute))">
      <summary>
        <para>Invalidates a single property record so it is no longer retrievable.</para>
      </summary>
      <param name="recordKey">A record key.</param>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.Invalidate(System.String)">
      <summary>
        <para>Invalidates all the properties stored for an entire document.</para>
      </summary>
      <param name="documentId">A document identifier.</param>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.Invalidate(System.UInt64)">
      <summary>
        <para>Invalidates all the properties stored for an entire document.</para>
      </summary>
      <param name="documentKey">A document key.</param>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.InvalidateMask(System.UInt64)">
      <summary>
        <para>Invalidate all properties stored from multiple documents that match a document key mask.</para>
      </summary>
      <param name="documentKeyMask">A document key mask.</param>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.IsPersistableType(System.Type)">
      <summary>
        <para>Returns a boolean indicating if a type can be persisted into the backing file.</para>
      </summary>
      <param name="type">A type.</param>
      <returns>
        <para>True if the type can be persisted in the file, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.Store(System.String,System.String,System.Object)">
      <summary>
        <para>Stores a document property.</para>
      </summary>
      <param name="documentId">A document identifier.</param>
      <param name="propertyPath">A property path or name.</param>
      <param name="value">The value of the property.</param>
      <returns>
        <para>True if the store operation succeeded, false if not.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.Store(System.UInt64,UnityEngine.Hash128,System.Object)">
      <summary>
        <para>Stores a document property with a precomputed document key and property hash.</para>
      </summary>
      <param name="documentKey">A document key.</param>
      <param name="propertyHash">A property hash.</param>
      <param name="value">The value of the property.</param>
      <returns>
        <para>True if the store operation succeeded, false if not.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.Store(UnityEditor.Search.PropertyDatabaseRecordKey&amp; modreq(System.Runtime.InteropServices.InAttribute),System.Object)">
      <summary>
        <para>Stores a document property with a precomputed record key.</para>
      </summary>
      <param name="recordKey">A record key.</param>
      <param name="value">The value of the property.</param>
      <returns>
        <para>True if the store operation succeeded, false if not.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.Store(UnityEngine.Hash128,System.Object)">
      <summary>
        <para>Stores a property with a precomputed property hash.</para>
      </summary>
      <param name="propertyHash">A property hash.</param>
      <param name="value">The value of the property.</param>
      <returns>
        <para>True if the store operation succeeded, false if not.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.Sync">
      <summary>
        <para>Synchronizes the views so they have access to the same content.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.TryLoad(UnityEditor.Search.PropertyDatabaseRecordKey&amp; modreq(System.Runtime.InteropServices.InAttribute),System.Object&amp;)">
      <summary>
        <para>Loads a single property, already deseriazed into an object.</para>
      </summary>
      <param name="recordKey">A record key.</param>
      <param name="data">The property value.</param>
      <returns>
        <para>True if the record is found and is valid, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.TryLoad(UnityEditor.Search.PropertyDatabaseRecordKey&amp; modreq(System.Runtime.InteropServices.InAttribute),UnityEditor.Search.IPropertyDatabaseRecordValue&amp;)">
      <summary>
        <para>Loads a single property, still contained within a record.</para>
      </summary>
      <param name="recordKey">A record key.</param>
      <param name="data">The property record.</param>
      <returns>
        <para>True if the record is found and is valid, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.TryLoad(System.UInt64,System.Collections.Generic.IEnumerable`1&lt;System.Object&gt;&amp;)">
      <summary>
        <para>Loads all the properties of a document, already deseriazed into objects.</para>
      </summary>
      <param name="documentKey">A document key.</param>
      <param name="data">The document property values.</param>
      <returns>
        <para>True if the record is found and is valid, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IPropertyDatabaseView.TryLoad(System.UInt64,System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.IPropertyDatabaseRecord&gt;&amp;)">
      <summary>
        <para>Loads all the properties of a document, still contained within records.</para>
      </summary>
      <param name="documentKey">A document key.</param>
      <param name="records">The document property records.</param>
      <returns>
        <para>True if the record is found and is valid, false otherwise.</para>
      </returns>
    </member>
    <member name="?:UnityEditor.Search.IQueryEngineFilter">
      <summary>
        <para>Interface for the Search.QueryEngine_1|QueryEngine filters.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.metaInfo">
      <summary>
        <para>Additional information specific to the filter.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.operators">
      <summary>
        <para>Collection of Search.QueryFilterOperator|QueryFilterOperators specific for the filter.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.overridesStringComparison">
      <summary>
        <para>Indicates if the filter overrides the global string comparison options.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.parameterType">
      <summary>
        <para>The type of the constant parameter passed to the filter, if used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.regexToken">
      <summary>
        <para>The regular expression that matches the filter. Matches what precedes the operator in a filter (for example. "id" in "id&gt;=2").</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.stringComparison">
      <summary>
        <para>The string comparison options of the filter.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.supportedOperators">
      <summary>
        <para>List of supported operators.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.token">
      <summary>
        <para>The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.type">
      <summary>
        <para>The type of the data that is compared by the filter.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.usesParameter">
      <summary>
        <para>Indicates if the filter uses a parameter.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.usesRegularExpressionToken">
      <summary>
        <para>Indicates if the filter uses a regular expression token or not.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.usesResolver">
      <summary>
        <para>Indicates if the filter uses a resolver function.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.IQueryEngineFilter.AddOperator(System.String)">
      <summary>
        <para>Add a custom filter operator specific to the filter.</para>
      </summary>
      <param name="op">The operator identifier.</param>
      <returns>
        <para>The added, or existing, Search.QueryFilterOperator|QueryFilterOperator.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IQueryEngineFilter.AddOrUpdateMetaInfo(System.String,System.String)">
      <summary>
        <para>Add or update additional information specific to the filter.</para>
      </summary>
      <param name="key">The key of the information.</param>
      <param name="value">The value of the information.</param>
      <returns>
        <para>The current filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IQueryEngineFilter.AddTypeParser(System.Func`2&lt;System.String,UnityEditor.Search.ParseResult`1&lt;TFilterConstant&gt;&gt;)">
      <summary>
        <para>Add a type parser specific to the filter.</para>
      </summary>
      <param name="parser">Callback used to determine if a string can be converted into "TFilterConstant". Takes a string and returns a Search.ParseResult_1|ParseResult object. This contains the success flag, and the actual converted value if it succeeded.</param>
      <returns>
        <para>The current filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IQueryEngineFilter.ClearMetaInfo">
      <summary>
        <para>Removes all additional information specific to the filter.</para>
      </summary>
      <returns>
        <para>The current filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IQueryEngineFilter.RemoveMetaInfo(System.String)">
      <summary>
        <para>Remove information on the filter.</para>
      </summary>
      <param name="key">The key of the information.</param>
      <returns>
        <para>The current filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IQueryEngineFilter.RemoveOperator(System.String)">
      <summary>
        <para>Remove a custom operator specific to the filter.</para>
      </summary>
      <param name="op">The operator identifier.</param>
      <returns>
        <para>The current filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IQueryEngineFilter.SetNestedQueryTransformer(System.Func`2&lt;TNestedQueryData,TRhs&gt;)">
      <summary>
        <para>Sets the filter's nested query transformer function. This function takes the result of a nested query and extracts the necessary data to compare with the filter.</para>
      </summary>
      <param name="transformer">The transformer function.</param>
    </member>
    <member name="?:UnityEditor.Search.IQueryHandler_2">
      <summary>
        <para>Interface for query handlers.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.IQueryHandler_2.Eval(TData)">
      <summary>
        <para>Implement this function to evaluate the query on a single element.</para>
      </summary>
      <param name="element">A single object to be tested.</param>
      <returns>
        <para>True if the object passes the query, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IQueryHandler_2.Eval(TPayload)">
      <summary>
        <para>Implement this function to evaluate the query on a payload.</para>
      </summary>
      <param name="payload">The input data of the query.</param>
      <returns>
        <para>An enumerable of type TData.</para>
      </returns>
    </member>
    <member name="?:UnityEditor.Search.IQueryHandlerFactory_3">
      <summary>
        <para>Interface for query handler factories.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.IQueryHandlerFactory_3.Create(UnityEditor.Search.QueryGraph,System.Collections.Generic.ICollection`1&lt;UnityEditor.Search.QueryError&gt;)">
      <summary>
        <para>Implement this function to create a new query handler for a specific query graph.</para>
      </summary>
      <param name="graph">A graph representing a query.</param>
      <param name="errors">A collection of errors. Use this to report errors when needed.</param>
      <returns>
        <para>An IQueryHandler.</para>
      </returns>
    </member>
    <member name="?:UnityEditor.Search.IQueryNode">
      <summary>
        <para>Interface representing a query node.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryNode.children">
      <summary>
        <para>The node's children. Can be null.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryNode.identifier">
      <summary>
        <para>A string representing this node and its children.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryNode.leaf">
      <summary>
        <para>True if this node is a leaf. A leaf doesn't have any children.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryNode.parent">
      <summary>
        <para>Parent of this node. Null if this node is the root.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryNode.skipped">
      <summary>
        <para>True if this node is skipped during evaluation. A node can be skipped if the QueryEngine was configured to skip unsupported nodes instead of generating errors.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryNode.token">
      <summary>
        <para>The token used to build this node.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryNode.type">
      <summary>
        <para>The node's type.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.IQueryNode.QueryHashCode">
      <summary>
        <para>Returns a hashcode for this node. Multiple nodes can have the same hashcode if they have the same identifier.</para>
      </summary>
      <returns>
        <para>An integer representing the hashcode.</para>
      </returns>
    </member>
    <member name="?:UnityEditor.Search.IQuerySource">
      <summary>
        <para>The source of block is usually the query builder for a given search view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQuerySource.context">
      <summary>
        <para>Search context of the query source.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQuerySource.searchView">
      <summary>
        <para>Search view in which the query block is displayed.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.IQuerySource.Apply">
      <summary>
        <para>Apply any changes to the block to the source.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.IQuerySource.Repaint">
      <summary>
        <para>Indicates that the query block should be repainted.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.Search.ISearchDatabase">
      <summary>
        <para>Interface used to expose the search databases information.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchDatabase.excludePatterns">
      <summary>
        <para>Exclude patterns.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchDatabase.includePatterns">
      <summary>
        <para>Include patterns.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchDatabase.indexingOptions">
      <summary>
        <para>Indicates how the database is built.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchDatabase.name">
      <summary>
        <para>Name of the database.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchDatabase.roots">
      <summary>
        <para>Roots folder of documents being indexed.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.Search.ISearchList">
      <summary>
        <para>A search list represents a collection of search results that is filled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchList.context">
      <summary>
        <para>Any valid search context that is used to track async search requests. It can be null.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchList.pending">
      <summary>
        <para>Indicates if the search request is still running and might return more results asynchronously.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ISearchList.AddItems(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;)">
      <summary>
        <para>Add new items to the search list.</para>
      </summary>
      <param name="items">List of items to be added.</param>
    </member>
    <member name="M:UnityEditor.Search.ISearchList.Fetch">
      <summary>
        <para>Yields search items until the search query is finished.</para>
      </summary>
      <returns>
        <para>List of search items. Items can be null and must be discarded.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ISearchList.GetRange(System.Int32,System.Int32)">
      <summary>
        <para>Return a subset of items.</para>
      </summary>
      <param name="skipCount">Number of rows to skip at the start of a query.</param>
      <param name="count">Number of items to get from the beginning of the range.</param>
      <returns>
        <para>Search items in the specified range.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ISearchList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;)">
      <summary>
        <para>Insert new search items in the current list.</para>
      </summary>
      <param name="index">Index where the items should be inserted.</param>
      <param name="items">Items to be inserted.</param>
    </member>
    <member name="M:UnityEditor.Search.ISearchList.Select(System.Func`2&lt;UnityEditor.Search.SearchItem,TResult&gt;)">
      <summary>
        <para>Enumerate search items and transform them while they are being fetched.</para>
      </summary>
      <param name="selector">Function used to select what gets returned in the new enumerable list.</param>
      <returns>
        <para>New enumerable list.</para>
      </returns>
    </member>
    <member name="?:UnityEditor.Search.ISearchNode">
      <summary>
        <para>Interface representing a query node.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchNode.exact">
      <summary>
        <para>True if the word or text should match exactly, false if it is a "contains" operation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchNode.searchValue">
      <summary>
        <para>Word or text used for the search.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.Search.ISearchQuery">
      <summary>
        <para>This search query interface is used when handling search query objects. These can be either assets saved in the user project or saved in the user preferences.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchQuery.creationTime">
      <summary>
        <para>Indicates the binary long time of when the search query was created.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchQuery.details">
      <summary>
        <para>Search query description.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchQuery.displayName">
      <summary>
        <para>Search query display name used in the UI.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchQuery.filePath">
      <summary>
        <para>Indicates where the search query is saved on disk.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchQuery.guid">
      <summary>
        <para>Unique GUID of the search query.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchQuery.isSearchTemplate">
      <summary>
        <para>Indicates if the search query is displayed as a search template in the search view home page.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchQuery.itemCount">
      <summary>
        <para>Provides a preview of how many results this query might yield if executed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchQuery.lastUsedTime">
      <summary>
        <para>Indicates the last time the query was executed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchQuery.searchText">
      <summary>
        <para>Search query text.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchQuery.thumbnail">
      <summary>
        <para>Search query icon thumbnail set by the user if any.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ISearchQuery.GetName">
      <summary>
        <para>Returns the formatted name of the query depending on its source.</para>
      </summary>
      <returns>
        <para>Formatted name of the query.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ISearchQuery.GetProviderIds">
      <summary>
        <para>Returns the list of provider ids that search query is executed with.</para>
      </summary>
      <returns>
        <para>Provider ids.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ISearchQuery.GetProviderTypes">
      <summary>
        <para>Returns the list of aggregated type ids the search query executes with.</para>
      </summary>
      <returns>
        <para>Search provider type ids.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ISearchQuery.GetSearchTable">
      <summary>
        <para>Returns the query search table configuration if any.</para>
      </summary>
      <returns>
        <para>Search table configuration.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ISearchQuery.GetViewState">
      <summary>
        <para>Returns the search query view state.</para>
      </summary>
      <returns>
        <para>Persisted search view state.</para>
      </returns>
    </member>
    <member name="?:UnityEditor.Search.ISearchView">
      <summary>
        <para>Search view interface used by the search context to execute UI operations.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.context">
      <summary>
        <para>Returns the current view search context.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.currentGroup">
      <summary>
        <para>Indicates the current group that is selected by the user.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.displayMode">
      <summary>
        <para>Indicates how the data is displayed in the UI.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.filterCallback">
      <summary>
        <para>Callback used to filter items shown in the list.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.itemIconSize">
      <summary>
        <para>Defines the size of items in the search view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.multiselect">
      <summary>
        <para>Allows multi-selection of items in the list/grid of items. If false, a user can only select a single item.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.position">
      <summary>
        <para>Returns the absolute position of the Search window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.results">
      <summary>
        <para>Returns the list of all search results.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.searchInProgress">
      <summary>
        <para>Indicates that the search view is currently running a query and it has not yet completed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.selectCallback">
      <summary>
        <para>Callback used to override a default Search behavior.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.selection">
      <summary>
        <para>Returns the selected items in the view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.state">
      <summary>
        <para>Returns the view model state of the Search Window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.trackingCallback">
      <summary>
        <para>Callback used to override the tracking behavior.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.AddSelection(System.Int32[])">
      <summary>
        <para>Adds new items to the current selection.</para>
      </summary>
      <param name="selection">Array of item indices to add to selection.</param>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.Close">
      <summary>
        <para>Closes the search view.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.ExecuteAction(UnityEditor.Search.SearchAction,UnityEditor.Search.SearchItem[],System.Boolean)">
      <summary>
        <para>Executes a Search action on a given list of items.</para>
      </summary>
      <param name="action">The search action to execute.</param>
      <param name="items">The items to search.</param>
      <param name="endSearch">If true, executing this action closes the Search window.</param>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.ExecuteSelection">
      <summary>
        <para>Execute the default action of the active selection.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.Focus">
      <summary>
        <para>Make sure the Search window is now selected to receive input from a user.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.FocusSearch">
      <summary>
        <para>Focus the search text field control.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.IsPicker">
      <summary>
        <para>Indicates if the search view is being used as an advanced search picker.</para>
      </summary>
      <returns>
        <para>Returns true if the current view is a search window.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.Refresh(UnityEditor.Search.RefreshFlags)">
      <summary>
        <para>Triggers a refresh of the search view and refetches all the search items from enabled search providers.</para>
      </summary>
      <param name="reason">The refresh flags give some additional context and reasons why the view needs to be updated.</param>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.Repaint">
      <summary>
        <para>Requests the search view to repaint itself.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.SelectSearch">
      <summary>
        <para>Puts focus in the SearchView text field AND selects all the text inside the text field (if any).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.SetColumns(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchColumn&gt;)">
      <summary>
        <para>Sets the search view property table columns.</para>
      </summary>
      <param name="columns">Columns to be set in the search view table configuration used in DisplayMode.Table.</param>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.SetSearchText(System.String,UnityEditor.Search.TextCursorPlacement)">
      <summary>
        <para>Sets the search query text.</para>
      </summary>
      <param name="searchText">Text displayed in the search view.</param>
      <param name="moveCursor">Position of the cursor after setting the search text.</param>
      <param name="cursorInsertPosition"></param>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.SetSearchText(System.String,UnityEditor.Search.TextCursorPlacement,System.Int32)">
      <summary>
        <para>Sets the search query text.</para>
      </summary>
      <param name="searchText">Text displayed in the search view.</param>
      <param name="moveCursor">Position of the cursor after setting the search text.</param>
      <param name="cursorInsertPosition"></param>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.SetSelection(System.Int32[])">
      <summary>
        <para>Updates the search view with a new selection.</para>
      </summary>
      <param name="selection">Array of item indices to select.</param>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.ShowItemContextualMenu(UnityEditor.Search.SearchItem,UnityEngine.Rect)">
      <summary>
        <para>Shows a contextual menu for the specified item.</para>
      </summary>
      <param name="item">Item affected by the contextual menu.</param>
      <param name="contextualActionPosition">The position that a menu should be drawn on screen (generally item position).</param>
    </member>
    <member name="?:UnityEditor.Search.ITableView">
      <summary>
        <para>Table view interface.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ITableView.context">
      <summary>
        <para>Returns the search context driving the table view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ITableView.readOnly">
      <summary>
        <para>Invoked to check if the table view is read-only.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ITableView.AddColumn(UnityEngine.Vector2,System.Int32)">
      <summary>
        <para>Invoked when the table view need to add a new column at a specific location.</para>
      </summary>
      <param name="mousePosition">Mouse position when adding a new column happened.</param>
      <param name="activeColumnIndex">Column index at which to insert the new column.</param>
    </member>
    <member name="M:UnityEditor.Search.ITableView.AddColumnHeaderContextMenuItems(UnityEditor.GenericMenu)">
      <summary>
        <para>Invoked when the user opens a contextual menu on a column.</para>
      </summary>
      <param name="menu">Menu in which to add new menu items.</param>
      <returns>
        <para>Return true if any menu items was added.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ITableView.AddColumnHeaderContextMenuItems(UnityEditor.GenericMenu,UnityEditor.Search.SearchColumn)">
      <summary>
        <para>Invoked when the user opens a contextual menu on a column.</para>
      </summary>
      <param name="menu">Menu in which to add new menu items.</param>
      <param name="sourceColumn">Selected column.</param>
    </member>
    <member name="M:UnityEditor.Search.ITableView.AddColumns(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchColumn&gt;,System.Int32)">
      <summary>
        <para>Invoked when a set of columns are inserted.</para>
      </summary>
      <param name="descriptors">Inserted columns.</param>
      <param name="activeColumnIndex">Column index where the columns should be inserted.</param>
    </member>
    <member name="M:UnityEditor.Search.ITableView.GetColumns">
      <summary>
        <para>Invoked when the table needs to get the list of columns to be displayed.</para>
      </summary>
      <returns>
        <para>Enumerate table view columns.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ITableView.GetElements">
      <summary>
        <para>Invoked when the property table needs all view elements not necessarily sorted.</para>
      </summary>
      <returns>
        <para>Enumerate all search items to be displayed in the table.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ITableView.GetRows">
      <summary>
        <para>Invoked when the property table needs all search items sorted.</para>
      </summary>
      <returns>
        <para>Enumerate in order all search items.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ITableView.GetSearchTable">
      <summary>
        <para>Invoked to get the table configuration.</para>
      </summary>
      <returns>
        <para>Returns the view search table configuration.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ITableView.OnItemExecuted(UnityEditor.Search.SearchItem)">
      <summary>
        <para>Invoked when the user double click on a search item row.</para>
      </summary>
      <param name="item">Selected item.</param>
    </member>
    <member name="M:UnityEditor.Search.ITableView.OpenContextualMenu(UnityEngine.Event,UnityEditor.Search.SearchItem)">
      <summary>
        <para>Invoked when the user opens a contextual menu on the selected search item row.</para>
      </summary>
      <param name="evt">Current UI event.</param>
      <param name="item">Selected item.</param>
      <returns>
        <para>Returns true if the event was handled.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ITableView.RemoveColumn(System.Int32)">
      <summary>
        <para>Invoked when a column gets removed.</para>
      </summary>
      <param name="activeColumnIndex">Index of the column to be removed.</param>
    </member>
    <member name="M:UnityEditor.Search.ITableView.SetDirty">
      <summary>
        <para>Invoked when the table view gets dirty.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ITableView.SetSelection(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;)">
      <summary>
        <para>Invoked when the table view selection has changed.</para>
      </summary>
      <param name="items">Item selection.</param>
    </member>
    <member name="M:UnityEditor.Search.ITableView.SetupColumns(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;)">
      <summary>
        <para>Invoked when columns are being intialized.</para>
      </summary>
      <param name="elements">Sets of item for which columns are being displayed.</param>
    </member>
    <member name="M:UnityEditor.Search.ITableView.SwapColumns(System.Int32,System.Int32)">
      <summary>
        <para>Invoked when two columns are being swapped.</para>
      </summary>
      <param name="columnIndex">Index of the column being swapped or dragged.</param>
      <param name="swappedColumnIndex">Index of the column being swapped with the dragged column.</param>
    </member>
    <member name="M:UnityEditor.Search.ITableView.UpdateColumnSettings(System.Int32,UnityEditor.IMGUI.Controls.MultiColumnHeaderState/Column)">
      <summary>
        <para>Invoked when a column is being edited.</para>
      </summary>
      <param name="columnIndex">Index of the column being edited.</param>
      <param name="columnSettings">Column being edited.</param>
    </member>
    <member name="T:UnityEditor.Search.ItemSelectors">
      <summary>
        <para>Utility class to generate search column with item selectors.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ItemSelectors.CreateColumn(System.String,System.String,System.String,UnityEditor.Search.SearchColumnFlags)">
      <summary>
        <para>Create a search column.</para>
      </summary>
      <param name="path">Column path.</param>
      <param name="selector">Column selector.</param>
      <param name="provider">Column provider.</param>
      <param name="options">Column flags.</param>
      <returns>
        <para>Returna a search column.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ItemSelectors.Enumerate(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;)">
      <summary>
        <para>Enumerate search column for a given set of search items.</para>
      </summary>
      <param name="items">Search items.</param>
      <returns>
        <para>Search columns.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ItemSelectors.GetItemContentStyle(UnityEditor.Search.SearchColumn)">
      <summary>
        <para>Returns the default item GUI style used to draw the cell of a search item property in table view.</para>
      </summary>
      <param name="column">Search column drawing the item.</param>
      <returns>
        <para>GUI style to render the item.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.ObjectField">
      <summary>
        <para>Object field used with the advanced search picker.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ObjectField.objectType">
      <summary>
        <para>Type of the object to be selected.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ObjectField.searchContext">
      <summary>
        <para>Search query context used to populate the object picker.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ObjectField.searchViewFlags">
      <summary>
        <para>Search flags used to open the search picker window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ObjectField.singleLineHeight">
      <summary>
        <para>Default line height used to render the object field control.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ObjectField.#ctor">
      <summary>
        <para>Construct an advanced search field UITK control.</para>
      </summary>
      <param name="label">Display label if used in a property editor.</param>
    </member>
    <member name="M:UnityEditor.Search.ObjectField.#ctor(System.String)">
      <summary>
        <para>Construct an advanced search field UITK control.</para>
      </summary>
      <param name="label">Display label if used in a property editor.</param>
    </member>
    <member name="M:UnityEditor.Search.ObjectField.DoObjectField(UnityEngine.Rect,UnityEngine.Object,System.Type,UnityEngine.GUIContent,UnityEditor.Search.SearchContext,UnityEngine.Search.SearchViewFlags)">
      <summary>
        <para>Draw an IMGUI advanced object field.</para>
      </summary>
      <param name="position">Position to draw the control in the current view.</param>
      <param name="obj">Currently selected object.</param>
      <param name="objType">Type of the object to be picked.</param>
      <param name="label">Label displayed left of the control.</param>
      <param name="context">Search context used to open the advanced search picker.</param>
      <param name="searchViewFlags">Search view flags used to open the advanced search picker.</param>
      <param name="property">Serialized property holding the selected object.</param>
      <returns>
        <para>Returns the selected object.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ObjectField.DoObjectField(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Type,UnityEngine.GUIContent,UnityEditor.Search.SearchContext,UnityEngine.Search.SearchViewFlags)">
      <summary>
        <para>Draw an IMGUI advanced object field.</para>
      </summary>
      <param name="position">Position to draw the control in the current view.</param>
      <param name="obj">Currently selected object.</param>
      <param name="objType">Type of the object to be picked.</param>
      <param name="label">Label displayed left of the control.</param>
      <param name="context">Search context used to open the advanced search picker.</param>
      <param name="searchViewFlags">Search view flags used to open the advanced search picker.</param>
      <param name="property">Serialized property holding the selected object.</param>
      <returns>
        <para>Returns the selected object.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ObjectField.SetValueWithoutNotify(UnityEngine.Object)">
      <summary>
        <para>Set the object field selected objects.</para>
      </summary>
      <param name="newValue">Selected object.</param>
    </member>
    <member name="T:UnityEditor.Search.ObjectIndexer">
      <summary>
        <para>A specialized Search.SearchIndexer which provides methods to index a UnityEngine.Object|Unity Object from custom indexers.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ObjectIndexer.IndexNumber(System.Int32,System.String,System.Double)">
      <summary>
        <para>Adds a key-number value pair to the index. The key won't be added with variations.</para>
      </summary>
      <param name="documentIndex">Document where the indexed value was found.</param>
      <param name="name">Key used to retrieve the value.</param>
      <param name="number">Number value to store in the index.</param>
    </member>
    <member name="M:UnityEditor.Search.ObjectIndexer.IndexProperty(System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
        <para>Adds a property value to the index. A property is specified with a key and a string value. The value will be stored with multiple variations.</para>
      </summary>
      <param name="documentIndex">Document where the indexed word was found.</param>
      <param name="name">Key used to retrieve the value.</param>
      <param name="value">Value to add to the index.</param>
      <param name="saveKeyword">Define if we store this key in the keyword registry of the index.</param>
      <param name="exact">If exact is true, only the exact match of the value will be stored in the index (not the variations).</param>
    </member>
    <member name="M:UnityEditor.Search.ObjectIndexer.IndexPropertyComponents(System.Int32,System.String,System.String)">
      <summary>
        <para>Indexes multiple variations of a property value.</para>
      </summary>
      <param name="documentIndex">Document handle for the indexed property.</param>
      <param name="name">Key used to retrieve the value.</param>
      <param name="value">Value to add to the index.</param>
    </member>
    <member name="M:UnityEditor.Search.ObjectIndexer.IndexWord(System.Int32,System.String&amp;,System.Boolean,System.Int32)">
      <summary>
        <para>Adds a new word coming from a specific document to the index. The word will be added with multiple variations allowing partial search.</para>
      </summary>
      <param name="documentIndex">Document where the indexed word was found.</param>
      <param name="word">Word to add to the index.</param>
      <param name="exact">If true, we will also store an exact match entry for this word.</param>
      <param name="scoreModifier">Modified to apply to the base match score for a specific word.</param>
    </member>
    <member name="M:UnityEditor.Search.ObjectIndexer.IndexWord(System.Int32,System.String&amp;,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>The word will be added with a maximum of variation. This can be used to save some space for very large words.</para>
      </summary>
      <param name="documentIndex">Document where the indexed word was found.</param>
      <param name="word">Word to add to the index.</param>
      <param name="maxVariations">Maximum number of variations to compute. Cannot be higher than the length of the word.</param>
      <param name="exact">If true, the indexer will also store an exact match entry for this word.</param>
      <param name="scoreModifier">Modified to apply to the base match score for a specific word.</param>
    </member>
    <member name="M:UnityEditor.Search.ObjectIndexer.IndexWordComponents(System.Int32,System.String&amp;)">
      <summary>
        <para>Splits a word into multiple variations.</para>
      </summary>
      <param name="documentIndex">Document where the indexed word was found.</param>
      <param name="word">Word to add to the index.</param>
    </member>
    <member name="T:UnityEditor.Search.ParsedQuery`1">
      <summary>
        <para>Provides methods to define an operation that can be used to filter a data set.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ParsedQuery_1.returnPayloadIfEmpty">
      <summary>
        <para>Boolean. Indicates if the original payload should be returned when the query is empty.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ParsedQuery_1.Apply(System.Collections.Generic.IEnumerable`1&lt;T&gt;)">
      <summary>
        <para>Applies the filtering on an IEnumerable data set.</para>
      </summary>
      <param name="data">The data to filter.</param>
      <returns>
        <para>A filtered IEnumerable.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ParsedQuery_1.Test(T)">
      <summary>
        <para>Tests the query on a single object. Returns true if the test passes.</para>
      </summary>
      <param name="element">A single test object.</param>
      <returns>
        <para>True if the object passes the query, returns false otherwise.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.ParsedQuery`2">
      <summary>
        <para>Provides methods to define an operation that can be used to filter a data set.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ParsedQuery_2.errors">
      <summary>
        <para>A list of QueryErrors.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ParsedQuery_2.evaluationGraph">
      <summary>
        <para>Query evaluation graph used to evaluate the query.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ParsedQuery_2.queryGraph">
      <summary>
        <para>Query graph. This graph can be used to walk all the node of the query if you need to do a special type of evaluation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ParsedQuery_2.text">
      <summary>
        <para>The text that generated the query.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ParsedQuery_2.tokens">
      <summary>
        <para>The list of tokens found in the query.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ParsedQuery_2.valid">
      <summary>
        <para>Indicates if the query is valid or not.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ParsedQuery_2.Apply(TPayload)">
      <summary>
        <para>Applies the filtering on a payload.</para>
      </summary>
      <param name="payload">The data to filter.</param>
      <returns>
        <para>A filtered IEnumerable.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ParsedQuery_2.GetNodeAtPosition(System.Int32)">
      <summary>
        <para>Get the query node located at the specified index position in the query.</para>
      </summary>
      <param name="position">The position of the query node in the text.</param>
      <returns>
        <para>An IQueryNode.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ParsedQuery_2.Optimize(System.Boolean,System.Boolean)">
      <summary>
        <para>Optimizes the query by optimizing the underlying filtering graph.</para>
      </summary>
      <param name="propagateNotToLeaves">Propagate "Not" operations to leaves, so only leaves can have "Not" operations as parents.</param>
      <param name="swapNotToRightHandSide">Swaps "Not" operations to the right-hand side of combining operations (i.e. "And", "Or"). Useful if a "Not" operation is slow.</param>
      <param name="options">Optimization options.</param>
    </member>
    <member name="M:UnityEditor.Search.ParsedQuery_2.Optimize(UnityEditor.Search.QueryGraphOptimizationOptions)">
      <summary>
        <para>Optimizes the query by optimizing the underlying filtering graph.</para>
      </summary>
      <param name="propagateNotToLeaves">Propagate "Not" operations to leaves, so only leaves can have "Not" operations as parents.</param>
      <param name="swapNotToRightHandSide">Swaps "Not" operations to the right-hand side of combining operations (i.e. "And", "Or"). Useful if a "Not" operation is slow.</param>
      <param name="options">Optimization options.</param>
    </member>
    <member name="T:UnityEditor.Search.ParseResult`1">
      <summary>
        <para>A ParseResult represents the result of a parsing operation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ParseResult_1.none">
      <summary>
        <para>Default value when no ParsetResult is available.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ParseResult_1.parsedValue">
      <summary>
        <para>The parsing result.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ParseResult_1.success">
      <summary>
        <para>Flag indicating if the parsing succeeded or not.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ParseResult_1.#ctor(System.Boolean,T)">
      <summary>
        <para>Create a ParseResult.</para>
      </summary>
      <param name="success">Flag indicating if the parsing succeeded or not.</param>
      <param name="value">The parsing result.</param>
    </member>
    <member name="T:UnityEditor.Search.PropertyDatabase">
      <summary>
        <para>The Search.PropertyDatabase|PropertyDatabase is a system that can store, in a thread-safe manner, properties of different kinds into a single file that we call a property database.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.PropertyDatabase.autoFlush">
      <summary>
        <para>Boolean indicating if the Search.PropertyDatabase|PropertyDatabase will update the backing file automatically or not.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.PropertyDatabase.filePath">
      <summary>
        <para>The file on which this Search.PropertyDatabase|PropertyDatabase is opened.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.PropertyDatabase.valid">
      <summary>
        <para>Boolean indicating if the Search.PropertyDatabase|PropertyDatabase is valid.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.Clear">
      <summary>
        <para>Clears the entire content of the Search.PropertyDatabase|PropertyDatabase.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.CreateDocumentKey(System.String)">
      <summary>
        <para>Creates a document key from a document identifier.</para>
      </summary>
      <param name="documentId">A document identifier.</param>
      <returns>
        <para>The document key.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.CreatePropertyHash(System.String)">
      <summary>
        <para>Creates a property hash from a property path.</para>
      </summary>
      <param name="propertyPath">The path or name of a property.</param>
      <returns>
        <para>The computed property hash.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.CreateRecordKey(System.String,System.String)">
      <summary>
        <para>Creates a record key from a document identifier and a property path.</para>
      </summary>
      <param name="documentId">A document identifier.</param>
      <param name="propertyPath">A property path or name.</param>
      <returns>
        <para>The record key.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.CreateRecordKey(System.String,UnityEngine.Hash128)">
      <summary>
        <para>Creates a record key from a document identifier and a property hash.</para>
      </summary>
      <param name="documentId">A document identifier.</param>
      <param name="propertyHash">A property hash.</param>
      <returns>
        <para>The record key.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.CreateRecordKey(System.UInt64,UnityEngine.Hash128)">
      <summary>
        <para>Creates a record key from a document key and a property hash.</para>
      </summary>
      <param name="documentKey">A document key.</param>
      <param name="propertyPathHash">A property hash.</param>
      <returns>
        <para>The record key.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.CreateRecordKey(System.String)">
      <summary>
        <para>Creates a record key from a property path.</para>
      </summary>
      <param name="propertyPath">A property path or name.</param>
      <returns>
        <para>The record key.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.CreateRecordKey(UnityEngine.Hash128)">
      <summary>
        <para>Creates a record key from a property hash.</para>
      </summary>
      <param name="propertyHash">A property hash.</param>
      <returns>
        <para>The record key.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.#ctor(System.String)">
      <summary>
        <para>Constructs a new instance of a Search.PropertyDatabase|PropertyDatabase.</para>
      </summary>
      <param name="filePath">Path to the backing file.</param>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.#ctor(System.String,System.Boolean,System.Double)">
      <summary>
        <para>Constructs a new instance of a Search.PropertyDatabase|PropertyDatabase.</para>
      </summary>
      <param name="filePath">Path to the backing file.</param>
      <param name="autoFlush">Boolean indicating if the backing file will be updated automatically or not.</param>
      <param name="backgroundUpdateDebounceInSeconds">Time between changes for the automatic background update to trigger.</param>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.Dispose">
      <summary>
        <para>Dispose of the resources used by this Search.PropertyDatabase|PropertyDatabase.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.Flush">
      <summary>
        <para>Triggers a manual update of the backing file.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.GetInfo">
      <summary>
        <para>Returns a formatted string showing various information of the Search.PropertyDatabase|PropertyDatabase.</para>
      </summary>
      <returns>
        <para>The formatted information.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.GetValueFromRecord(UnityEditor.Search.IPropertyDatabaseRecordValue)">
      <summary>
        <para>Deserialize a record value into its proper type.</para>
      </summary>
      <param name="recordValue">A serialized record value.</param>
      <returns>
        <para>The deserialized value.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.GetView(System.Boolean)">
      <summary>
        <para>Opens a view on the Search.PropertyDatabase|PropertyDatabase.</para>
      </summary>
      <param name="delayedSync">Boolean indicating if the sync between views should only happen when the view is disposed, or for every operation.</param>
      <returns>
        <para>The Search.PropertyDatabase|PropertyDatabase view.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.Invalidate(UnityEditor.Search.PropertyDatabaseRecordKey&amp;)">
      <summary>
        <para>Invalidates a single property record so it is no longer retrievable.</para>
      </summary>
      <param name="recordKey">A record key.</param>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.Invalidate(System.String)">
      <summary>
        <para>Invalidates all the properties stored for an entire document.</para>
      </summary>
      <param name="documentId">A document identifier.</param>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.Invalidate(System.UInt64)">
      <summary>
        <para>Invalidates all the properties stored for an entire document.</para>
      </summary>
      <param name="documentKey">A document key.</param>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.InvalidateMask(System.UInt64)">
      <summary>
        <para>Invalidate all properties stored from multiple documents that match a document key mask.</para>
      </summary>
      <param name="documentKeyMask">A document key mask.</param>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.IsPersistableType(System.Type)">
      <summary>
        <para>Returns a boolean indicating if a type can be persisted into the backing file.</para>
      </summary>
      <param name="type">A type.</param>
      <returns>
        <para>True if the type can be persisted in the file, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.Store(System.String,System.String,System.Object)">
      <summary>
        <para>Stores a document property.</para>
      </summary>
      <param name="documentId">A document identifier.</param>
      <param name="propertyPath">A property path or name.</param>
      <param name="value">The value of the property.</param>
      <returns>
        <para>True if the store operation succeeded, false if not.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.Store(System.UInt64,UnityEngine.Hash128,System.Object)">
      <summary>
        <para>Stores a document property with a precomputed document key and property hash.</para>
      </summary>
      <param name="documentKey">A document key.</param>
      <param name="propertyHash">A property hash.</param>
      <param name="value">The value of the property.</param>
      <returns>
        <para>True if the store operation succeeded, false if not.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.Store(UnityEditor.Search.PropertyDatabaseRecordKey&amp;,System.Object)">
      <summary>
        <para>Stores a document property with a precomputed record key.</para>
      </summary>
      <param name="recordKey">A record key.</param>
      <param name="value">The value of the property.</param>
      <returns>
        <para>True if the store operation succeeded, false if not.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.Store(UnityEngine.Hash128,System.Object)">
      <summary>
        <para>Stores a property with a precomputed property hash.</para>
      </summary>
      <param name="propertyHash">A property hash.</param>
      <param name="value">The value of the property.</param>
      <returns>
        <para>True if the store operation succeeded, false if not.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.TryLoad(UnityEditor.Search.PropertyDatabaseRecordKey&amp;,System.Object&amp;)">
      <summary>
        <para>Loads a single property, already deseriazed into an object.</para>
      </summary>
      <param name="recordKey">A record key.</param>
      <param name="value">The property value.</param>
      <returns>
        <para>True if the record is found and is valid, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.TryLoad(UnityEditor.Search.PropertyDatabaseRecordKey&amp;,UnityEditor.Search.IPropertyDatabaseRecordValue&amp;)">
      <summary>
        <para>Loads a single property, still contained within a record.</para>
      </summary>
      <param name="recordKey">A record key.</param>
      <param name="value">The property record.</param>
      <returns>
        <para>True if the record is found and is valid, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.TryLoad(System.UInt64,System.Collections.Generic.IEnumerable`1&lt;System.Object&gt;&amp;)">
      <summary>
        <para>Loads all the properties of a document, already deseriazed into objects.</para>
      </summary>
      <param name="documentKey">A document key.</param>
      <param name="data">The document property values.</param>
      <returns>
        <para>True if the record is found and is valid, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabase.TryLoad(System.UInt64,System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.IPropertyDatabaseRecord&gt;&amp;)">
      <summary>
        <para>Loads all the properties of a document, still contained within records.</para>
      </summary>
      <param name="documentKey">A document key.</param>
      <param name="records">The document property records.</param>
      <returns>
        <para>True if the record is found and is valid, false otherwise.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.PropertyDatabaseRecordKey">
      <summary>
        <para>The key of a record that is stored in the Search.PropertyDatabase|PropertyDatabase.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseRecordKey.documentKey">
      <summary>
        <para>The key of the document owning the property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseRecordKey.propertyKey">
      <summary>
        <para>The key of the property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.PropertyDatabaseRecordKey.size">
      <summary>
        <para>The size of the key, in bytes.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabaseRecordKey.CompareTo(UnityEditor.Search.PropertyDatabaseRecordKey)">
      <summary>
        <para>Compares the record key to another record key.</para>
      </summary>
      <param name="other">A record key to compare against.</param>
      <returns>
        <para>An integer representing the equality result. -1 if the current key is smaller, 0 if it is equal and 1 if it is greater than the other key.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabaseRecordKey.#ctor(System.UInt64,UnityEngine.Hash128)">
      <summary>
        <para>Constructs a new record key.</para>
      </summary>
      <param name="documentKey">A document key.</param>
      <param name="propertyKey">A property hash.</param>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabaseRecordKey.Equals(UnityEditor.Search.PropertyDatabaseRecordKey)">
      <summary>
        <para>Tests equality with another record key.</para>
      </summary>
      <param name="other">A record key.</param>
      <param name="obj">A record key.</param>
      <returns>
        <para>True if they are equal, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabaseRecordKey.Equals(System.Object)">
      <summary>
        <para>Tests equality with another record key.</para>
      </summary>
      <param name="other">A record key.</param>
      <param name="obj">A record key.</param>
      <returns>
        <para>True if they are equal, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.PropertyDatabaseRecordKey.GetHashCode">
      <summary>
        <para>Gets the hashcode of the key.</para>
      </summary>
      <returns>
        <para>The hashcode.</para>
      </returns>
    </member>
    <member name="?:UnityEditor.Search.PropertyDatabaseRecordKey.op_Equal(UnityEditor.Search.PropertyDatabaseRecordKey,UnityEditor.Search.PropertyDatabaseRecordKey)">
      <summary>
        <para>The equals operator.</para>
      </summary>
      <param name="lhs">A record key.</param>
      <param name="rhs">A record key.</param>
    </member>
    <member name="?:UnityEditor.Search.PropertyDatabaseRecordKey.op_GreaterThan(UnityEditor.Search.PropertyDatabaseRecordKey,UnityEditor.Search.PropertyDatabaseRecordKey)">
      <summary>
        <para>The greater than operator.</para>
      </summary>
      <param name="lhs">A record key.</param>
      <param name="rhs">A record key.</param>
    </member>
    <member name="?:UnityEditor.Search.PropertyDatabaseRecordKey.op_LessThan(UnityEditor.Search.PropertyDatabaseRecordKey,UnityEditor.Search.PropertyDatabaseRecordKey)">
      <summary>
        <para>The less than operator.</para>
      </summary>
      <param name="lhs">A record key.</param>
      <param name="rhs">A record key.</param>
    </member>
    <member name="?:UnityEditor.Search.PropertyDatabaseRecordKey.op_NotEqual(UnityEditor.Search.PropertyDatabaseRecordKey,UnityEditor.Search.PropertyDatabaseRecordKey)">
      <summary>
        <para>The not equal operator.</para>
      </summary>
      <param name="lhs">A record key.</param>
      <param name="rhs">A record key.</param>
    </member>
    <member name="T:UnityEditor.Search.PropertyDatabaseType">
      <summary>
        <para>An enum representing the type of data stored in a record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.Bool">
      <summary>
        <para>Indicates that a bool is stored in the record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.Byte">
      <summary>
        <para>Indicates that a byte is stored in the record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.Color">
      <summary>
        <para>Indicates that a Color is stored in the record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.Color32">
      <summary>
        <para>Indicates that a Color32 is stored in the record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.Double">
      <summary>
        <para>Indicates that a double is stored in the record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.FixedString">
      <summary>
        <para>Indicates that a fixed length string is stored in the record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.Float">
      <summary>
        <para>Indicates that a float is stored in the record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.GameObjectProperty">
      <summary>
        <para>Indicates that a game object property is stored in the record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.GlobalObjectId">
      <summary>
        <para>Indicates that a global object id is stored in the record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.InstanceId">
      <summary>
        <para>Indicates that an instance id is stored in the record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.Integer">
      <summary>
        <para>Indicates that an integer is stored in the record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.Long">
      <summary>
        <para>Indicates that a long integer is stored in the record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.None">
      <summary>
        <para>Indicates that nothing is stored in the record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.Short">
      <summary>
        <para>Indicates that a short integer is stored in the record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.String">
      <summary>
        <para>Indicates that a string is stored in the record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.UnsignedInteger">
      <summary>
        <para>Indicates that an unsigned integer is stored in the record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.UnsignedLong">
      <summary>
        <para>Indicates that an unsigned long integer is stored in the record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.UnsignedShort">
      <summary>
        <para>Indicates that an unsigned short integer is stored in the record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.Vector4">
      <summary>
        <para>Indicates that a Vector4 is stored in the record.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.PropertyDatabaseType.Volatile">
      <summary>
        <para>Indicates that a volatile object is stored in the record.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.PropertyTable">
      <summary>
        <para>The PropertyTable provide an IMGUI widget to display search property results in a table view.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.PropertyTable.#ctor(System.String,UnityEditor.Search.ITableView)">
      <summary>
        <para>Creates a search property table.</para>
      </summary>
      <param name="serializationUID">Unique ID used to serialize the property table.</param>
      <param name="tableView">Table view host.</param>
    </member>
    <member name="M:UnityEditor.Search.PropertyTable.Dispose">
      <summary>
        <para>Make sure to dispose the property table when not needed.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.PropertyTable.FrameColumn(System.Int32)">
      <summary>
        <para>Frames a search column. The table view will scroll the view to show the framed column.</para>
      </summary>
      <param name="columnIndex">Index of the column to be framed.</param>
    </member>
    <member name="M:UnityEditor.Search.PropertyTable.OnGUI(UnityEngine.Rect)">
      <summary>
        <para>Draws the search property table content.</para>
      </summary>
      <param name="tableRect">Position in the current GUI view to render the search property table.</param>
    </member>
    <member name="T:UnityEditor.Search.Providers.SceneQueryEngineFilterAttribute">
      <summary>
        <para>Custom attribute is used to customize the search engine used by the scene search provider.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.Providers.SceneQueryEngineFilterAttribute.#ctor(System.String,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (i.e. "id" in "id&gt;=2").</param>
      <param name="supportedOperators">List of supported operator tokens. Null for all operators.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute. See Search.Providers.SceneQueryEngineParameterTransformerAttribute|SceneQueryEngineParameterTransformer for more information.</param>
    </member>
    <member name="M:UnityEditor.Search.Providers.SceneQueryEngineFilterAttribute.#ctor(System.String,System.StringComparison,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (i.e. "id" in "id&gt;=2").</param>
      <param name="supportedOperators">List of supported operator tokens. Null for all operators.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute. See Search.Providers.SceneQueryEngineParameterTransformerAttribute|SceneQueryEngineParameterTransformer for more information.</param>
    </member>
    <member name="M:UnityEditor.Search.Providers.SceneQueryEngineFilterAttribute.#ctor(System.String,System.String,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (i.e. "id" in "id&gt;=2").</param>
      <param name="supportedOperators">List of supported operator tokens. Null for all operators.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute. See Search.Providers.SceneQueryEngineParameterTransformerAttribute|SceneQueryEngineParameterTransformer for more information.</param>
    </member>
    <member name="M:UnityEditor.Search.Providers.SceneQueryEngineFilterAttribute.#ctor(System.String,System.String,System.StringComparison,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (i.e. "id" in "id&gt;=2").</param>
      <param name="supportedOperators">List of supported operator tokens. Null for all operators.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute. See Search.Providers.SceneQueryEngineParameterTransformerAttribute|SceneQueryEngineParameterTransformer for more information.</param>
    </member>
    <member name="T:UnityEditor.Search.Providers.SceneQueryEngineParameterTransformerAttribute">
      <summary>
        <para>Attribute class that defines a custom parameter transformer function applied for a query running in a scene provider defined by a scene custom filter using Search.Providers.SceneQueryEngineFilterAttribute.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.QueryBlock">
      <summary>
        <para>A query block is the visual element of a query node in a query.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryBlock.context">
      <summary>
        <para>Search context that composed this query block.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryBlock.name">
      <summary>
        <para>Name of the block.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryBlock.op">
      <summary>
        <para>Filter operator (i.e. :, =, &lt;, &gt;, etc.) of the block if any.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryBlock.source">
      <summary>
        <para>Query builder source that compose this block.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryBlock.value">
      <summary>
        <para>Value of the block.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryBlock.Apply(UnityEditor.Search.SearchProposition&amp; modreq(System.Runtime.InteropServices.InAttribute))">
      <summary>
        <para>This method is invoked when a selected search proposition must be applied to the builder search query.</para>
      </summary>
      <param name="searchProposition">Selected search proposition.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryBlock.ToString">
      <summary>
        <para>Returns the text filter of the block.</para>
      </summary>
      <returns>
        <para>Formatted text filter.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.QueryEngine">
      <summary>
        <para>A QueryEngine defines how to build a query from an input string.
It can be customized to support custom filters and operators.
Default query engine of type object.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine.#ctor">
      <summary>
        <para>Construct a new QueryEngine.</para>
      </summary>
      <param name="validateFilters">Indicates if the engine must validate filters when parsing the query.</param>
      <param name="validationOptions">The validation options to use in this engine.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine.#ctor(System.Boolean)">
      <summary>
        <para>Construct a new QueryEngine.</para>
      </summary>
      <param name="validateFilters">Indicates if the engine must validate filters when parsing the query.</param>
      <param name="validationOptions">The validation options to use in this engine.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine.#ctor(UnityEditor.Search.QueryValidationOptions)">
      <summary>
        <para>Construct a new QueryEngine.</para>
      </summary>
      <param name="validateFilters">Indicates if the engine must validate filters when parsing the query.</param>
      <param name="validationOptions">The validation options to use in this engine.</param>
    </member>
    <member name="T:UnityEditor.Search.QueryEngine`1">
      <summary>
        <para>A QueryEngine defines how to build a query from an input string.
It can be customized to support custom filters and operators.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryEngine_1.globalStringComparison">
      <summary>
        <para>Global string comparison options for word matching and filter handling (if not overridden).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryEngine_1.searchDataCallback">
      <summary>
        <para>The callback used to get the data to match to the search words.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryEngine_1.searchDataOverridesStringComparison">
      <summary>
        <para>Indicates if word/phrase matching uses searchDataStringComparison or not.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryEngine_1.searchDataStringComparison">
      <summary>
        <para>String comparison options for word/phrase matching.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryEngine_1.searchWordMatcher">
      <summary>
        <para>The function used to match the search data against the search words.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryEngine_1.skipIncompleteFilters">
      <summary>
        <para>Boolean. Indicates if incomplete filters should be skipped.
If true, filters are skipped. If false and Search.QueryEngine_1.validateFilters|validateFilters is true, incomplete filters will generate errors when parsed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryEngine_1.skipUnknownFilters">
      <summary>
        <para>Boolean. Indicates if unknown filters should be skipped.
If true, unknown filters are skipped. If false and Search.QueryEngine_1.validateFilters|validateFilters is true, unknown filters will generate errors if no default filter handler is provided.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryEngine_1.validateFilters">
      <summary>
        <para>Get or set if the engine must validate filters when parsing the query. Defaults to true.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.String,System.Func`2&lt;TData,TFilter&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData and returns an object of type TFilter.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.String,System.Func`2&lt;TData,TFilter&gt;,System.StringComparison,System.String[])">
      <summary>
        <para>Adds a new custom filter.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData and returns an object of type TFilter.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.String,System.Func`3&lt;TData,TParam,TFilter&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with parameters.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData and TParam, and returns an object of type TFilter.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.String,System.Func`3&lt;TData,TParam,TFilter&gt;,System.StringComparison,System.String[])">
      <summary>
        <para>Adds a new custom filter with parameters.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData and TParam, and returns an object of type TFilter.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.String,System.Func`3&lt;TData,TParam,TFilter&gt;,System.Func`2&lt;System.String,TParam&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with parameters.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData and TParam, and returns an object of type TFilter.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.String,System.Func`3&lt;TData,TParam,TFilter&gt;,System.Func`2&lt;System.String,TParam&gt;,System.StringComparison,System.String[])">
      <summary>
        <para>Adds a new custom filter with parameters.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData and TParam, and returns an object of type TFilter.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.String,System.Func`4&lt;TData,System.String,TFilter,System.Boolean&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with a complete resolver.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="filterResolver">Callback used to handle any operators for this filter. Takes an object of type TData, the operator token and the filter value, and returns a boolean indicating if the filter passed or not.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.String,System.Func`5&lt;TData,TParam,System.String,TFilter,System.Boolean&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with parameters and a complete resolver.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="filterResolver">Callback used to handle any operators for this filter. Takes an object of type TData, an object of type TParam, the operator token and the filter value, and returns a boolean indicating if the filter passed or not.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.String,System.Func`5&lt;TData,TParam,System.String,TFilter,System.Boolean&gt;,System.Func`2&lt;System.String,TParam&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with parameters and a complete resolver.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="filterResolver">Callback used to handle any operators for this filter. Takes an object of type TData, an object of type TParam, the operator token and the filter value, and returns a boolean indicating if the filter passed or not.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.Text.RegularExpressions.Regex,System.Func`3&lt;TData,System.String,TFilter&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with a regular expression.</para>
      </summary>
      <param name="token">The regular expression that matches the filter. Matches what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData, a string representing the actual filter name that was matched and returns an object of type TFilter.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="stringComparison">String comparison option.</param>
      <returns>
        <para>The new filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.Text.RegularExpressions.Regex,System.Func`3&lt;TData,System.String,TFilter&gt;,System.StringComparison,System.String[])">
      <summary>
        <para>Adds a new custom filter with a regular expression.</para>
      </summary>
      <param name="token">The regular expression that matches the filter. Matches what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData, a string representing the actual filter name that was matched and returns an object of type TFilter.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="stringComparison">String comparison option.</param>
      <returns>
        <para>The new filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.Text.RegularExpressions.Regex,System.Func`4&lt;TData,System.String,TParam,TFilter&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with a regular expression and parameters.</para>
      </summary>
      <param name="token">The regular expression that matches the filter. Matches what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData, a string representing the actual filter name that was matched, an object of type TParam, and returns an object of type TFilter.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <returns>
        <para>The new filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.Text.RegularExpressions.Regex,System.Func`4&lt;TData,System.String,TParam,TFilter&gt;,System.StringComparison,System.String[])">
      <summary>
        <para>Adds a new custom filter with a regular expression and parameters.</para>
      </summary>
      <param name="token">The regular expression that matches the filter. Matches what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData, a string representing the actual filter name that was matched, an object of type TParam, and returns an object of type TFilter.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <returns>
        <para>The new filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.Text.RegularExpressions.Regex,System.Func`4&lt;TData,System.String,TParam,TFilter&gt;,System.Func`2&lt;System.String,TParam&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with a regular expression and parameters.</para>
      </summary>
      <param name="token">The regular expression that matches the filter. Matches what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData, a string representing the actual filter name that was matched, an object of type TParam, and returns an object of type TFilter.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <returns>
        <para>The new filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.Text.RegularExpressions.Regex,System.Func`4&lt;TData,System.String,TParam,TFilter&gt;,System.Func`2&lt;System.String,TParam&gt;,System.StringComparison,System.String[])">
      <summary>
        <para>Adds a new custom filter with a regular expression and parameters.</para>
      </summary>
      <param name="token">The regular expression that matches the filter. Matches what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData, a string representing the actual filter name that was matched, an object of type TParam, and returns an object of type TFilter.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <returns>
        <para>The new filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.Text.RegularExpressions.Regex,System.Func`5&lt;TData,System.String,System.String,TFilter,System.Boolean&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with a regular expression and a complete resolver.</para>
      </summary>
      <param name="token">The regular expression that matches the filter. Matches what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="filterResolver">Callback used to handle any operators for this filter. Takes an object of type TData, a string representing the actual filter name that was matched, the operator token and the filter value, and returns a boolean indicating if the filter passed or not.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <returns>
        <para>The new filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.Text.RegularExpressions.Regex,System.Func`6&lt;TData,System.String,TParam,System.String,TFilter,System.Boolean&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with a regular expression, parameters and a complete resolver.</para>
      </summary>
      <param name="token">The regular expression that matches the filter. Matches what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="filterResolver">Callback used to handle any operators for this filter. Takes an object of type TData, a string representing the actual filter name that was matched, an object of type TParam, the operator token and the filter value, and returns a boolean indicating if the filter passed or not.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <returns>
        <para>The new filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.Text.RegularExpressions.Regex,System.Func`6&lt;TData,System.String,TParam,System.String,TFilter,System.Boolean&gt;,System.Func`2&lt;System.String,TParam&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with a regular expression, parameters and a complete resolver.</para>
      </summary>
      <param name="token">The regular expression that matches the filter. Matches what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="filterResolver">Callback used to handle any operators for this filter. Takes an object of type TData, a string representing the actual filter name that was matched, an object of type TParam, the operator token and the filter value, and returns a boolean indicating if the filter passed or not.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <returns>
        <para>The new filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFiltersFromAttribute">
      <summary>
        <para>Adds all custom filters that are identified with the method attribute TFilterAttribute.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddNestedQueryAggregator(System.String,System.Func`2&lt;System.Collections.Generic.IEnumerable`1&lt;TNestedQueryData&gt;,System.Collections.Generic.IEnumerable`1&lt;TNestedQueryData&gt;&gt;)">
      <summary>
        <para>Adds a new nested query aggregator. An aggregator is an operation that can be applied on a nested query to aggregate the results of the nested query according to certain criteria.</para>
      </summary>
      <param name="token">Name of the aggregator used when typing the query. This name is converted to lowercase when parsing the query to speed up the process.</param>
      <param name="aggregator">Aggregator function. Takes the results of the nested query, and returns an aggregate that contains any number of items.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddOperator(System.String)">
      <summary>
        <para>Adds a custom filter operator.</para>
      </summary>
      <param name="op">The operator identifier.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddOperatorHandler(System.String,System.Func`3&lt;TFilterVariable,TFilterConstant,System.Boolean&gt;)">
      <summary>
        <para>Adds a custom filter operator handler.</para>
      </summary>
      <param name="op">The filter operator.</param>
      <param name="handler">Callback to handle the operation. Takes a TFilterVariable (the value returned by the filter handler, it will vary for each element), a TFilterConstant (right-hand side value of the operator, which is constant), and a StringComparison option and returns a boolean indicating if the filter passes or not.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddOperatorHandler(System.String,System.Func`4&lt;TFilterVariable,TFilterConstant,System.StringComparison,System.Boolean&gt;)">
      <summary>
        <para>Adds a custom filter operator handler.</para>
      </summary>
      <param name="op">The filter operator.</param>
      <param name="handler">Callback to handle the operation. Takes a TFilterVariable (the value returned by the filter handler, it will vary for each element), a TFilterConstant (right-hand side value of the operator, which is constant), and a StringComparison option and returns a boolean indicating if the filter passes or not.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddTypeParser(System.Func`2&lt;System.String,UnityEditor.Search.ParseResult`1&lt;TFilterConstant&gt;&gt;)">
      <summary>
        <para>Adds a type parser that parses a string and returns a custom type. Used by custom operator handlers (see Search.QueryEngine_1.AddOperatorHandler|AddOperatorHandler).</para>
      </summary>
      <param name="parser">Callback used to determine if a string can be converted into TFilterConstant. Takes a string and returns a ParseResult object. This contains the success flag, and the converted value if it succeeds.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.ClearFilters">
      <summary>
        <para>Removes all filters that were added on the Search.QueryEngine_1|QueryEngine.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.#ctor">
      <summary>
        <para>Constructs a new QueryEngine.</para>
      </summary>
      <param name="validateFilters">Indicates if the engine must validate filters when parsing the query.</param>
      <param name="validationOptions">The validation options to use in this engine.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.#ctor(System.Boolean)">
      <summary>
        <para>Constructs a new QueryEngine.</para>
      </summary>
      <param name="validateFilters">Indicates if the engine must validate filters when parsing the query.</param>
      <param name="validationOptions">The validation options to use in this engine.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.#ctor(UnityEditor.Search.QueryValidationOptions)">
      <summary>
        <para>Constructs a new QueryEngine.</para>
      </summary>
      <param name="validateFilters">Indicates if the engine must validate filters when parsing the query.</param>
      <param name="validationOptions">The validation options to use in this engine.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.GetAllFilters">
      <summary>
        <para>Get all filters added on this Search.QueryEngine_1|QueryEngine.</para>
      </summary>
      <returns>
        <para>An enumerable of Search.IQueryEngineFilter|IQueryEngineFilter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.GetOperator(System.String)">
      <summary>
        <para>Get a custom operator added on the Search.QueryEngine_1|QueryEngine.</para>
      </summary>
      <param name="op">The operator identifier.</param>
      <returns>
        <para>The global Search.QueryFilterOperator|QueryFilterOperator.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.ParseQuery(System.String,System.Boolean)">
      <summary>
        <para>Parses a query string into a ParsedQuery operation. This ParsedQuery operation can then be used to filter any data set of type TData.</para>
      </summary>
      <param name="text">The query input string.</param>
      <param name="useFastYieldingQueryHandler">Set to true to get a query that yields null results for elements that don't pass the query, instead of only the elements that pass the query.</param>
      <returns>
        <para>ParsedQuery operation of type TData.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.ParseQuery(System.String)">
      <summary>
        <para>Parses a query string into a ParsedQuery operation. This ParsedQuery operation can then be used to filter any data set of type TData.</para>
      </summary>
      <param name="text">The query input string.</param>
      <param name="useFastYieldingQueryHandler">Set to true to get a query that yields null results for elements that don't pass the query, instead of only the elements that pass the query.</param>
      <returns>
        <para>ParsedQuery operation of type TData.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.ParseQuery(System.String,UnityEditor.Search.IQueryHandlerFactory`3&lt;TData,TQueryHandler,TPayload&gt;)">
      <summary>
        <para>Parses a query string into a ParsedQuery operation. This ParsedQuery operation can then be used to filter any data set of type TData.</para>
      </summary>
      <param name="text">The query input string.</param>
      <param name="queryHandlerFactory">A factory object that creates query handlers of type TQueryHandler. See Search.IQueryHandlerFactory_3|IQueryHandlerFactory.</param>
      <returns>
        <para>ParsedQuery operation of type TData and TPayload.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.RemoveFilter(System.String)">
      <summary>
        <para>Removes a custom filter.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.RemoveFilter(System.Text.RegularExpressions.Regex)">
      <summary>
        <para>Removes a custom filter.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.RemoveFilter(UnityEditor.Search.IQueryEngineFilter)">
      <summary>
        <para>Removes a custom filter.</para>
      </summary>
      <param name="filter">The filter object returned by Search.QueryEngine_1.AddFilter|AddFilter.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.RemoveOperator(System.String)">
      <summary>
        <para>Removes a custom operator that was added on the Search.QueryEngine_1|QueryEngine.</para>
      </summary>
      <param name="op">The operator identifier.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.SetDefaultFilter(System.Func`5&lt;TData,System.String,System.String,System.String,System.Boolean&gt;)">
      <summary>
        <para>Sets the default filter handler for filters that were not registered.</para>
      </summary>
      <param name="handler">Callback used to handle the filter. Takes an object of type TData, the filter identifier, the operator, and the filter value, and returns a boolean indicating if the filter passed or not.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.SetDefaultParamFilter(System.Func`6&lt;TData,System.String,System.String,System.String,System.String,System.Boolean&gt;)">
      <summary>
        <para>Sets the default filter handler for function filters that were not registered.</para>
      </summary>
      <param name="handler">Callback used to handle the function filter. Takes an object of type TData, the filter identifier, the parameter, the operator, and the filter value, and returns a boolean indicating if the filter passed or not.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.SetFilterNestedQueryTransformer(System.String,System.Func`2&lt;TNestedQueryData,TRhs&gt;)">
      <summary>
        <para>Sets a filter's nested query transformer function. This function takes the result of a nested query and extracts the necessary data to compare with the filter.</para>
      </summary>
      <param name="filterToken">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="transformer">The transformer function.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.SetGlobalStringComparisonOptions(System.StringComparison)">
      <summary>
        <para>Sets global string comparison options. Used for word matching and filter handling (unless overridden by filter).</para>
      </summary>
      <param name="stringComparison">String comparison options.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.SetNestedQueryHandler(System.Func`3&lt;System.String,System.String,System.Collections.Generic.IEnumerable`1&lt;TNestedQueryData&gt;&gt;)">
      <summary>
        <para>Sets the function that will handle nested queries. Only one handler can be set.</para>
      </summary>
      <param name="handler">The function that handles nested queries. It receives the nested query and the filter token on which the query is applied, and returns an IEnumerable.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.SetSearchDataCallback(System.Func`2&lt;TData,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;&gt;)">
      <summary>
        <para>Sets the callback used to fetch the data that is matched against the search words.</para>
      </summary>
      <param name="getSearchDataCallback">Callback used to get the data to be matched against the search words. Takes an object of type TData and returns an IEnumerable of strings.</param>
      <param name="stringComparison">String comparison options.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.SetSearchDataCallback(System.Func`2&lt;TData,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;&gt;,System.StringComparison)">
      <summary>
        <para>Sets the callback used to fetch the data that is matched against the search words.</para>
      </summary>
      <param name="getSearchDataCallback">Callback used to get the data to be matched against the search words. Takes an object of type TData and returns an IEnumerable of strings.</param>
      <param name="stringComparison">String comparison options.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.SetSearchDataCallback(System.Func`2&lt;TData,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;&gt;,System.Func`2&lt;System.String,System.String&gt;,System.StringComparison)">
      <summary>
        <para>Sets the callback used to fetch the data that is matched against the search words.</para>
      </summary>
      <param name="getSearchDataCallback">Callback used to get the data to be matched against the search words. Takes an object of type TData and returns an IEnumerable of strings.</param>
      <param name="searchWordTransformerCallback">Callback used to transform a search word during the query parsing. Useful when doing lowercase or uppercase comparison. Can return null or an empty string to remove the word from the query.</param>
      <param name="stringComparison">String comparison options.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.SetSearchWordMatcher(System.Func`5&lt;System.String,System.Boolean,System.StringComparison,System.String,System.Boolean&gt;)">
      <summary>
        <para>Set the search word matching function to be used instead of the default one. Set to null to use the default.</para>
      </summary>
      <param name="wordMatcher">The search word matching function. The first parameter is the search word. The second parameter is a boolean for exact match or not. The third parameter is the StringComparison options. The fourth parameter is an element of the array returned by the search data callback. The function returns true for a match or false for no match.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.TryGetFilter(System.String,UnityEditor.Search.IQueryEngineFilter&amp;)">
      <summary>
        <para>Get a filter by its token.</para>
      </summary>
      <param name="token">The token used to create the filter.</param>
      <param name="filter">The existing Search.IQueryEngineFilter|IQueryEngineFilter, or null if it does not exist.</param>
      <returns>
        <para>Returns true if the filter is retrieved or false if the filter does not exist.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.TryGetFilter(System.Text.RegularExpressions.Regex,UnityEditor.Search.IQueryEngineFilter&amp;)">
      <summary>
        <para>Get a filter by its token.</para>
      </summary>
      <param name="token">The token used to create the filter.</param>
      <param name="filter">The existing Search.IQueryEngineFilter|IQueryEngineFilter, or null if it does not exist.</param>
      <returns>
        <para>Returns true if the filter is retrieved or false if the filter does not exist.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.QueryEngineFilterAttribute">
      <summary>
        <para>Base attribute class used to define a custom filter on a QueryEngine.
All filter types supported by QueryEngine.AddFilter are supported by this attribute.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryEngineFilterAttribute.comparisonOptions">
      <summary>
        <para>String comparison options.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryEngineFilterAttribute.overridesStringComparison">
      <summary>
        <para>Flag indicating if the filter overrides the global string comparison options.
Set to true when the comparisonOptions are used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryEngineFilterAttribute.paramTransformerFunction">
      <summary>
        <para>Name of the parameter transformer function to use with this filter.
Tag the parameter transformer function with the appropriate ParameterTransformer attribute.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryEngineFilterAttribute.supportedOperators">
      <summary>
        <para>List of supported operator tokens. Null for all operators.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryEngineFilterAttribute.token">
      <summary>
        <para>The identifier of the filter. Typically what precedes the operator in a filter (i.e. "id" in "id&gt;=2").</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryEngineFilterAttribute.useParamTransformer">
      <summary>
        <para>Flag indicating if this filter uses a parameter transformer function.
Set to true when paramTransformerFunction is used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryEngineFilterAttribute.useRegularExpressionToken">
      <summary>
        <para>Indicates if the filter uses a regular expression token or not.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryEngineFilterAttribute.#ctor(System.String,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="supportedOperators">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngineFilterAttribute.#ctor(System.String,System.StringComparison,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="supportedOperators">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngineFilterAttribute.#ctor(System.String,System.String,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="supportedOperators">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngineFilterAttribute.#ctor(System.String,System.String,System.StringComparison,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="supportedOperators">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngineFilterAttribute.#ctor(System.String,System.Boolean,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter or regular expression that matches the filters. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="useRegularExpression">Set this flag to true if the token is a regular expression.</param>
      <param name="supportedOperators">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngineFilterAttribute.#ctor(System.String,System.Boolean,System.StringComparison,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter or regular expression that matches the filters. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="useRegularExpression">Set this flag to true if the token is a regular expression.</param>
      <param name="supportedOperators">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngineFilterAttribute.#ctor(System.String,System.Boolean,System.String,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter or regular expression that matches the filters. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="useRegularExpression">Set this flag to true if the token is a regular expression.</param>
      <param name="supportedOperators">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngineFilterAttribute.#ctor(System.String,System.Boolean,System.String,System.StringComparison,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter or regular expression that matches the filters. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="useRegularExpression">Set this flag to true if the token is a regular expression.</param>
      <param name="supportedOperators">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute.</param>
    </member>
    <member name="T:UnityEditor.Search.QueryEngineParameterTransformerAttribute">
      <summary>
        <para>Base attribute class that defines a custom parameter transformer function.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.QueryError">
      <summary>
        <para>A QueryError holds the definition of a query parsing error.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryError.index">
      <summary>
        <para>Index where the error happened.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryError.length">
      <summary>
        <para>Length of the block that was being parsed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryError.reason">
      <summary>
        <para>Reason why the parsing failed.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryError.#ctor">
      <summary>
        <para>Construct a new QueryError.</para>
      </summary>
      <param name="index">Index where the error happened.</param>
      <param name="reason">Reason why the parsing failed.</param>
      <param name="length">Length of the block that was being parsed.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryError.#ctor(System.Int32,System.String)">
      <summary>
        <para>Construct a new QueryError.</para>
      </summary>
      <param name="index">Index where the error happened.</param>
      <param name="reason">Reason why the parsing failed.</param>
      <param name="length">Length of the block that was being parsed.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryError.#ctor(System.Int32,System.Int32,System.String)">
      <summary>
        <para>Construct a new QueryError.</para>
      </summary>
      <param name="index">Index where the error happened.</param>
      <param name="reason">Reason why the parsing failed.</param>
      <param name="length">Length of the block that was being parsed.</param>
    </member>
    <member name="T:UnityEditor.Search.QueryFilterOperator">
      <summary>
        <para>A QueryFilterOperator defines a boolean operator between a value returned by a filter and an operand inputted in the search query.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryFilterOperator.token">
      <summary>
        <para>The operator identifier.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryFilterOperator.valid">
      <summary>
        <para>Indicates if this filter operator is valid.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryFilterOperator.AddHandler(System.Func`3&lt;TFilterVariable,TFilterConstant,System.Boolean&gt;)">
      <summary>
        <para>Adds a custom filter operator handler.</para>
      </summary>
      <param name="handler">Callback to handle the operation. Takes a TFilterVariable (the value returned by the filter handler, it will vary for each element), a TFilterConstant (right-hand side value of the operator, which is constant), and a StringComparison option and returns a boolean indicating if the filter passes or not.</param>
      <returns>
        <para>The current Search.QueryFilterOperator|QueryFilterOperator.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryFilterOperator.AddHandler(System.Func`4&lt;TFilterVariable,TFilterConstant,System.StringComparison,System.Boolean&gt;)">
      <summary>
        <para>Adds a custom filter operator handler.</para>
      </summary>
      <param name="handler">Callback to handle the operation. Takes a TFilterVariable (the value returned by the filter handler, it will vary for each element), a TFilterConstant (right-hand side value of the operator, which is constant), and a StringComparison option and returns a boolean indicating if the filter passes or not.</param>
      <returns>
        <para>The current Search.QueryFilterOperator|QueryFilterOperator.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.QueryGraph">
      <summary>
        <para>Class that represents a query graph.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryGraph.empty">
      <summary>
        <para>Returns true if the graph is empty.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryGraph.root">
      <summary>
        <para>Root node of the graph. Can be null.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryGraph.#ctor(UnityEditor.Search.IQueryNode)">
      <summary>
        <para>Constructor. Creates a new query graph.</para>
      </summary>
      <param name="root">Root node of the graph.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryGraph.Optimize(System.Boolean,System.Boolean)">
      <summary>
        <para>Optimize the graph.</para>
      </summary>
      <param name="propagateNotToLeaves">Propagate "Not" operations to leaves, so only leaves can have "Not" operations as parents.</param>
      <param name="swapNotToRightHandSide">Swaps "Not" operations to the right-hand side of combining operations (i.e. "And", "Or"). Useful if a "Not" operation is slow.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryGraph.Optimize(UnityEditor.Search.QueryGraphOptimizationOptions)">
      <summary>
        <para>Optimize the graph.</para>
      </summary>
      <param name="options">Optimization options.</param>
    </member>
    <member name="T:UnityEditor.Search.QueryGraphOptimizationOptions">
      <summary>
        <para>Structure containing the different options used to optimize a query graph.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryGraphOptimizationOptions.propagateNotToLeaves">
      <summary>
        <para>Propagate "Not" operations to leaves, so only leaves can have "Not" operations as parents.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryGraphOptimizationOptions.swapFilterFunctionsToRightHandSide">
      <summary>
        <para>Swaps filter functions to the right-hand side of combining operations (i.e. "And", "Or"). Useful if those filter operations are slow.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryGraphOptimizationOptions.swapNotToRightHandSide">
      <summary>
        <para>Swaps "Not" operations to the right-hand side of combining operations (i.e. "And", "Or"). Useful if a "Not" operation is slow.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.QueryListBlock">
      <summary>
        <para>A query list block represents a special query block that will list a set of value for a given filter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryListBlock.category">
      <summary>
        <para>Block category.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryListBlock.icon">
      <summary>
        <para>Icon displayed in the query builder block widget.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryListBlock.id">
      <summary>
        <para>Block id.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryListBlock.Apply(UnityEditor.Search.SearchProposition&amp; modreq(System.Runtime.InteropServices.InAttribute))">
      <summary>
        <para>Apply proposition to the block.</para>
      </summary>
      <param name="searchProposition">Selected proposition to be applied to the source.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryListBlock.GetPropositions(UnityEditor.Search.SearchPropositionFlags)">
      <summary>
        <para>Returns propositions when the list block is clicked.</para>
      </summary>
      <param name="flags">Flags that can be used to know which type of proposition to yield.</param>
      <returns>
        <para>Propositions.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.QueryListBlockAttribute">
      <summary>
        <para>This attribute can be used on a class deriving from QueryListBlock to display in query builder mode a special block that will propose a fixed set of values when clicked.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryListBlockAttribute.category">
      <summary>
        <para>Category.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryListBlockAttribute.id">
      <summary>
        <para>Filter id of the block.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryListBlockAttribute.ids">
      <summary>
        <para>A set of IDs for which the list block will be displayed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryListBlockAttribute.name">
      <summary>
        <para>Displayed name of the block.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryListBlockAttribute.op">
      <summary>
        <para>Default operator assigned to the filter when the value changes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryListBlockAttribute.type">
      <summary>
        <para>The list block type is used to get the the icon to be displayed instead of the block name.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryListBlockAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Register a list block for a given filter.</para>
      </summary>
      <param name="category">Category of the block.</param>
      <param name="name">Display name of the block.</param>
      <param name="id">Filter id of the block for which to display this list block.</param>
      <param name="op">Default operator fo the filter block.</param>
      <param name="ids">Set of IDs for which this list block will be applied too.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryListBlockAttribute.#ctor(System.String,System.String,System.String[],System.String)">
      <summary>
        <para>Register a list block for a given filter.</para>
      </summary>
      <param name="category">Category of the block.</param>
      <param name="name">Display name of the block.</param>
      <param name="id">Filter id of the block for which to display this list block.</param>
      <param name="op">Default operator fo the filter block.</param>
      <param name="ids">Set of IDs for which this list block will be applied too.</param>
    </member>
    <member name="T:UnityEditor.Search.QueryNodeType">
      <summary>
        <para>Options for representing the query node types.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Aggregator">
      <summary>
        <para>Aggregator node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.And">
      <summary>
        <para>And node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Comment">
      <summary>
        <para>Comment node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Filter">
      <summary>
        <para>Filter node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.FilterIn">
      <summary>
        <para>Filter with nested query node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Group">
      <summary>
        <para>Group node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Intersection">
      <summary>
        <para>Intersection node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.NestedQuery">
      <summary>
        <para>Nested query node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Not">
      <summary>
        <para>Negation node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Or">
      <summary>
        <para>Or node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Search">
      <summary>
        <para>Word search node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Toggle">
      <summary>
        <para>Toggle node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Union">
      <summary>
        <para>Union node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Where">
      <summary>
        <para>Where enumerator node.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.QueryToken">
      <summary>
        <para>Represents a token of a query string.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryToken.length">
      <summary>
        <para>The length of the token. Can be different than the length of the text.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryToken.position">
      <summary>
        <para>The position of the token in the query string.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryToken.text">
      <summary>
        <para>The text representing the token.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryToken.#ctor(System.String,System.Int32)">
      <summary>
        <para>Creates a token from a string and a position.</para>
      </summary>
      <param name="text">The value of the token.</param>
      <param name="position">The position of the token in the entire query string.</param>
      <param name="length">The length of the token.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryToken.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Creates a token from a string and a position.</para>
      </summary>
      <param name="text">The value of the token.</param>
      <param name="position">The position of the token in the entire query string.</param>
      <param name="length">The length of the token.</param>
    </member>
    <member name="T:UnityEditor.Search.QueryValidationOptions">
      <summary>
        <para>Struct containing the available query validation options.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryValidationOptions.skipIncompleteFilters">
      <summary>
        <para>Boolean indicating if incomplete filters should be skipped.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryValidationOptions.skipUnknownFilters">
      <summary>
        <para>Boolean indicating if unknown filters should be skipped.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryValidationOptions.validateFilters">
      <summary>
        <para>Boolean indicating if filters should be validated. Default is false.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.RefreshFlags">
      <summary>
        <para>Refresh flags are used to indicate why search view needs to be refreshed or updated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.RefreshFlags.Default">
      <summary>
        <para>Normal refresh.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.RefreshFlags.DisplayModeChanged">
      <summary>
        <para>The display mode or item size has changed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.RefreshFlags.GroupChanged">
      <summary>
        <para>The current item group has changed. In example, the user selected a new search tab.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.RefreshFlags.ItemsChanged">
      <summary>
        <para>The search item list has been updated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.RefreshFlags.None">
      <summary>
        <para>No particular refresh reason were specified.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.RefreshFlags.QueryCompleted">
      <summary>
        <para>A search query has completed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.RefreshFlags.QueryStarted">
      <summary>
        <para>A search query is about to be executed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.RefreshFlags.StructureChanged">
      <summary>
        <para>The structure of the current selection data has changed (i.e. the selected scene object got a new component).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchAction">
      <summary>
        <para>Defines an action that can be applied on a SearchItem of a specific search provider type.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchAction.closeWindowAfterExecution">
      <summary>
        <para>Indicates if the search view should be closed after the action execution.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchAction.content">
      <summary>
        <para>GUI content of the search action used when displayed with an icon.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchAction.displayName">
      <summary>
        <para>Display name for the search action.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchAction.enabled">
      <summary>
        <para>Callback used to check if the action is enabled based on the current context.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchAction.execute">
      <summary>
        <para>Executes an action on a set of items.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchAction.handler">
      <summary>
        <para>This handler is used for actions that do not support multi-selection.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchAction.id">
      <summary>
        <para>Action unique identifier.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchAction.#ctor(System.String,System.String,UnityEngine.GUIContent)">
      <summary>
        <para>Default constructor to build a search action.</para>
      </summary>
      <param name="id">Unique action id used to find it back later.</param>
      <param name="providerId">The search provider ID that supports this action.</param>
      <param name="content">Displays the displayname, an icon, and a tooltip when displaying the action in the Action Menu.</param>
      <param name="handler">Handler that executes the action.</param>
      <param name="name">Label name when displaying the action in the Action Menu.</param>
      <param name="icon">Icon for the action in the Action Menu.</param>
      <param name="tooltip">Tooltip associated with the action when displayed in the Action Menu.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchAction.#ctor(System.String,System.String,UnityEngine.GUIContent,System.Action`1&lt;UnityEditor.Search.SearchItem[]&gt;)">
      <summary>
        <para>Default constructor to build a search action.</para>
      </summary>
      <param name="id">Unique action id used to find it back later.</param>
      <param name="providerId">The search provider ID that supports this action.</param>
      <param name="content">Displays the displayname, an icon, and a tooltip when displaying the action in the Action Menu.</param>
      <param name="handler">Handler that executes the action.</param>
      <param name="name">Label name when displaying the action in the Action Menu.</param>
      <param name="icon">Icon for the action in the Action Menu.</param>
      <param name="tooltip">Tooltip associated with the action when displayed in the Action Menu.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchAction.#ctor(System.String,System.String,UnityEngine.GUIContent,System.Action`1&lt;UnityEditor.Search.SearchItem&gt;)">
      <summary>
        <para>Default constructor to build a search action.</para>
      </summary>
      <param name="id">Unique action id used to find it back later.</param>
      <param name="providerId">The search provider ID that supports this action.</param>
      <param name="content">Displays the displayname, an icon, and a tooltip when displaying the action in the Action Menu.</param>
      <param name="handler">Handler that executes the action.</param>
      <param name="name">Label name when displaying the action in the Action Menu.</param>
      <param name="icon">Icon for the action in the Action Menu.</param>
      <param name="tooltip">Tooltip associated with the action when displayed in the Action Menu.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchAction.#ctor(System.String,System.String,UnityEngine.Texture2D,System.String,System.Action`1&lt;UnityEditor.Search.SearchItem[]&gt;)">
      <summary>
        <para>Default constructor to build a search action.</para>
      </summary>
      <param name="id">Unique action id used to find it back later.</param>
      <param name="providerId">The search provider ID that supports this action.</param>
      <param name="content">Displays the displayname, an icon, and a tooltip when displaying the action in the Action Menu.</param>
      <param name="handler">Handler that executes the action.</param>
      <param name="name">Label name when displaying the action in the Action Menu.</param>
      <param name="icon">Icon for the action in the Action Menu.</param>
      <param name="tooltip">Tooltip associated with the action when displayed in the Action Menu.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchAction.#ctor(System.String,System.String,UnityEngine.Texture2D,System.String,System.Action`1&lt;UnityEditor.Search.SearchItem&gt;)">
      <summary>
        <para>Default constructor to build a search action.</para>
      </summary>
      <param name="id">Unique action id used to find it back later.</param>
      <param name="providerId">The search provider ID that supports this action.</param>
      <param name="content">Displays the displayname, an icon, and a tooltip when displaying the action in the Action Menu.</param>
      <param name="handler">Handler that executes the action.</param>
      <param name="name">Label name when displaying the action in the Action Menu.</param>
      <param name="icon">Icon for the action in the Action Menu.</param>
      <param name="tooltip">Tooltip associated with the action when displayed in the Action Menu.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchAction.#ctor(System.String,System.String,UnityEngine.Texture2D,System.String)">
      <summary>
        <para>Default constructor to build a search action.</para>
      </summary>
      <param name="id">Unique action id used to find it back later.</param>
      <param name="providerId">The search provider ID that supports this action.</param>
      <param name="content">Displays the displayname, an icon, and a tooltip when displaying the action in the Action Menu.</param>
      <param name="handler">Handler that executes the action.</param>
      <param name="name">Label name when displaying the action in the Action Menu.</param>
      <param name="icon">Icon for the action in the Action Menu.</param>
      <param name="tooltip">Tooltip associated with the action when displayed in the Action Menu.</param>
    </member>
    <member name="T:UnityEditor.Search.SearchActionsProviderAttribute">
      <summary>
        <para>Attribute used to declare a static method that defines new actions for specific search providers.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchColumn">
      <summary>
        <para>Search columns are used to display additional information in the Search Table view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchColumn.binder">
      <summary>
        <para>If defined, the binder delegate is used to apply contextual data to a visual element.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchColumn.cellCreator">
      <summary>
        <para>If defined, the cell creator delegate is used to customize how the search column displays its information.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchColumn.comparer">
      <summary>
        <para>If defined, the comparer delegate is used to sort search results based on the value displayed in that column.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumn.content">
      <summary>
        <para>The content is used to display the search column label and image in its header.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchColumn.drawer">
      <summary>
        <para>If defined, the drawer delegate is used to customize how the search column displays its information.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchColumn.getter">
      <summary>
        <para>If defined, the getter delegate is used to customize how the search field data is extracted and transformed for display (see SearchColumn.drawer).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchColumn.name">
      <summary>
        <para>Name of the search column.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumn.options">
      <summary>
        <para>Various options used to define how a search column is presented.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumn.path">
      <summary>
        <para>The path can be used by the column delegates to interpret how the data can be manipulated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumn.provider">
      <summary>
        <para>The provider is used to indicate which search column provider (see SearchColumn) is used to define the search column format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumn.selector">
      <summary>
        <para>The selector is used by the column delegates to fetch the search field data.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchColumn.setter">
      <summary>
        <para>If defined, the setter delegate writes back the value to the corresponding field of the search result.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumn.width">
      <summary>
        <para>The column width is used to set the Search Table view column width.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchColumn.#ctor(System.String,UnityEngine.GUIContent,UnityEditor.Search.SearchColumnFlags)">
      <summary>
        <para>Creates a new search column.</para>
      </summary>
      <param name="path">Serialization path of the column.</param>
      <param name="content">Content to render the column header.</param>
      <param name="options">Column flags.</param>
      <param name="selector">Selector used to fetch the field data of a search item. See SearchSelectorAttribute.</param>
      <param name="provider">Column provider used to manage the column. See SearchColumnProviderAttribute.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchColumn.#ctor(System.String,System.String,UnityEngine.GUIContent,UnityEditor.Search.SearchColumnFlags)">
      <summary>
        <para>Creates a new search column.</para>
      </summary>
      <param name="path">Serialization path of the column.</param>
      <param name="content">Content to render the column header.</param>
      <param name="options">Column flags.</param>
      <param name="selector">Selector used to fetch the field data of a search item. See SearchSelectorAttribute.</param>
      <param name="provider">Column provider used to manage the column. See SearchColumnProviderAttribute.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchColumn.#ctor(System.String,System.String,System.String,UnityEngine.GUIContent,UnityEditor.Search.SearchColumnFlags)">
      <summary>
        <para>Creates a new search column.</para>
      </summary>
      <param name="path">Serialization path of the column.</param>
      <param name="content">Content to render the column header.</param>
      <param name="options">Column flags.</param>
      <param name="selector">Selector used to fetch the field data of a search item. See SearchSelectorAttribute.</param>
      <param name="provider">Column provider used to manage the column. See SearchColumnProviderAttribute.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchColumn.Enumerate(UnityEditor.Search.SearchContext,System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;)">
      <summary>
        <para>Enumerate a set of columns for a variety of search items.</para>
      </summary>
      <param name="context">Search context.</param>
      <param name="items">Items for which to fetch a set of columns.</param>
      <returns>
        <para>Search columns.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchColumn.InitFunctors">
      <summary>
        <para>Initialize the column provider functors.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchColumnCompareArgs">
      <summary>
        <para>Search column compare arguments are used by SearchColumn.comparer to sort search results.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnCompareArgs.lhs">
      <summary>
        <para>Left-hand side column to compare.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnCompareArgs.rhs">
      <summary>
        <para>Right-hand side column to compare.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnCompareArgs.sortAscending">
      <summary>
        <para>Indicates if the results should be sorted in ascending order or not.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchColumnEventArgs">
      <summary>
        <para>Search column event arguments are used by SearchColumn.getter, SearchColumn.drawer and SearchColumn.setter delegates.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnEventArgs.column">
      <summary>
        <para>Search column being handled by the current event.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnEventArgs.context">
      <summary>
        <para>Search context being used for the current event.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnEventArgs.focused">
      <summary>
        <para>Indicates if the search column cell is currently focused.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnEventArgs.item">
      <summary>
        <para>Search item currently being used for the event.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnEventArgs.multiple">
      <summary>
        <para>Indicates if multiple search results are currently selected when processing the current event.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnEventArgs.rect">
      <summary>
        <para>UnityEngine.Rect used to indicate the drawing boudaries of the SearchColumn.drawer event.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnEventArgs.selected">
      <summary>
        <para>Indicates if the search result is currently selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnEventArgs.value">
      <summary>
        <para>Value obtained from SearchColumn.getter before calling SearchColumn.drawer.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchColumnFlags">
      <summary>
        <para>Search column flags are used to set multiple states.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.CanHide">
      <summary>
        <para>Indicates that the user can manually hide the search column in the Search Table view.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.CanSort">
      <summary>
        <para>Indicates that the user can sort the search column in the Search Table view.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.Default">
      <summary>
        <para>Defines a default set of options for common usages.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.Hidden">
      <summary>
        <para>Indicates that the search column is currently hidden in the Search Table view.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.None">
      <summary>
        <para>Indicates that no column options are used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.Sorted">
      <summary>
        <para>Indicates that the search column in the Search Table view is currently sorted.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.SortedDescending">
      <summary>
        <para>Indicates that the search column in the Search Table view is sorted in descending order. If not defined, it means the column is sorted in ascending order.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.TextAlignmentCenter">
      <summary>
        <para>Indicates that the search column in the Search Table view is aligning text in the middle.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.TextAlignmentLeft">
      <summary>
        <para>Indicates that the search column in the Search Table view is aligning text to the left.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.TextAlignmentRight">
      <summary>
        <para>Indicates that the search column in the Search Table view is aligning text to the right.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchColumnProviderAttribute">
      <summary>
        <para>The search column provider attribute is used to define new formats for a given column.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchColumnProviderAttribute.provider">
      <summary>
        <para>Unique name of the search column provider.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchContext">
      <summary>
        <para>The search context includes all the data necessary to perform a query. It allows the full customization of how a query may be performed.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.Search.SearchContext.asyncItemReceived(System.Action`2&lt;UnityEditor.Search.SearchContext,System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;&gt;)">
      <summary>
        <para>This event is used to receive any asynchronous search result.</para>
      </summary>
      <param name="value">Event is used to receive any asynchronous search result.</param>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.empty">
      <summary>
        <para>Indicates of the search query is empty. This exclude the search filter id. In example if the search text is h: , then this property will still return true.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.filterId">
      <summary>
        <para>Explicit filter ID. Usually it is the first search token like h:, p: to do an explicit search for a given search provider. Can be null.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.focusedWindow">
      <summary>
        <para>Editor window that initiated the search.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.options">
      <summary>
        <para>Search context options.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.progressId">
      <summary>
        <para>Progress handle to display the progress bar for the search currently in progress.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.providers">
      <summary>
        <para>Which search providers are active for this particular context.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.searchInProgress">
      <summary>
        <para>Indicates if an asynchronous search is currently in progress for this context.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.searchPhrase">
      <summary>
        <para>Returns a phrase that contains only words separated by spaces.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.searchQuery">
      <summary>
        <para>Processed search query (no filterId, no textFilters).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.searchQueryOffset">
      <summary>
        <para>Character offset of the processed search query in the raw search text.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.searchText">
      <summary>
        <para>Raw search text (what is in the Search text box).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.searchView">
      <summary>
        <para>The search view presenting the search results.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.searchWords">
      <summary>
        <para>Search query tokenized by words. All text filters are discarded and all words are in lowercase.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.selection">
      <summary>
        <para>Returns the search result selection if any.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.Search.SearchContext.sessionEnded(System.Action`1&lt;UnityEditor.Search.SearchContext&gt;)">
      <summary>
        <para>Invoked when a Search has ended.</para>
      </summary>
      <param name="value">Handler of the event.</param>
    </member>
    <member name="?:UnityEditor.Search.SearchContext.sessionStarted(System.Action`1&lt;UnityEditor.Search.SearchContext&gt;)">
      <summary>
        <para>Invoked when a Search is started.</para>
      </summary>
      <param name="value">Handler of the event.</param>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.textFilters">
      <summary>
        <para>All tokens containing a colon (':').</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.wantsMore">
      <summary>
        <para>Indicates if the search should return all the results instead of only the most relevant.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchContext.AddSearchQueryError(UnityEditor.Search.SearchQueryError)">
      <summary>
        <para>Adds a new query error on this context.</para>
      </summary>
      <param name="error">The new error.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchContext.AddSearchQueryErrors(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchQueryError&gt;)">
      <summary>
        <para>Adds new query errors on this context.</para>
      </summary>
      <param name="errors">The new errors.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchContext.#ctor(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchProvider&gt;,System.String,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Creates a new search context.</para>
      </summary>
      <param name="providers">The list of search providers used to resolve the specified query.</param>
      <param name="searchText">The search query to perform.</param>
      <param name="options">A set of options that help evaluate the query.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchContext.#ctor(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchProvider&gt;,System.String)">
      <summary>
        <para>Creates a new search context.</para>
      </summary>
      <param name="providers">The list of search providers used to resolve the specified query.</param>
      <param name="searchText">The search query to perform.</param>
      <param name="options">A set of options that help evaluate the query.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchContext.#ctor(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchProvider&gt;)">
      <summary>
        <para>Creates a new search context.</para>
      </summary>
      <param name="providers">The list of search providers used to resolve the specified query.</param>
      <param name="searchText">The search query to perform.</param>
      <param name="options">A set of options that help evaluate the query.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchContext.#ctor(UnityEditor.Search.SearchContext)">
      <summary>
        <para>TODO.</para>
      </summary>
      <param name="context"></param>
    </member>
    <member name="M:UnityEditor.Search.SearchContext.Dispose">
      <summary>
        <para>Dispose of the Search Context.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchContext.IsEnabled(System.String)">
      <summary>
        <para>Checks if a search provider is available to process a query.</para>
      </summary>
      <param name="providerId">ID of the search provider. See SearchProvider.name.id.</param>
      <returns>
        <para>Returns true if the search provider is enabled for this SearchContext.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchContext.SetFilter(System.String,System.Boolean)">
      <summary>
        <para>Enables or disables a single search provider. A disabled search provider won't be asked to provide items to resolve the query.</para>
      </summary>
      <param name="providerId">ID of the search provider. See SearchProvider.name.id.</param>
      <param name="isEnabled">If true, enables the search provider to perform a query.</param>
    </member>
    <member name="T:UnityEditor.Search.SearchDocument">
      <summary>
        <para>Represents a searchable document that has been indexed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchDocument.id">
      <summary>
        <para>Document unique ID in the search index.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchDocument.name">
      <summary>
        <para>Readable name of the document.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchDocument.score">
      <summary>
        <para>Document base relevance score.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchDocument.source">
      <summary>
        <para>Original source from which the document was indexed. The source is usually the container asset, i.e. prefab, Unity scene or the imported asset itself.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchDocument.valid">
      <summary>
        <para>If true the document is considered valid.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchDocument.CompareTo(UnityEditor.Search.SearchDocument)">
      <summary>
        <para>Compare this document against another document.</para>
      </summary>
      <param name="other">Another document to compare to.</param>
      <returns>
        <para>If 0, both documents are equals.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchDocument.#ctor(UnityEditor.Search.SearchDocument,System.Int32)">
      <summary>
        <para>Create a new SearchDocument.</para>
      </summary>
      <param name="id">Document unique ID in the search index.</param>
      <param name="doc">Source document to copy properties from.</param>
      <param name="score">Document score used for sorting.</param>
      <param name="index">Document position in the search index.</param>
      <param name="path">Document path (i.e. asset path or transform path) if any.</param>
      <param name="name">Document name (for example, asset path or transform path) if any.</param>
      <param name="source">Document contained source path or ID. This is usually defined for nested objects with a prefab or a scene.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchDocument.#ctor">
      <summary>
        <para>Create a new SearchDocument.</para>
      </summary>
      <param name="id">Document unique ID in the search index.</param>
      <param name="doc">Source document to copy properties from.</param>
      <param name="score">Document score used for sorting.</param>
      <param name="index">Document position in the search index.</param>
      <param name="path">Document path (i.e. asset path or transform path) if any.</param>
      <param name="name">Document name (for example, asset path or transform path) if any.</param>
      <param name="source">Document contained source path or ID. This is usually defined for nested objects with a prefab or a scene.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchDocument.#ctor(System.String,System.String,System.String,System.Int32)">
      <summary>
        <para>Create a new SearchDocument.</para>
      </summary>
      <param name="id">Document unique ID in the search index.</param>
      <param name="doc">Source document to copy properties from.</param>
      <param name="score">Document score used for sorting.</param>
      <param name="index">Document position in the search index.</param>
      <param name="path">Document path (i.e. asset path or transform path) if any.</param>
      <param name="name">Document name (for example, asset path or transform path) if any.</param>
      <param name="source">Document contained source path or ID. This is usually defined for nested objects with a prefab or a scene.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchDocument.#ctor(UnityEditor.Search.SearchDocument,System.String)">
      <summary>
        <para>Create a new SearchDocument.</para>
      </summary>
      <param name="id">Document unique ID in the search index.</param>
      <param name="doc">Source document to copy properties from.</param>
      <param name="score">Document score used for sorting.</param>
      <param name="index">Document position in the search index.</param>
      <param name="path">Document path (i.e. asset path or transform path) if any.</param>
      <param name="name">Document name (for example, asset path or transform path) if any.</param>
      <param name="source">Document contained source path or ID. This is usually defined for nested objects with a prefab or a scene.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchDocument.Equals(UnityEditor.Search.SearchDocument)">
      <summary>
        <para>Compare this document against another document.</para>
      </summary>
      <param name="other">Another document to compare to.</param>
      <returns>
        <para>If true both document are equals.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchDocument.Equals(System.Object)">
      <summary>
        <para>Compare this document against another document.</para>
      </summary>
      <param name="other">Another document to compare to.</param>
      <returns>
        <para>If true both document are equals.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchDocument.ToString">
      <summary>
        <para>Returns the document ID string.</para>
      </summary>
      <returns>
        <para>Returns a string representation of the document.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.SearchDocumentFlags">
      <summary>
        <para>Search document flags are used by the indexing system to provide additional information of an indexed document, like its source.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchDocumentFlags.Asset">
      <summary>
        <para>Indicates that the indexed document is an asset. So it should have a valid asset path.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchDocumentFlags.Grouped">
      <summary>
        <para>Indicates that the indexed document was grouped in another asset provider.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchDocumentFlags.Nested">
      <summary>
        <para>Indicates that the search document is an nested object.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchDocumentFlags.None">
      <summary>
        <para>Indicates no particular flags.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchDocumentFlags.Object">
      <summary>
        <para>Indicates that the search document was indexed from an object such as a prefab or a scene.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchDocumentFlags.Resources">
      <summary>
        <para>Indicates that the document was indexed from a resource bundle.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchExpression">
      <summary>
        <para>Search expressions allow you to add to the search query language to express complex queries that cross-reference multiple providers, for example, to search for all objects in a scene  that use a shader that doesn’t compile.

Search expressions can be chained together to transform or perform set manipulations on Search Items.

The manual contains example on &lt;a href="https:docs.unity3d.comDocumentationManualsearch-expressions.html"&gt;How to use Search Expression&lt;a&gt; .</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpression.alias">
      <summary>
        <para>Alias name of an expression. This is useful to assign a more readable results to methematic expression (lile Count).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpression.innerText">
      <summary>
        <para>This is the inner text of the expression. This means the text without any special delimiters. Ex: the expression [1, 2, 3] which is a set expression would have an innerText of 1,2,3.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchExpression.name">
      <summary>
        <para>The name of the evaluator function or hte outer text. This is mostly a debuggin field.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpression.outerText">
      <summary>
        <para>This is the outer text of the expression. This means the full text with any special delimiters. Ex: the expression [1, 2, 3] which is a set expression would have an outerText of [1,2,3].</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpression.parameters">
      <summary>
        <para>The parameter list of the expression. Note that each parameter is an expression in itself.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpression.types">
      <summary>
        <para>Aggrregate types of the expression. This is mostly used to validate parameters of an expression.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchExpression.Check(UnityEditor.Search.SearchExpression,UnityEditor.Search.SearchExpressionContext)">
      <summary>
        <para>Execute a SearchExpression and checks if the internal value of the first yielded SearchItem is truish. Not 0, not null, not "" and not false.</para>
      </summary>
      <param name="e">SearchExpression to test.</param>
      <param name="c">Execute context of the expression.</param>
      <returns>
        <para>Returns true if the SearchExpression yields more than one item or if the sole item is true.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpression.CreateId">
      <summary>
        <para>Generate a unique id. This is useful when creating new SearchItem.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchExpression.CreateItem(System.String,System.Object,System.String)">
      <summary>
        <para>Create a new SearchItem from a value with an optional label.</para>
      </summary>
      <param name="label">Optional label of the SearchItem. This will be displayed in the search Window.</param>
      <param name="value">Initial value of the SearchItem.</param>
      <param name="description">Optional description of the SearchItem. This will be displayed in the search Window.</param>
      <returns>
        <para>Returns a new SearchItem.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpression.CreateItem(System.String,System.String)">
      <summary>
        <para>Create a new SearchItem from a value with an optional label.</para>
      </summary>
      <param name="label">Optional label of the SearchItem. This will be displayed in the search Window.</param>
      <param name="value">Initial value of the SearchItem.</param>
      <param name="description">Optional description of the SearchItem. This will be displayed in the search Window.</param>
      <returns>
        <para>Returns a new SearchItem.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpression.CreateItem(System.Double,System.String)">
      <summary>
        <para>Create a new SearchItem from a value with an optional label.</para>
      </summary>
      <param name="label">Optional label of the SearchItem. This will be displayed in the search Window.</param>
      <param name="value">Initial value of the SearchItem.</param>
      <param name="description">Optional description of the SearchItem. This will be displayed in the search Window.</param>
      <returns>
        <para>Returns a new SearchItem.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpression.CreateItem(System.Int32,System.String)">
      <summary>
        <para>Create a new SearchItem from a value with an optional label.</para>
      </summary>
      <param name="label">Optional label of the SearchItem. This will be displayed in the search Window.</param>
      <param name="value">Initial value of the SearchItem.</param>
      <param name="description">Optional description of the SearchItem. This will be displayed in the search Window.</param>
      <returns>
        <para>Returns a new SearchItem.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpression.Execute">
      <summary>
        <para>Execute a SearchEXpression givent a certain SearchContext Depending on flags the expression might be valuated in a worker thread (by default) or in the main thread. It returns a an enumerable list of SearchItem.</para>
      </summary>
      <param name="searchContext">SearchContext used to initialize the SearchExpressionContext that will encapsulate all information relative to expression evaluation.</param>
      <param name="executionFlags">Execution flags helping define how to evaluate the expression.</param>
      <param name="c">SearchExpressionContext that will encapsulate all information relative to expression evaluation.</param>
      <returns>
        <para>Returns an enumerable list of SearchItem.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpression.Execute">
      <summary>
        <para>Execute a SearchEXpression givent a certain SearchContext Depending on flags the expression might be valuated in a worker thread (by default) or in the main thread. It returns a an enumerable list of SearchItem.</para>
      </summary>
      <param name="searchContext">SearchContext used to initialize the SearchExpressionContext that will encapsulate all information relative to expression evaluation.</param>
      <param name="executionFlags">Execution flags helping define how to evaluate the expression.</param>
      <param name="c">SearchExpressionContext that will encapsulate all information relative to expression evaluation.</param>
      <returns>
        <para>Returns an enumerable list of SearchItem.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpression.FormatItem(UnityEditor.Search.SearchContext,UnityEditor.Search.SearchItem,System.String)">
      <summary>
        <para>Take a format string and replace all selectors in it with the selected values obtained from a SearchItem.</para>
      </summary>
      <param name="ctx">SearchContext that yielded the SearchItem.</param>
      <param name="item">SearchItem to select value from.</param>
      <param name="formatString">Format string that mayh contain selectors.</param>
      <returns>
        <para>Returns a string where selectors have been replaced by the selected values from a given SearchItem.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpression.GetBooleanValue(System.Boolean)">
      <summary>
        <para>Try to parse the innerText and convert it to a boolean value.</para>
      </summary>
      <param name="defaultValue">Initial value if we cannot convert the innerText.</param>
      <returns>
        <para>Returns the boolean representation of the expression.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpression.GetFormatString(UnityEditor.Search.SearchExpression,System.String&amp;)">
      <summary>
        <para>Extract a format string from a given expression. This function should be used to extract a format string from an input parameter of a SearchExpression. For example: the evaluator print{"this is it: @label"} takes a format string as its first parameter.</para>
      </summary>
      <param name="expr">Expression to convert to a format string.</param>
      <param name="formatStr">Extracted format string.</param>
      <returns>
        <para>Returns true if the SearchExpression was succesfully converted to a format string.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpression.GetNumberValue(System.Double)">
      <summary>
        <para>Try to parse the innerText and convert it to a double value.</para>
      </summary>
      <param name="defaultValue">Initial value if we cannot convert the innerText.</param>
      <returns>
        <para>Returns a numerical representation of the expression.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpression.IsKeyword(UnityEditor.Search.SearchExpressionKeyword)">
      <summary>
        <para>Check if the innerText of an expression is a builtin SearchExpressionKeyword.</para>
      </summary>
      <param name="keyword">Builtin keyword to check the expression against.</param>
      <returns>
        <para>Returns if the expression is a builtin Search Expression keyword.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpression.IsTrue(UnityEditor.Search.SearchItem)">
      <summary>
        <para>Check if the internal value of a SearchItem is truish. It means the value is not 0, not null, not "" and not false.</para>
      </summary>
      <param name="item">SearchItem to test.</param>
      <returns>
        <para>Returns true if the value of the SearchItem is truish.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpression.ProcessValues(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;,System.String,System.Func`2&lt;UnityEditor.Search.SearchItem,T&gt;)">
      <summary>
        <para>Take a group of SearchItems and apply a processHandler transformer function to the item in order to sets its internal value or an outputValueField. Note that these items are processed in the main thread thus allowing you to resolve any kind of selectors.</para>
      </summary>
      <param name="items">Group of items to transform.</param>
      <param name="outputValueFieldName">Name of the field in the SearchItem to write the value to. If null, we write to the internal value of the item.</param>
      <param name="processHandler">Transformer function that need to returns a new value for the item.</param>
      <returns>
        <para>Yield a new list of items that have been transformed.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpression.ToString">
      <summary>
        <para>Convert an expression to a string representation.</para>
      </summary>
      <returns>
        <para>Returns string representation of a SearchExpression.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpression.TryConvertToDouble(UnityEditor.Search.SearchItem,System.Double&amp;,System.String)">
      <summary>
        <para>Resolve a selector on an item and try to convert the selected value to a double.</para>
      </summary>
      <param name="item">SearchItem to extract the value from.</param>
      <param name="value">Resulting value.</param>
      <param name="selector">Selector use to access an item value. If null, we will use the internal item value.</param>
      <returns>
        <para>Returns true if we were able to select the value and convert it to a double.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.SearchExpressionContext">
      <summary>
        <para>This context encapsulate all the datas needed to evaluate a SearchExpression and it allows user to interact with the evaluation runtime of an expression. A SearchExpressionContext is created automatically with a SearchExpressionRuntime anytime SearchExpression.Execute is called.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionContext.args">
      <summary>
        <para>Arguments of passed to the SearchExpression being evaluated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionContext.expression">
      <summary>
        <para>[[]SearchExpression] being evaluated.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchExpressionContext.items">
      <summary>
        <para>SearchItems yielded by the evaluation of a searchExpression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionContext.runtime">
      <summary>
        <para>SearchExpressionRuntime  associated with this context. The runtime stores all runtime data (stack frames, stack of contex and items) necessary for evaluation of a SearchExpression.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchExpressionContext.search">
      <summary>
        <para>SearchContex containing the search query that was parsed to create the SearchExpression.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchExpressionContext.valid">
      <summary>
        <para>Is the current context valid or not. If invalid it means the associated SearchExpression is null or the SearchExiressionRuntime is invalid.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchExpressionContext.Break">
      <summary>
        <para>Break the evaluation of a SearchExpression meaning items won't be yielded anymore.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchExpressionContext.Continue">
      <summary>
        <para>Tell SearchExpression evaluation to continue.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchExpressionContext.IsBreaking">
      <summary>
        <para>Has the current context being flagged to break execution?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchExpressionContext.IsContinuing">
      <summary>
        <para>Has the current context being flagged to continue execution?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchExpressionContext.ResetIterationControl">
      <summary>
        <para>Restart evaluation and iteration of SearchExpression.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchExpressionContext.ResolveAlias(System.String)">
      <summary>
        <para>Try to resolve an alias value using the SearchExpressionRuntime attached to this context. Each frame if asked to resolve a SearchExpression.alias.</para>
      </summary>
      <param name="defaultLabel">If no exeuction frames are present this becomes the default alias to be resolved.</param>
      <param name="expr">Default expression to look to resolve the alias. If null, use the runtime to resolve the alias.</param>
      <returns>
        <para>Returns a resolved alias.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpressionContext.ResolveAlias(UnityEditor.Search.SearchExpression,System.String)">
      <summary>
        <para>Try to resolve an alias value using the SearchExpressionRuntime attached to this context. Each frame if asked to resolve a SearchExpression.alias.</para>
      </summary>
      <param name="defaultLabel">If no exeuction frames are present this becomes the default alias to be resolved.</param>
      <param name="expr">Default expression to look to resolve the alias. If null, use the runtime to resolve the alias.</param>
      <returns>
        <para>Returns a resolved alias.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpressionContext.ThrowError(System.String)">
      <summary>
        <para>Stop a SearchExpression evaluation by throwing a SearchExceptionEvaluatorException. User writing an evaluator can decide to throw thse exceptions if the parameters passed to evaluation are not valid or if a problem happens during evaluation.</para>
      </summary>
      <param name="message"></param>
      <param name="errorPosition"></param>
    </member>
    <member name="M:UnityEditor.Search.SearchExpressionContext.ThrowError(System.String,UnityEditor.Search.StringView)">
      <summary>
        <para>Stop a SearchExpression evaluation by throwing a SearchExceptionEvaluatorException. User writing an evaluator can decide to throw thse exceptions if the parameters passed to evaluation are not valid or if a problem happens during evaluation.</para>
      </summary>
      <param name="message"></param>
      <param name="errorPosition"></param>
    </member>
    <member name="M:UnityEditor.Search.SearchExpressionContext.ToString">
      <summary>
        <para>Get string representation of a context.</para>
      </summary>
      <returns>
        <para>Returns string representation of a context.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.SearchExpressionEvaluationHints">
      <summary>
        <para>Hints provided to the SearchExpression runtime to specify how a certain SearchExpressionEvaluatorAttribute should be executed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionEvaluationHints.AlwaysExpand">
      <summary>
        <para>Wehn evaluating a SearchExpression signifies that each ielded items could be another SearchExpression that needs evaluation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionEvaluationHints.Default">
      <summary>
        <para>Default evaluation hints. Currently Default is that thread evaluation is supported (SearchExpressionEvaluationHints.ThreadSupported).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionEvaluationHints.DoNotValidateArgsSignature">
      <summary>
        <para>Specifies that the evaluator signature shouldn't be validated by the SearchExpression runtime thus allowing any number of parameters with any types to be passed to the evaluator. It becomes the job of the evaluator itself to validate its parameters.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionEvaluationHints.DoNotValidateSignature">
      <summary>
        <para>Specifies that the parameters of a SearchExpression shouldn't have their signature be validated. This is used mostly for meta programming evaluator lile apply{} where partial evaluator can be used as parameter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionEvaluationHints.ExpandSupported">
      <summary>
        <para>Specifies that an evaluator might return SearchItem containing SearchExpression that supports expansin like groupBy{}.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionEvaluationHints.ImplicitArgsLiterals">
      <summary>
        <para>Specifies that an evaluator assumes its arguments are literal and will be used as such.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionEvaluationHints.ThreadNotSupported">
      <summary>
        <para>Specifies that an evaluator does not support worker thread evaluation and should only be evaluated in the main thread. This could be the case if an evaluator is using non-tread safe Unity API (like AssetDatabase).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionEvaluationHints.ThreadSupported">
      <summary>
        <para>Specifies that an evaluator supports being evaluated in a worker thread (that is not the main thread). This is the default evaluation hint.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchExpressionEvaluatorAttribute">
      <summary>
        <para>Attribute used to register new SearchExpressionEvaluator. This will allow to use new function in SearchExpression. As a side note all builtin evaluators (count{}, select{}, ...) are defined using this attribute.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchExpressionEvaluatorAttribute.#ctor(UnityEditor.Search.SearchExpressionType[])">
      <summary>
        <para>Use this attribute to register a static C# function as a new evaluator. SearchExpressionEvaluator when use within a SearchExpression can have a signature that is validated against the passed parameters.</para>
      </summary>
      <param name="signatureArgumentTypes">Array of types corresponding to the type of the parameters used with this evaluator.</param>
      <param name="name">N ame of the evaluator. If no name are specified the name of the evaluator functio will be used.</param>
      <param name="hints">Hints to specify to the evaluator runtime how function should be run.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchExpressionEvaluatorAttribute.#ctor(System.String,UnityEditor.Search.SearchExpressionType[])">
      <summary>
        <para>Use this attribute to register a static C# function as a new evaluator. SearchExpressionEvaluator when use within a SearchExpression can have a signature that is validated against the passed parameters.</para>
      </summary>
      <param name="signatureArgumentTypes">Array of types corresponding to the type of the parameters used with this evaluator.</param>
      <param name="name">N ame of the evaluator. If no name are specified the name of the evaluator functio will be used.</param>
      <param name="hints">Hints to specify to the evaluator runtime how function should be run.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchExpressionEvaluatorAttribute.#ctor(UnityEditor.Search.SearchExpressionEvaluationHints,UnityEditor.Search.SearchExpressionType[])">
      <summary>
        <para>Use this attribute to register a static C# function as a new evaluator. SearchExpressionEvaluator when use within a SearchExpression can have a signature that is validated against the passed parameters.</para>
      </summary>
      <param name="signatureArgumentTypes">Array of types corresponding to the type of the parameters used with this evaluator.</param>
      <param name="name">N ame of the evaluator. If no name are specified the name of the evaluator functio will be used.</param>
      <param name="hints">Hints to specify to the evaluator runtime how function should be run.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchExpressionEvaluatorAttribute.#ctor(System.String,UnityEditor.Search.SearchExpressionEvaluationHints,UnityEditor.Search.SearchExpressionType[])">
      <summary>
        <para>Use this attribute to register a static C# function as a new evaluator. SearchExpressionEvaluator when use within a SearchExpression can have a signature that is validated against the passed parameters.</para>
      </summary>
      <param name="signatureArgumentTypes">Array of types corresponding to the type of the parameters used with this evaluator.</param>
      <param name="name">N ame of the evaluator. If no name are specified the name of the evaluator functio will be used.</param>
      <param name="hints">Hints to specify to the evaluator runtime how function should be run.</param>
    </member>
    <member name="T:UnityEditor.Search.SearchExpressionEvaluatorSignatureOverloadAttribute">
      <summary>
        <para>Allows user to add more function signature overload to a SearchExpressionEvaluatorAttribute.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchExpressionEvaluatorSignatureOverloadAttribute.#ctor(UnityEditor.Search.SearchExpressionType[])">
      <summary>
        <para>Add an overload signature to an existing SearchExpressionEvaluator.</para>
      </summary>
      <param name="signatureArgumentTypes">Array of types describing what is an accepted signature for an evaluator.</param>
    </member>
    <member name="T:UnityEditor.Search.SearchExpressionKeyword">
      <summary>
        <para>Enum contaning all keywords used as configuration parameter in builtin evaluator of  SearchExpression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionKeyword.All">
      <summary>
        <para>All keyword.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionKeyword.Any">
      <summary>
        <para>Any keyword.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionKeyword.Asc">
      <summary>
        <para>Asc (contraction of Ascending). Used in sor{} to define the sorting order.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionKeyword.Desc">
      <summary>
        <para>Desc (contraction of Descending). Used in sor{} to define the sorting order.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionKeyword.Keep">
      <summary>
        <para>Indicates to keep results from first set.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionKeyword.None">
      <summary>
        <para>Unrecognized keyword.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionKeyword.Sort">
      <summary>
        <para>Indicates to yield sorted results.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchExpressionRuntime">
      <summary>
        <para>Encapsulate all the runtime data needed to evaluate a root expression and all its parameters. This class contains the SearchContext that created the root SearchExpression and all the stack frames needed to evaluate all the nested SearchExpression.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchExpressionRuntime.current">
      <summary>
        <para>Current SearchExpressionContext corresponding to the stack frame being evaluated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionRuntime.frames">
      <summary>
        <para>The stack of all SearchExpressionContext being evaluated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionRuntime.items">
      <summary>
        <para>The stack of SearchItems that have been yielded by each execution frame.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionRuntime.search">
      <summary>
        <para>Initial SearchContext contaning the text that was used to parse the initial root SearchExpression.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchExpressionRuntime.valid">
      <summary>
        <para>Is the current runtime valid. This means are there any SearchExpressionContext being evaluated.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchExpressionRuntime.Push(UnityEditor.Search.SearchExpression,System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchExpression&gt;)">
      <summary>
        <para>Push a new SearchExpression with its arguments to be evaluated. This is useful if a user defined evaluator needs to generate a new Context of evaluation.</para>
      </summary>
      <param name="searchExpression">Expression to evaluate.</param>
      <param name="args">Parameters passed to the expression to evaluate.</param>
      <param name="flags">Exeution Flags used to add to the flags specified in the expression being evaluated.</param>
      <param name="item">Push a new yielded item in the current evaluation frame.</param>
      <returns>
        <para>Returns a new disposable Scope. When out this scope is disposed the newly created SearchExpressionContext will be removed from the frames.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpressionRuntime.Push">
      <summary>
        <para>Push a new SearchExpression with its arguments to be evaluated. This is useful if a user defined evaluator needs to generate a new Context of evaluation.</para>
      </summary>
      <param name="searchExpression">Expression to evaluate.</param>
      <param name="args">Parameters passed to the expression to evaluate.</param>
      <param name="flags">Exeution Flags used to add to the flags specified in the expression being evaluated.</param>
      <param name="item">Push a new yielded item in the current evaluation frame.</param>
      <returns>
        <para>Returns a new disposable Scope. When out this scope is disposed the newly created SearchExpressionContext will be removed from the frames.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpressionRuntime.Push(UnityEditor.Search.SearchItem)">
      <summary>
        <para>Push a new SearchExpression with its arguments to be evaluated. This is useful if a user defined evaluator needs to generate a new Context of evaluation.</para>
      </summary>
      <param name="searchExpression">Expression to evaluate.</param>
      <param name="args">Parameters passed to the expression to evaluate.</param>
      <param name="flags">Exeution Flags used to add to the flags specified in the expression being evaluated.</param>
      <param name="item">Push a new yielded item in the current evaluation frame.</param>
      <returns>
        <para>Returns a new disposable Scope. When out this scope is disposed the newly created SearchExpressionContext will be removed from the frames.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchExpressionRuntime.ToString">
      <summary>
        <para>Get a string representation of the current SearchExpressionRuntime.</para>
      </summary>
      <returns>
        <para>Returns a string representation of the current runtime.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.SearchExpressionType">
      <summary>
        <para>Type used to characterize an expression. An expression might have multiple types. For example a Set is also an iterable. A keyword is also considered a string value. SearchExpressionType can be used with SearchExpressionEvaluatorAttribute to describe the parameter list of an evaluator.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionType.AnyExpression">
      <summary>
        <para>Denote any expression of any type (Literal, Iterable or Selector).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionType.AnyValue">
      <summary>
        <para>Denote an expression with a value type: either Literal or Iterable.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionType.Boolean">
      <summary>
        <para>Denote a Literal expression of a boolean value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionType.Expandable">
      <summary>
        <para>Denotes an expression using the ... operator to tell it can be expanded.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionType.Function">
      <summary>
        <para>Denotes an expression of an evaluator function. For example: count{}.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionType.Group">
      <summary>
        <para>Denote an expression of a group of items. Groups are generated by the groupBy{} evaluator.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionType.Iterable">
      <summary>
        <para>Denote an expression that can iterated to yield SearchItem. Set: [1, 2, 3], Query String:  t:shader and evaluator: count{} are all example of iterables.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionType.Keyword">
      <summary>
        <para>Denote an expression yielding a SearchExpressionKeyword.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionType.Literal">
      <summary>
        <para>Denote an expression built from a literal values: boolean, number, text or keyword. For example in the set expression [1,"hello",true] all set values are literals.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionType.Nil">
      <summary>
        <para>Denote an invalid Expression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionType.Number">
      <summary>
        <para>Denote a Literal expression of a numerical value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionType.Optional">
      <summary>
        <para>Used in SearchExpressionEvaluatorAttribute to specify a aprameter to be Optional.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionType.QueryString">
      <summary>
        <para>Denote an expression representing a query string. For example: t:shader.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionType.Selector">
      <summary>
        <para>Denote an expression representing a selector. All selector starts with @. For example @size in expression: select{t:material, @size}.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionType.Set">
      <summary>
        <para>Denote an iterable expression of a group of generally literal values. For example [1, 2, 3] or [material, shader, texture2d].</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionType.Text">
      <summary>
        <para>Denote an expression representing a textual (string) value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchExpressionType.Variadic">
      <summary>
        <para>Used in SearchExpressionEvaluatorAttribute to specify that a parameter can be used multiples times. For example count{Iterable1, Iterable2,... IterableN} can be executed with any number of iterables are parameters.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchField">
      <summary>
        <para>Search item field used by the property table and selector systems.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchField.alias">
      <summary>
        <para>Display label of the field if displayed in the property table.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchField.label">
      <summary>
        <para>Field property label that was selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchField.name">
      <summary>
        <para>Field selector name. Compared to label, this field can be decorated with tokens such as # when this field selects a dynamic serialized property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchField.value">
      <summary>
        <para>Value of the search field.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchField.#ctor(System.String)">
      <summary>
        <para>Creates a search field.</para>
      </summary>
      <param name="name">Name of the field.</param>
      <param name="value">Value of the field.</param>
      <param name="alias">Label used for display.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchField.#ctor(System.String,System.Object)">
      <summary>
        <para>Creates a search field.</para>
      </summary>
      <param name="name">Name of the field.</param>
      <param name="value">Value of the field.</param>
      <param name="alias">Label used for display.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchField.#ctor(System.String,System.String,System.Object)">
      <summary>
        <para>Creates a search field.</para>
      </summary>
      <param name="name">Name of the field.</param>
      <param name="value">Value of the field.</param>
      <param name="alias">Label used for display.</param>
    </member>
    <member name="T:UnityEditor.Search.SearchFlags">
      <summary>
        <para>Search options used to fetch items. Mostly with SearchContext to specify how a search should be handled.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.AllProvidersAvailable">
      <summary>
        <para>All SearchProviders are available in the SearchWindow dropdown menu.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.Debug">
      <summary>
        <para>Adds debugging information to SearchItem while looking for results.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.Default">
      <summary>
        <para>Default Search Flag (SearchFlags.Sorted).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.Dockable">
      <summary>
        <para>Indicates that the search view is dockable. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.Expression">
      <summary>
        <para>Indicates that the search query will be evaluated as a search expression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.FirstBatchAsync">
      <summary>
        <para>Sends the first items asynchronously.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.FocusContext">
      <summary>
        <para>Indicates that the search view will focus on the first contextual search provider available when it opens. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.GeneralSearchWindow">
      <summary>
        <para>This is a general purpose search window that has access to all Providers in the SearchService.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.HidePanels">
      <summary>
        <para>Indicates that the search view will hide its side panels when it opens. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.Multiselect">
      <summary>
        <para>Indicates that the search view will allow multi-selection. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.NoIndexing">
      <summary>
        <para>Prevents the search from using indexing. Asset Provider will use its builtin Find in Files provider.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.None">
      <summary>
        <para>No specific search options. Result will be unsorted.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.OpenContextual">
      <summary>
        <para>Opens a search view with default contextual options. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.OpenDefault">
      <summary>
        <para>Opens a search view with default options. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.OpenGlobal">
      <summary>
        <para>Opens a search view for a global search. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.OpenPicker">
      <summary>
        <para>Opens a search view as an object picker. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.Packages">
      <summary>
        <para>The Object Picker window will include any results from packages.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.QueryString">
      <summary>
        <para>Evaluate the search text as a pure query string (do not evaluate the text as a search expression).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.ReuseExistingWindow">
      <summary>
        <para>Indicates that the search view will find any existing window instances that are already opened before creating a new one. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.SaveFilters">
      <summary>
        <para>Indicates that the search view will save its settings and search provider filters when it closes. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.ShowErrorsWithResults">
      <summary>
        <para>Always show query errors even when there are results available. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.Sorted">
      <summary>
        <para>Fetched items are sorted by the search service.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.Synchronous">
      <summary>
        <para>Search items are fetched synchronously. This can take a long time for some SearchProvider (like asset). Use at your own risk.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.UseSessionSettings">
      <summary>
        <para>Persist the SearchContext state in between sessions using the SearchViewState.sessionName as its data key.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.WantsMore">
      <summary>
        <para>Sets the search to search for all results. This might take longer than unusual if SearchProvider are using multiple sources of items (files on disk, AssetDatabase...)</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchIndexer">
      <summary>
        <para>Base class for a document Indexer which provides methods for retrieving a document given a specific pattern in roughly log(n). This allows you to search a large index more quickly.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchIndexer.documentCount">
      <summary>
        <para>Returns the number of documents in the index.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchIndexer.keywordCount">
      <summary>
        <para>Returns the number keywords in the index.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchIndexer.minQueryLength">
      <summary>
        <para>Minimal length of a query. By default it is 1 character.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchIndexer.minWordIndexationLength">
      <summary>
        <para>Minimal indexed word size. Default is 2.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchIndexer.name">
      <summary>
        <para>Name of the index. Generally this name is set by a user from SearchDatabase.Settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchIndexer.resolveDocumentHandler">
      <summary>
        <para>Handler used to resolve a document ID to some other data string.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchIndexer.skipEntryHandler">
      <summary>
        <para>Handler used to skip entries.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchIndexer.timestamp">
      <summary>
        <para>Indicates when the search index was last modified.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.AddDocument(System.String,System.Boolean)">
      <summary>
        <para>Adds a new document to be indexed.</para>
      </summary>
      <param name="document">Unique document ID.</param>
      <param name="name">Name of path of the document.</param>
      <param name="source">Source of the document. In example, if the document is a nested object, the source should be the container asset path.</param>
      <param name="checkIfExists">Pass true if this document has some chance of existing already.</param>
      <param name="flags">Flags describing the nature of the document.</param>
      <returns>
        <para>The document index/handle used to add new index entries.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.AddDocument(System.String,System.String,System.String,System.Boolean,UnityEditor.Search.SearchDocumentFlags)">
      <summary>
        <para>Adds a new document to be indexed.</para>
      </summary>
      <param name="document">Unique document ID.</param>
      <param name="name">Name of path of the document.</param>
      <param name="source">Source of the document. In example, if the document is a nested object, the source should be the container asset path.</param>
      <param name="checkIfExists">Pass true if this document has some chance of existing already.</param>
      <param name="flags">Flags describing the nature of the document.</param>
      <returns>
        <para>The document index/handle used to add new index entries.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.AddExactWord(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Adds a new word coming from a document to the index. The word is added with multiple variations allowing partial search.</para>
      </summary>
      <param name="word">Word to add to the index.</param>
      <param name="score">Relevance score of the word.</param>
      <param name="documentIndex">Document where the indexed word was found.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.AddNumber(System.String,System.Double,System.Int32,System.Int32)">
      <summary>
        <para>Adds a key-number value pair to the index. The key won't be added with variations.</para>
      </summary>
      <param name="key">Key used to retrieve the value.</param>
      <param name="value">Number value to store in the index.</param>
      <param name="score">Relevance score of the word.</param>
      <param name="documentIndex">Document where the indexed value was found.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.AddProperty(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
      <summary>
        <para>Adds a property value to the index. A property is specified with a key and a string value. The value will be stored with multiple variations.</para>
      </summary>
      <param name="key">Key used to retrieve the value.</param>
      <param name="value">String value to store in the index.</param>
      <param name="documentIndex">Document where the indexed value was found.</param>
      <param name="saveKeyword">Indicates if we store this key in the keyword registry of the index. See SearchIndexer.GetKeywords.</param>
      <param name="exact">If true, index stores an exact match entry for this word.</param>
      <param name="score">Relevance score of the word.</param>
      <param name="name">Key used to retrieve the value.</param>
      <param name="minVariations">Minimum number of variations to compute for the value. Cannot be higher than the length of the word.</param>
      <param name="maxVariations">Maximum number of variations to compute for the value. Cannot be higher than the length of the word.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.AddProperty(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>
        <para>Adds a property value to the index. A property is specified with a key and a string value. The value will be stored with multiple variations.</para>
      </summary>
      <param name="key">Key used to retrieve the value.</param>
      <param name="value">String value to store in the index.</param>
      <param name="documentIndex">Document where the indexed value was found.</param>
      <param name="saveKeyword">Indicates if we store this key in the keyword registry of the index. See SearchIndexer.GetKeywords.</param>
      <param name="exact">If true, index stores an exact match entry for this word.</param>
      <param name="score">Relevance score of the word.</param>
      <param name="name">Key used to retrieve the value.</param>
      <param name="minVariations">Minimum number of variations to compute for the value. Cannot be higher than the length of the word.</param>
      <param name="maxVariations">Maximum number of variations to compute for the value. Cannot be higher than the length of the word.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.AddProperty(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>
        <para>Adds a property value to the index. A property is specified with a key and a string value. The value will be stored with multiple variations.</para>
      </summary>
      <param name="key">Key used to retrieve the value.</param>
      <param name="value">String value to store in the index.</param>
      <param name="documentIndex">Document where the indexed value was found.</param>
      <param name="saveKeyword">Indicates if we store this key in the keyword registry of the index. See SearchIndexer.GetKeywords.</param>
      <param name="exact">If true, index stores an exact match entry for this word.</param>
      <param name="score">Relevance score of the word.</param>
      <param name="name">Key used to retrieve the value.</param>
      <param name="minVariations">Minimum number of variations to compute for the value. Cannot be higher than the length of the word.</param>
      <param name="maxVariations">Maximum number of variations to compute for the value. Cannot be higher than the length of the word.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.AddWord(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Adds a new word coming from a document to the index. The word is added with multiple variations allowing partial search.</para>
      </summary>
      <param name="word">Word to add to the index.</param>
      <param name="score">Relevance score of the word.</param>
      <param name="documentIndex">Document where the indexed word was found.</param>
      <param name="size">Number of variations to compute.</param>
      <param name="minVariations">Minimum number of variations to compute. Cannot be higher than the length of the word.</param>
      <param name="maxVariations">Maximum number of variations to compute. Cannot be higher than the length of the word.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.AddWord(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Adds a new word coming from a document to the index. The word is added with multiple variations allowing partial search.</para>
      </summary>
      <param name="word">Word to add to the index.</param>
      <param name="score">Relevance score of the word.</param>
      <param name="documentIndex">Document where the indexed word was found.</param>
      <param name="size">Number of variations to compute.</param>
      <param name="minVariations">Minimum number of variations to compute. Cannot be higher than the length of the word.</param>
      <param name="maxVariations">Maximum number of variations to compute. Cannot be higher than the length of the word.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.AddWord(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Adds a new word coming from a document to the index. The word is added with multiple variations allowing partial search.</para>
      </summary>
      <param name="word">Word to add to the index.</param>
      <param name="score">Relevance score of the word.</param>
      <param name="documentIndex">Document where the indexed word was found.</param>
      <param name="size">Number of variations to compute.</param>
      <param name="minVariations">Minimum number of variations to compute. Cannot be higher than the length of the word.</param>
      <param name="maxVariations">Maximum number of variations to compute. Cannot be higher than the length of the word.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.#ctor">
      <summary>
        <para>Creates a new default SearchIndexer.</para>
      </summary>
      <param name="name">Name of the indexer.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.#ctor(System.String)">
      <summary>
        <para>Creates a new default SearchIndexer.</para>
      </summary>
      <param name="name">Name of the indexer.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Dispose">
      <summary>
        <para>Dispose of the SearchIndexer.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Finish">
      <summary>
        <para>Finalizes the current index, sorting and compiling of all the indexes.</para>
      </summary>
      <param name="threadCompletedCallback">Callback invoked when the index is ready to be used.</param>
      <param name="removedDocuments">Documents to be removed from current index (if any).</param>
      <param name="saveBytes">Indicates if the system should return the binary stream of the index as a byte array.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Finish(System.String[])">
      <summary>
        <para>Finalizes the current index, sorting and compiling of all the indexes.</para>
      </summary>
      <param name="threadCompletedCallback">Callback invoked when the index is ready to be used.</param>
      <param name="removedDocuments">Documents to be removed from current index (if any).</param>
      <param name="saveBytes">Indicates if the system should return the binary stream of the index as a byte array.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Finish(System.Action)">
      <summary>
        <para>Finalizes the current index, sorting and compiling of all the indexes.</para>
      </summary>
      <param name="threadCompletedCallback">Callback invoked when the index is ready to be used.</param>
      <param name="removedDocuments">Documents to be removed from current index (if any).</param>
      <param name="saveBytes">Indicates if the system should return the binary stream of the index as a byte array.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Finish(System.Action,System.String[])">
      <summary>
        <para>Finalizes the current index, sorting and compiling of all the indexes.</para>
      </summary>
      <param name="threadCompletedCallback">Callback invoked when the index is ready to be used.</param>
      <param name="removedDocuments">Documents to be removed from current index (if any).</param>
      <param name="saveBytes">Indicates if the system should return the binary stream of the index as a byte array.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Finish(System.Action`1&lt;System.Byte[]&gt;,System.String[])">
      <summary>
        <para>Finalizes the current index, sorting and compiling of all the indexes.</para>
      </summary>
      <param name="threadCompletedCallback">Callback invoked when the index is ready to be used.</param>
      <param name="removedDocuments">Documents to be removed from current index (if any).</param>
      <param name="saveBytes">Indicates if the system should return the binary stream of the index as a byte array.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Finish(System.Action`1&lt;System.Byte[]&gt;,System.String[],System.Boolean)">
      <summary>
        <para>Finalizes the current index, sorting and compiling of all the indexes.</para>
      </summary>
      <param name="threadCompletedCallback">Callback invoked when the index is ready to be used.</param>
      <param name="removedDocuments">Documents to be removed from current index (if any).</param>
      <param name="saveBytes">Indicates if the system should return the binary stream of the index as a byte array.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.GetDocument(System.Int32)">
      <summary>
        <para>Returns a search document by its index.</para>
      </summary>
      <param name="index">Valid index of the document to access.</param>
      <returns>
        <para>Indexed search document.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.GetMetaInfo(System.String)">
      <summary>
        <para>Get metadata of a specific document.</para>
      </summary>
      <param name="documentId">Document id of the document.</param>
      <returns>
        <para>Metadata of the document.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.IndexDocument(System.String,System.Boolean)">
      <summary>
        <para>Function to override in a concrete SearchIndexer to index the content of a document.</para>
      </summary>
      <param name="document">Path of the document to index.</param>
      <param name="checkIfDocumentExists">Verifies if the document exists.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.IsReady">
      <summary>
        <para>Indicates if the index is fully built, up to date, and ready for search.</para>
      </summary>
      <returns>
        <para>Returns true if the index is ready for search.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.LoadBytes(System.Byte[],System.Action`1&lt;System.Boolean&gt;)">
      <summary>
        <para>Loads the index asynchronously (in another thread) from a binary buffer.</para>
      </summary>
      <param name="bytes">Binary buffer containing the index representation.</param>
      <param name="finished">Callback that triggers when the index is fully loaded. The callback parameters indicates if loading was succesful.</param>
      <returns>
        <para>Returns false if the index is of an unsupported version or if there was a problem initializing the reading thread.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Merge(System.String[],UnityEditor.Search.SearchIndexer,System.Int32,System.Action`3&lt;System.Int32,UnityEditor.Search.SearchIndexer,System.Int32&gt;)">
      <summary>
        <para>Merge a search index content into the current index.</para>
      </summary>
      <param name="removeDocuments">Documents to be removed as part of the merge operation. Can be null or empty.</param>
      <param name="other">The other index to be merged into the current one.</param>
      <param name="baseScore">Base score to give to all the merged indexes.</param>
      <param name="documentIndexing">Utility callback used to inject last minutes indexes before merging the indexes of a document.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Read(System.IO.Stream,System.Boolean)">
      <summary>
        <para>Reads a stream and populates the index from it.</para>
      </summary>
      <param name="stream">The stream to read the index from.</param>
      <param name="checkVersionOnly">If true, verifies the version of the index.</param>
      <returns>
        <para>Returns false if the version of the index is not supported.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.SaveBytes">
      <summary>
        <para>Get the bytes representation of this index. See SearchIndexer.Write.</para>
      </summary>
      <returns>
        <para>Bytes representation of the index.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Search(UnityEditor.Search.SearchContext,UnityEditor.Search.SearchProvider,System.Int32,System.Int32)">
      <summary>
        <para>Runs a search query in the index.</para>
      </summary>
      <param name="query">Search query to look for. If if matches any of the indexed variations, a result is returned.</param>
      <param name="context">The search context on which the query is applied.</param>
      <param name="provider">The search provider that initiated the search.</param>
      <param name="maxScore">Maximum match score of any matched Search Result. See SearchResult.score.</param>
      <param name="patternMatchLimit">Maximum number of matched Search Results that can be returned. See SearchResult.</param>
      <returns>
        <para>Returns a collection of Search Results matching the query.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Search(System.String,UnityEditor.Search.SearchContext,UnityEditor.Search.SearchProvider,System.Int32,System.Int32)">
      <summary>
        <para>Runs a search query in the index.</para>
      </summary>
      <param name="query">Search query to look for. If if matches any of the indexed variations, a result is returned.</param>
      <param name="context">The search context on which the query is applied.</param>
      <param name="provider">The search provider that initiated the search.</param>
      <param name="maxScore">Maximum match score of any matched Search Result. See SearchResult.score.</param>
      <param name="patternMatchLimit">Maximum number of matched Search Results that can be returned. See SearchResult.</param>
      <returns>
        <para>Returns a collection of Search Results matching the query.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Search(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Runs a search query in the index.</para>
      </summary>
      <param name="query">Search query to look for. If if matches any of the indexed variations, a result is returned.</param>
      <param name="context">The search context on which the query is applied.</param>
      <param name="provider">The search provider that initiated the search.</param>
      <param name="maxScore">Maximum match score of any matched Search Result. See SearchResult.score.</param>
      <param name="patternMatchLimit">Maximum number of matched Search Results that can be returned. See SearchResult.</param>
      <returns>
        <para>Returns a collection of Search Results matching the query.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.SetMetaInfo(System.String,System.String)">
      <summary>
        <para>Set arbiraty metadata on a specific document.</para>
      </summary>
      <param name="documentId">Id of a document.</param>
      <param name="metadata">Metadata to bind to that document.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.SkipEntry(System.String,System.Boolean)">
      <summary>
        <para>Called when the index is built to see if a specified document needs to be indexed. See SearchIndexer.skipEntryHandler.</para>
      </summary>
      <param name="document">Path of a document.</param>
      <param name="checkRoots">Check Roots.</param>
      <returns>
        <para>Returns true if the document doesn't need to be indexed.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Start(System.Boolean)">
      <summary>
        <para>Starts indexing entries.</para>
      </summary>
      <param name="clear">True if the the current index should be cleared.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Write(System.IO.Stream)">
      <summary>
        <para>Writes a binary representation of the index on a stream.</para>
      </summary>
      <param name="stream">Stream to write the index.</param>
    </member>
    <member name="T:UnityEditor.Search.SearchItem">
      <summary>
        <para>Search items are returned by the search provider to show to the user after a search is performed. The search item holds all the data that is used to sort and present the search results. Some members of a SearchItem can be specified in an asynchronous callback (see SearchItem.fetchThumbnail, SearchItem.fetchDescription, etc).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchItem.clear">
      <summary>
        <para>A search item representing none, usually used to clear the selection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.context">
      <summary>
        <para>Context used to create that item.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.data">
      <summary>
        <para>Search provider defined content. It can be used to transport any data to custom search provider handlers (i.e. `fetchDescription`).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.description">
      <summary>
        <para>If no description is provided, SearchProvider.fetchDescription will be called when the item is first displayed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.id">
      <summary>
        <para>Unique ID of the search item for the search provider.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.label">
      <summary>
        <para>Display name of the search item.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.none">
      <summary>
        <para>A search item representing none, usually used to clear the selection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.options">
      <summary>
        <para>Flags that dictate how the search item is displayed and used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.preview">
      <summary>
        <para>Large preview of the search item. Usually cached by fetchPreview.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.provider">
      <summary>
        <para>Back pointer to the search provider.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.score">
      <summary>
        <para>The item relevance score will affect how the item gets sorted by the search provider. Lower scored items have more relevance and are prioritzed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.thumbnail">
      <summary>
        <para>If no thumbnail is provided, SearchProvider.fetchThumbnail is called when the item is first displayed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchItem.value">
      <summary>
        <para>Value set by the search expression system when selecting fields.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.CompareTo(System.Object)">
      <summary>
        <para>Check if two SearchItems have the same ID.</para>
      </summary>
      <param name="other">Another SearchItem to compare.</param>
      <returns>
        <para>Returns 0 if SearchItems have the same ID.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.CompareTo(UnityEditor.Search.SearchItem)">
      <summary>
        <para>Check if two SearchItems have the same ID.</para>
      </summary>
      <param name="other">Another SearchItem to compare.</param>
      <returns>
        <para>Returns 0 if SearchItems have the same ID.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.#ctor(System.String)">
      <summary>
        <para>Construct a search item. A search item needs to have at least a unique ID for a given search query.</para>
      </summary>
      <param name="_id">Unique ID of the SearchItem.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.Equals(System.Object)">
      <summary>
        <para>Check if two SearchItems have the same ID.</para>
      </summary>
      <param name="other">AnotherSearchItem to compare.</param>
      <returns>
        <para>Returns true if SearchItems have the same ID.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.Equals(UnityEditor.Search.SearchItem)">
      <summary>
        <para>Check if two SearchItems have the same ID.</para>
      </summary>
      <param name="other">AnotherSearchItem to compare.</param>
      <returns>
        <para>Returns true if SearchItems have the same ID.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.GetDescription(UnityEditor.Search.SearchContext,System.Boolean)">
      <summary>
        <para>Fetch and format description.</para>
      </summary>
      <param name="context">Any search context for the item search provider.</param>
      <param name="stripHTML">True if any HTML tags should be dropped (if the control does not support HTML).</param>
      <returns>
        <para>The search item description.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.GetFieldCount">
      <summary>
        <para>Returns the amount of field stored in the search item.</para>
      </summary>
      <returns>
        <para>Field count.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.GetFieldNames">
      <summary>
        <para>Returns a list of all field names.</para>
      </summary>
      <returns>
        <para>Field names.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.GetFields">
      <summary>
        <para>Enumerate all search items fields.</para>
      </summary>
      <returns>
        <para>Search item fields.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.GetHashCode">
      <summary>
        <para>Default Hash of a SearchItem.</para>
      </summary>
      <returns>
        <para>A hash code for the current SearchItem.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.GetLabel(UnityEditor.Search.SearchContext,System.Boolean)">
      <summary>
        <para>Fetch and format label.</para>
      </summary>
      <param name="context">Any search context for the item search provider.</param>
      <param name="stripHTML">True if any HTML tags should be dropped.</param>
      <returns>
        <para>The search item label.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.GetPreview(UnityEditor.Search.SearchContext,UnityEngine.Vector2,UnityEditor.Search.FetchPreviewOptions,System.Boolean)">
      <summary>
        <para>Gets the search item preview if available, otherwise the preview is fetched at this time.</para>
      </summary>
      <param name="context">Search context used to fetch the preview.</param>
      <param name="size">Indicates the size of the desired preview.</param>
      <param name="options">Indicates the options used to fetch various preview types.</param>
      <param name="cacheThumbnail">Indicates if the preview thumbnail should be cached for next time.</param>
      <returns>
        <para>Returns the generated preview 2D texture.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.GetThumbnail(UnityEditor.Search.SearchContext,System.Boolean)">
      <summary>
        <para>Gets the search item thumbnail if available, otherwise the thumbnail is fetched at this time. The thumbnail is usually used in list view compared to the grid view.</para>
      </summary>
      <param name="context">Search context used to fetch the search item thumbnail.</param>
      <param name="cacheThumbnail">Indicates if the search item thumbnail should be cached for next time.</param>
      <returns>
        <para>Returns the search item 2D texture.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.GetValue(System.String,UnityEditor.Search.SearchContext)">
      <summary>
        <para>Get the default search item value of a given field.</para>
      </summary>
      <param name="name">Field name. Can be null.</param>
      <param name="context">Search context if available. Can be null.</param>
      <returns>
        <para>Search item value.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.RemoveField(System.String)">
      <summary>
        <para>Removes an item field.</para>
      </summary>
      <param name="name">Name of the field to be removed.</param>
      <returns>
        <para>Returns true if a field was actually removed.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.SetField(System.String,System.Object)">
      <summary>
        <para>Sets a field value and alias.</para>
      </summary>
      <param name="name">Field name.</param>
      <param name="value">Value to be set.</param>
      <param name="alias">Alias to be given to the field.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.SetField(System.String,System.String,System.Object)">
      <summary>
        <para>Sets a field value and alias.</para>
      </summary>
      <param name="name">Field name.</param>
      <param name="value">Value to be set.</param>
      <param name="alias">Alias to be given to the field.</param>
    </member>
    <member name="P:UnityEditor.Search.SearchItem.this">
      <summary>
        <para>Operator used to get an item field value.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.ToObject">
      <summary>
        <para>Returns any valid Unity Object held by the search item.</para>
      </summary>
      <param name="type">Used to validate if the object is assignable to Type.</param>
      <returns>
        <para>Returns a Unity Object or null if there is none.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.ToObject(System.Type)">
      <summary>
        <para>Returns any valid Unity Object held by the search item.</para>
      </summary>
      <param name="type">Used to validate if the object is assignable to Type.</param>
      <returns>
        <para>Returns a Unity Object or null if there is none.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.ToObject">
      <summary>
        <para>Returns any valid Unity Object held by the search item.</para>
      </summary>
      <returns>
        <para>Used to validate if the object is assignable to T.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.TryGetField">
      <summary>
        <para>Returns an item field if available.</para>
      </summary>
      <param name="name">Field name.</param>
      <param name="field">Copy of the field found.</param>
      <returns>
        <para>Returns true if the requested field name exists.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.TryGetValue">
      <summary>
        <para>Returns' a field's value if any. Compared to SearchItem.TryGetField this method also resolved built-in field such as id, label, description, value, etc.</para>
      </summary>
      <param name="name">Field name.</param>
      <param name="field">Copy of the field found.</param>
      <param name="context">Search context if available to resolve the search field.</param>
      <returns>
        <para>Returns true if a field value was found.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.TryGetValue">
      <summary>
        <para>Returns' a field's value if any. Compared to SearchItem.TryGetField this method also resolved built-in field such as id, label, description, value, etc.</para>
      </summary>
      <param name="name">Field name.</param>
      <param name="field">Copy of the field found.</param>
      <param name="context">Search context if available to resolve the search field.</param>
      <returns>
        <para>Returns true if a field value was found.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.SearchItemOptions">
      <summary>
        <para>Indicates how the search item description needs to be formatted when presented to the user.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItemOptions.AlwaysRefresh">
      <summary>
        <para>Indicates that the item will always be refreshed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItemOptions.Compacted">
      <summary>
        <para>Uses Label instead of description for shorter display.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItemOptions.CustomAction">
      <summary>
        <para>Indicates that the item is used as a built-in or custom user action that should always be displayed on top of result views.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItemOptions.Ellipsis">
      <summary>
        <para>If the description is longer than the width of the search view, truncates the description and adds an ellipsis.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItemOptions.FullDescription">
      <summary>
        <para>The item description that is displayed in full mode. This is usually the case when the description is displayed in the Preview Inspector as opposed to the Result View.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItemOptions.FuzzyHighlight">
      <summary>
        <para>Highlights parts of the description that match the Fuzzy Search Query.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItemOptions.Highlight">
      <summary>
        <para>Highlights parts of the description that match the Search Query.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItemOptions.None">
      <summary>
        <para>Uses default description.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItemOptions.RightToLeft">
      <summary>
        <para>If the description is longer than the search view, keeps the last characters.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchItemProviderAttribute">
      <summary>
        <para>Attribute used to declare a static method that will create a new search provider at load time.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchMonitor">
      <summary>
        <para>The search monitor is responsible to track any changes that occurs in Unity in order to update search indexes or other search data structure at runtime.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.Search.SearchMonitor.contentRefreshed(System.Action`3&lt;System.String[],System.String[],System.String[]&gt;)">
      <summary>
        <para>Event invoked when some content has changed.</para>
      </summary>
      <param name="value">Handler invoked when project content was altered.</param>
    </member>
    <member name="?:UnityEditor.Search.SearchMonitor.documentsInvalidated(System.Action)">
      <summary>
        <para>Event raised when documents get invalidated.</para>
      </summary>
      <param name="value">Handler invoked when documents get invalidated.</param>
    </member>
    <member name="?:UnityEditor.Search.SearchMonitor.objectChanged(UnityEditor.ObjectChangeEvents/ObjectChangeEventsHandler)">
      <summary>
        <para>Event raised when an UnityEngine.Object changed.</para>
      </summary>
      <param name="value">Handler invoked when an object changes.</param>
    </member>
    <member name="P:UnityEditor.Search.SearchMonitor.pending">
      <summary>
        <para>Indicates if the changes still need to be processed by the search backend.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.Search.SearchMonitor.sceneChanged(System.Action)">
      <summary>
        <para>Event raised when the current loaded scene changes that might affect search results.</para>
      </summary>
      <param name="value">Handler invoked when the current scene changes.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchMonitor.GetDiff(System.Int64,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.Func`2&lt;System.String,System.Boolean&gt;)">
      <summary>
        <para>Returns the assets that changed since a point in time.</para>
      </summary>
      <param name="timestamp">Timestamp to be compared.</param>
      <param name="deletedAssets">Any untracked deleted assets.</param>
      <param name="predicate">Predicate used to filter the asset changeset.</param>
      <returns>
        <para>Changeset.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchMonitor.GetView(System.Boolean)">
      <summary>
        <para>Returns a Search.SearchMonitorView|SearchMonitorView to access Search's main Search.PropertyDatabase|PropertyDatabases.</para>
      </summary>
      <param name="delayedSync">Boolean indicating if the sync between views should only happen when the view is disposed, or for every operation. Default is false.</param>
      <returns>
        <para>A SearchMonitorView.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchMonitor.RaiseContentRefreshed(System.String[],System.String[],System.String[])">
      <summary>
        <para>Mark content to be refreshed.</para>
      </summary>
      <param name="updated">Assets that were updated.</param>
      <param name="removed">Assets that were removed.</param>
      <param name="moved">Assets that were moved.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchMonitor.Reset">
      <summary>
        <para>Reset the search property database content, invalidating all caches.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchMonitorView">
      <summary>
        <para>Scoped search monitor view.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchMonitorView.Invalidate(UnityEditor.Search.PropertyDatabaseRecordKey)">
      <summary>
        <para>Mark a document property to be invalided.</para>
      </summary>
      <param name="recordKey">Property key.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchMonitorView.InvalidateDocument(System.UInt64)">
      <summary>
        <para>Mark a document to be invalidated.</para>
      </summary>
      <param name="documentKey">Document key.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchMonitorView.InvalidateDocument(System.String)">
      <summary>
        <para>Mark a document to be invalidated.</para>
      </summary>
      <param name="documentKey">Document key.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchMonitorView.StoreAlias(UnityEditor.Search.PropertyDatabaseRecordKey,System.String)">
      <summary>
        <para>Store a property alias in the property string table.</para>
      </summary>
      <param name="key">Property key.</param>
      <param name="alias">Alias to be set.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchMonitorView.StoreProperty(UnityEditor.Search.PropertyDatabaseRecordKey,System.Object)">
      <summary>
        <para>Store a property value.</para>
      </summary>
      <param name="recordKey">Property key.</param>
      <param name="value">Property value.</param>
      <param name="alias">Property alias if any.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchMonitorView.StoreProperty(UnityEditor.Search.PropertyDatabaseRecordKey,System.Object,System.String)">
      <summary>
        <para>Store a property value.</para>
      </summary>
      <param name="recordKey">Property key.</param>
      <param name="value">Property value.</param>
      <param name="alias">Property alias if any.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchMonitorView.TryLoadAlias(UnityEditor.Search.PropertyDatabaseRecordKey,System.String&amp;)">
      <summary>
        <para>Gets a property alias if any.</para>
      </summary>
      <param name="recordKey">Property key.</param>
      <param name="alias">Property alias.</param>
      <returns>
        <para>Returns true if the property has an alias.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchMonitorView.TryLoadProperty(System.UInt64,System.String,UnityEditor.Search.PropertyDatabaseRecordKey&amp;,System.Object&amp;,System.String&amp;)">
      <summary>
        <para>Loads a property if any.</para>
      </summary>
      <param name="documentKey">Document id.</param>
      <param name="propertyName">Property name.</param>
      <param name="recordKey">Computed property key that can be used to do other load or store accesses.</param>
      <param name="value">Decoded propety value.</param>
      <param name="alias">Property alias if any.</param>
      <param name="data">Decoded propety value.</param>
      <returns>
        <para>Returns true if the property is found.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchMonitorView.TryLoadProperty(UnityEditor.Search.PropertyDatabaseRecordKey,System.Object&amp;)">
      <summary>
        <para>Loads a property if any.</para>
      </summary>
      <param name="documentKey">Document id.</param>
      <param name="propertyName">Property name.</param>
      <param name="recordKey">Computed property key that can be used to do other load or store accesses.</param>
      <param name="value">Decoded propety value.</param>
      <param name="alias">Property alias if any.</param>
      <param name="data">Decoded propety value.</param>
      <returns>
        <para>Returns true if the property is found.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.SearchProposition">
      <summary>
        <para>Search propositions are used to display choices to the user to add new filters to a search query.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProposition.data">
      <summary>
        <para>The data field can hold any user data that the user can retrieve later to determine the nature of the proposition.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchProposition.#ctor(System.String,System.String,System.String,System.Int32,UnityEditor.Search.TextCursorPlacement,UnityEngine.Texture2D)">
      <summary>
        <para>Create a new search proposition.</para>
      </summary>
      <param name="category">Category text used to group propositions together in query builder mode.</param>
      <param name="label">Display text of the proposition.</param>
      <param name="replacement">Text used to auto-complete the query when selected.</param>
      <param name="help">Help text used to display additional information about the search proposition.</param>
      <param name="priority">Value used to sort the propositions among other search propositions when displaying choices to the user.</param>
      <param name="moveCursor">Indicates when the text cursor should be moved when auto-completing the query with the selected proposition.</param>
      <param name="icon">Icon used to display the proposition.</param>
      <param name="color">Color used in query builder mode to draw the block using a specific color.</param>
      <param name="data">User data that the user can retrieve later to determine the nature of the proposition.</param>
      <param name="type">Type of search proposition value. This information is used in the query builder mode.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchProposition.#ctor(System.String,System.String,System.String,System.Int32,UnityEngine.Texture2D,System.Object,UnityEngine.Color)">
      <summary>
        <para>Create a new search proposition.</para>
      </summary>
      <param name="category">Category text used to group propositions together in query builder mode.</param>
      <param name="label">Display text of the proposition.</param>
      <param name="replacement">Text used to auto-complete the query when selected.</param>
      <param name="help">Help text used to display additional information about the search proposition.</param>
      <param name="priority">Value used to sort the propositions among other search propositions when displaying choices to the user.</param>
      <param name="moveCursor">Indicates when the text cursor should be moved when auto-completing the query with the selected proposition.</param>
      <param name="icon">Icon used to display the proposition.</param>
      <param name="color">Color used in query builder mode to draw the block using a specific color.</param>
      <param name="data">User data that the user can retrieve later to determine the nature of the proposition.</param>
      <param name="type">Type of search proposition value. This information is used in the query builder mode.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchProposition.#ctor(System.String,System.String,System.String,System.String,System.Int32,UnityEditor.Search.TextCursorPlacement,UnityEngine.Texture2D,System.Type,System.Object,UnityEngine.Color)">
      <summary>
        <para>Create a new search proposition.</para>
      </summary>
      <param name="category">Category text used to group propositions together in query builder mode.</param>
      <param name="label">Display text of the proposition.</param>
      <param name="replacement">Text used to auto-complete the query when selected.</param>
      <param name="help">Help text used to display additional information about the search proposition.</param>
      <param name="priority">Value used to sort the propositions among other search propositions when displaying choices to the user.</param>
      <param name="moveCursor">Indicates when the text cursor should be moved when auto-completing the query with the selected proposition.</param>
      <param name="icon">Icon used to display the proposition.</param>
      <param name="color">Color used in query builder mode to draw the block using a specific color.</param>
      <param name="data">User data that the user can retrieve later to determine the nature of the proposition.</param>
      <param name="type">Type of search proposition value. This information is used in the query builder mode.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchProposition.#ctor(System.String,System.String,System.String,System.Int32,UnityEditor.Search.TextCursorPlacement,UnityEngine.Texture2D,UnityEngine.Color)">
      <summary>
        <para>Create a new search proposition.</para>
      </summary>
      <param name="category">Category text used to group propositions together in query builder mode.</param>
      <param name="label">Display text of the proposition.</param>
      <param name="replacement">Text used to auto-complete the query when selected.</param>
      <param name="help">Help text used to display additional information about the search proposition.</param>
      <param name="priority">Value used to sort the propositions among other search propositions when displaying choices to the user.</param>
      <param name="moveCursor">Indicates when the text cursor should be moved when auto-completing the query with the selected proposition.</param>
      <param name="icon">Icon used to display the proposition.</param>
      <param name="color">Color used in query builder mode to draw the block using a specific color.</param>
      <param name="data">User data that the user can retrieve later to determine the nature of the proposition.</param>
      <param name="type">Type of search proposition value. This information is used in the query builder mode.</param>
    </member>
    <member name="T:UnityEditor.Search.SearchPropositionFlags">
      <summary>
        <para>The search proposition flags are used to give additional context to the search proposition.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchPropositionFlags.FilterOnly">
      <summary>
        <para>This search proposition will only be displayed when auto-completing a filter in text mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchPropositionFlags.ForceAllProviders">
      <summary>
        <para>The query builder use that flag to show all search providers when the search query is empty.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchPropositionFlags.IgnoreRecents">
      <summary>
        <para>Recent search queries will not be listed as search propositions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchPropositionFlags.NoCategory">
      <summary>
        <para>Indicates that the query builder will not show search propositions categories.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchPropositionFlags.None">
      <summary>
        <para>Indicates no flags are used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchPropositionFlags.QueryBuilder">
      <summary>
        <para>Indicates that the search propositions are fetched for the query block selector.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchPropositionFlagsExtensions">
      <summary>
        <para>Search proposition flags extension used to manipulate flag bits.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchPropositionFlagsExtensions.HasAll(UnityEditor.Search.SearchPropositionFlags,UnityEditor.Search.SearchPropositionFlags)">
      <summary>
        <para>Checks if a SearchPropositionFlags contains a set of flags.</para>
      </summary>
      <param name="flags">Flags to be checked.</param>
      <param name="all">Flags should contains all these value.</param>
      <returns>
        <para>Returns true if flags contains all flags.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchPropositionFlagsExtensions.HasAny(UnityEditor.Search.SearchPropositionFlags,UnityEditor.Search.SearchPropositionFlags)">
      <summary>
        <para>Checks if a SearchPropositionFlags contains any flags.</para>
      </summary>
      <param name="flags">Flags to be checked.</param>
      <param name="f">Flags to be checked individually.</param>
      <returns>
        <para>Returns true if any flags is verified.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.SearchPropositionOptions">
      <summary>
        <para>Search proposition options are used define how search propositions are fetched and displayed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchPropositionOptions.flags">
      <summary>
        <para>Flags used to drive how the search propositions should be fetched and displayed.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchProvider">
      <summary>
        <para>SearchProvider manages search for specific types of items and manages all fields of a SearchItem such as thumbnails, descriptions, subfilters.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchProvider.actions">
      <summary>
        <para>Search provider actions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.active">
      <summary>
        <para>Indicates if the search provider is active or not. Inactive search providers are ignored by the search service. The active state can be toggled in the search settings.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.fetchColumns">
      <summary>
        <para>Handler used to enumerate search columns to be used in the Search Table view.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.fetchDescription">
      <summary>
        <para>Handler to provide an asynchronous description for an item. Is called when the item is about to be displayed. Allows a plugin provider to only fetch long descriptions when they are needed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.fetchItems">
      <summary>
        <para>MANDATORY: Handler to get items for a given search context. The return value is an object that can be of type IEnumerable or IEnumerator. The enumeration of those objects should return SearchItems.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.fetchLabel">
      <summary>
        <para>Handler used to fetch and format the label of a search item.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.fetchPreview">
      <summary>
        <para>Similar to fetchThumbnail, fetchPreview usually returns a bigger preview. The Search UI will progressively show one preview each frame, preventing the UI from blocking if many previews need to be generated at the same time.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.fetchPropositions">
      <summary>
        <para>Handler used to enumerate search propositions when the user is using TAB to auto-complete a query.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.fetchThumbnail">
      <summary>
        <para>Handler to provide an asynchronous thumbnail for an item. Is called when the item is about to be displayed. Compared to preview a thumbnail should be small and returned as fast as possible. Use fetchPreview if you want to generate a preview that is bigger and slower to return. Allows a plugin provider to only fetch/generate previews when they are needed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.filterId">
      <summary>
        <para>Text token used to "filter" by search provider (ex:  "me:", "p:", "s:").</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchProvider.id">
      <summary>
        <para>Search provider unique ID.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.isEnabledForContextualSearch">
      <summary>
        <para>Called when search is invoked in "contextual mode". Returns true if the search provider is enabled for this search context.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.isExplicitProvider">
      <summary>
        <para>This search provider is only active when specified explicitly using the filterId.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchProvider.name">
      <summary>
        <para>Unique ID of the search provider.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.onDisable">
      <summary>
        <para>Called when the SearchWindow is closed. Allows the search provider to release cached resources.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.onEnable">
      <summary>
        <para>Called when the SearchWindow is opened. Allows the search provider to perform some caching.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.priority">
      <summary>
        <para>Hint to sort the search provider. Affects the order of search results and the order in which search providers are shown in the FilterWindow.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.showDetails">
      <summary>
        <para>Indicates if the search provider can show additional details or not.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.showDetailsOptions">
      <summary>
        <para>Defines the details options to be shown.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.startDrag">
      <summary>
        <para>If implemented, the item supports drag. It is up to the SearchProvider to properly set up the DragAndDrop manager.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.toObject">
      <summary>
        <para>Returns any valid Unity object held by the search item.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.trackSelection">
      <summary>
        <para>Called when the selection changed and can be tracked.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchProvider.type">
      <summary>
        <para>The search provider type can be another search provider id that provider is based on. This is used when we have multiple groups in the search view that list results from a similar provider.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.CreateItem(UnityEditor.Search.SearchContext,System.String,System.Int32,System.String,System.String,UnityEngine.Texture2D,System.Object)">
      <summary>
        <para>Helper function to create a new search item for the current search provider.</para>
      </summary>
      <param name="context">Search context from the query that generates this item.</param>
      <param name="id">Unique ID of the search item. This is used to remove duplicates in the user view.</param>
      <param name="score">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="label">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="description">The search item description is displayed on the second line of the search item UI widget.</param>
      <param name="thumbnail">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <param name="data">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <returns>
        <para>The newly created search item attached to the current search provider.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.CreateItem(System.String,System.Int32,System.String,System.String,UnityEngine.Texture2D,System.Object)">
      <summary>
        <para>Helper function to create a new search item for the current search provider.</para>
      </summary>
      <param name="context">Search context from the query that generates this item.</param>
      <param name="id">Unique ID of the search item. This is used to remove duplicates in the user view.</param>
      <param name="score">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="label">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="description">The search item description is displayed on the second line of the search item UI widget.</param>
      <param name="thumbnail">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <param name="data">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <returns>
        <para>The newly created search item attached to the current search provider.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.CreateItem(UnityEditor.Search.SearchContext,System.String)">
      <summary>
        <para>Helper function to create a new search item for the current search provider.</para>
      </summary>
      <param name="context">Search context from the query that generates this item.</param>
      <param name="id">Unique ID of the search item. This is used to remove duplicates in the user view.</param>
      <param name="score">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="label">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="description">The search item description is displayed on the second line of the search item UI widget.</param>
      <param name="thumbnail">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <param name="data">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <returns>
        <para>The newly created search item attached to the current search provider.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.CreateItem(System.String)">
      <summary>
        <para>Helper function to create a new search item for the current search provider.</para>
      </summary>
      <param name="context">Search context from the query that generates this item.</param>
      <param name="id">Unique ID of the search item. This is used to remove duplicates in the user view.</param>
      <param name="score">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="label">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="description">The search item description is displayed on the second line of the search item UI widget.</param>
      <param name="thumbnail">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <param name="data">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <returns>
        <para>The newly created search item attached to the current search provider.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.CreateItem(System.String,System.String)">
      <summary>
        <para>Helper function to create a new search item for the current search provider.</para>
      </summary>
      <param name="context">Search context from the query that generates this item.</param>
      <param name="id">Unique ID of the search item. This is used to remove duplicates in the user view.</param>
      <param name="score">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="label">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="description">The search item description is displayed on the second line of the search item UI widget.</param>
      <param name="thumbnail">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <param name="data">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <returns>
        <para>The newly created search item attached to the current search provider.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.CreateItem(System.String,System.String,System.String,UnityEngine.Texture2D,System.Object)">
      <summary>
        <para>Helper function to create a new search item for the current search provider.</para>
      </summary>
      <param name="context">Search context from the query that generates this item.</param>
      <param name="id">Unique ID of the search item. This is used to remove duplicates in the user view.</param>
      <param name="score">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="label">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="description">The search item description is displayed on the second line of the search item UI widget.</param>
      <param name="thumbnail">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <param name="data">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <returns>
        <para>The newly created search item attached to the current search provider.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.CreateItem(UnityEditor.Search.SearchContext,System.String,System.String,System.String,UnityEngine.Texture2D,System.Object)">
      <summary>
        <para>Helper function to create a new search item for the current search provider.</para>
      </summary>
      <param name="context">Search context from the query that generates this item.</param>
      <param name="id">Unique ID of the search item. This is used to remove duplicates in the user view.</param>
      <param name="score">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="label">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="description">The search item description is displayed on the second line of the search item UI widget.</param>
      <param name="thumbnail">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <param name="data">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <returns>
        <para>The newly created search item attached to the current search provider.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.#ctor(System.String)">
      <summary>
        <para>Create a new SearchProvider.</para>
      </summary>
      <param name="id">Search Provider unique ID.</param>
      <param name="displayName">Search Provider pretty name, used to display in UI.</param>
      <param name="fetchItemsHandler">Handler responsible for populating a list of SearchItems according to a query.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.#ctor(System.String,System.String)">
      <summary>
        <para>Create a new SearchProvider.</para>
      </summary>
      <param name="id">Search Provider unique ID.</param>
      <param name="displayName">Search Provider pretty name, used to display in UI.</param>
      <param name="fetchItemsHandler">Handler responsible for populating a list of SearchItems according to a query.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.#ctor(System.String,System.Func`4&lt;UnityEditor.Search.SearchContext,System.Collections.Generic.List`1&lt;UnityEditor.Search.SearchItem&gt;,UnityEditor.Search.SearchProvider,System.Object&gt;)">
      <summary>
        <para>Create a new SearchProvider.</para>
      </summary>
      <param name="id">Search Provider unique ID.</param>
      <param name="displayName">Search Provider pretty name, used to display in UI.</param>
      <param name="fetchItemsHandler">Handler responsible for populating a list of SearchItems according to a query.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.#ctor(System.String,System.Func`3&lt;UnityEditor.Search.SearchContext,UnityEditor.Search.SearchProvider,System.Object&gt;)">
      <summary>
        <para>Create a new SearchProvider.</para>
      </summary>
      <param name="id">Search Provider unique ID.</param>
      <param name="displayName">Search Provider pretty name, used to display in UI.</param>
      <param name="fetchItemsHandler">Handler responsible for populating a list of SearchItems according to a query.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.#ctor(System.String,System.String,System.Func`3&lt;UnityEditor.Search.SearchContext,UnityEditor.Search.SearchProvider,System.Object&gt;)">
      <summary>
        <para>Create a new SearchProvider.</para>
      </summary>
      <param name="id">Search Provider unique ID.</param>
      <param name="displayName">Search Provider pretty name, used to display in UI.</param>
      <param name="fetchItemsHandler">Handler responsible for populating a list of SearchItems according to a query.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.#ctor(System.String,System.String,System.Func`4&lt;UnityEditor.Search.SearchContext,System.Collections.Generic.List`1&lt;UnityEditor.Search.SearchItem&gt;,UnityEditor.Search.SearchProvider,System.Object&gt;)">
      <summary>
        <para>Create a new SearchProvider.</para>
      </summary>
      <param name="id">Search Provider unique ID.</param>
      <param name="displayName">Search Provider pretty name, used to display in UI.</param>
      <param name="fetchItemsHandler">Handler responsible for populating a list of SearchItems according to a query.</param>
    </member>
    <member name="T:UnityEditor.Search.SearchQueryError">
      <summary>
        <para>Represents a query parsing error.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchQueryError.context">
      <summary>
        <para>The context in which this error was logged.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchQueryError.index">
      <summary>
        <para>Index where the error occurred.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchQueryError.length">
      <summary>
        <para>Length of the block that was being parsed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchQueryError.provider">
      <summary>
        <para>Which search provider logged this error.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchQueryError.reason">
      <summary>
        <para>The reason for the error.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchQueryError.type">
      <summary>
        <para>The type of query error.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchQueryError.#ctor(System.Int32,System.Int32,System.String,UnityEditor.Search.SearchContext,UnityEditor.Search.SearchProvider,System.Boolean,UnityEditor.Search.SearchQueryErrorType)">
      <summary>
        <para>Creates a new SearchQueryError.</para>
      </summary>
      <param name="index">Index where the error occurred.</param>
      <param name="length">Length of the block that was being parsed.</param>
      <param name="reason">The reason for the error.</param>
      <param name="context">The context in which this error was logged.</param>
      <param name="provider">Which search provider logged this error.</param>
      <param name="fromSearchQuery">Set to true if this error comes from parsing the searchQuery. This will correctly offset the index with respect to the raw text.</param>
      <param name="type">The type of query error. See Search.SearchQueryErrorType. Defaults to Search.SearchQueryErrorType.Error|SearchQueryErrorType.Error.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchQueryError.#ctor(UnityEditor.Search.QueryError,UnityEditor.Search.SearchContext,UnityEditor.Search.SearchProvider,System.Boolean)">
      <summary>
        <para>Creates a new SearchQueryError from an existing Search.QueryError|QueryError.</para>
      </summary>
      <param name="error">The original Search.QueryError|QueryError.</param>
      <param name="context">The context in which this error was logged.</param>
      <param name="provider">Which search provider logged this error.</param>
      <param name="fromSearchQuery">Set to true if this error comes from parsing the searchQuery. This will correctly offset the index with respect to the raw text.</param>
    </member>
    <member name="T:UnityEditor.Search.SearchQueryErrorType">
      <summary>
        <para>Enum representing the possible types of query errors.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchQueryErrorType.Error">
      <summary>
        <para>Represents an error.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchQueryErrorType.Warning">
      <summary>
        <para>Represents a warning.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchResult">
      <summary>
        <para>Contains a SearchItem that was retrieved from a query.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchResult.id">
      <summary>
        <para>ID of the document containing that result.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchResult.index">
      <summary>
        <para>Index of the document containing that result.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchResult.nil">
      <summary>
        <para>Represents a null search result.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchResult.score">
      <summary>
        <para>Relavance score of the result. A lower score indicates it is a more relevant result.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchResult.valid">
      <summary>
        <para>Checks if a search result is valid.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchResult.CompareTo(UnityEditor.Search.SearchResult)">
      <summary>
        <para>Compares Search Results using their index values.</para>
      </summary>
      <param name="other">Another SearchResult to compare.</param>
      <returns>
        <para>Returns true if both SearchResults have the same index.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchResult.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Creates a new SearchResult.</para>
      </summary>
      <param name="id">ID of the document containing the result.</param>
      <param name="index">Index of the document containing the result.</param>
      <param name="score">Relevance core of the result. A lower score indicates it is a more relevant result.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchResult.#ctor(System.Int32)">
      <summary>
        <para>Creates a new SearchResult.</para>
      </summary>
      <param name="id">ID of the document containing the result.</param>
      <param name="index">Index of the document containing the result.</param>
      <param name="score">Relevance core of the result. A lower score indicates it is a more relevant result.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchResult.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Creates a new SearchResult.</para>
      </summary>
      <param name="id">ID of the document containing the result.</param>
      <param name="index">Index of the document containing the result.</param>
      <param name="score">Relevance core of the result. A lower score indicates it is a more relevant result.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchResult.Equals(UnityEditor.Search.SearchResult)">
      <summary>
        <para>Compare Search Result using their index values.</para>
      </summary>
      <param name="other">Another SearchResult to compare.</param>
      <returns>
        <para>Returns true if both SearchResults have the same index.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchResult.Equals(System.Object)">
      <summary>
        <para>Compare Search Result using their index values.</para>
      </summary>
      <param name="other">Another SearchResult to compare.</param>
      <returns>
        <para>Returns true if both SearchResults have the same index.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchResult.GetHashCode">
      <summary>
        <para>Computes the hash code for this SearchResult from its index property.</para>
      </summary>
      <returns>
        <para>HashCode of the SearchResult.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.SearchSelection">
      <summary>
        <para>Provides methods to give readonly access to the current list of selected items in Search.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchSelection.Contains(UnityEditor.Search.SearchItem)">
      <summary>
        <para>Checks if the search item is contained in the current selection.</para>
      </summary>
      <param name="item">Search item to be compared.</param>
      <returns>
        <para>True if the item is contained in the selection.</para>
      </returns>
    </member>
    <member name="P:UnityEditor.Search.SearchSelection.Count">
      <summary>
        <para>The number of items selected.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchSelection.#ctor(System.Collections.Generic.IList`1&lt;System.Int32&gt;,UnityEditor.Search.ISearchList)">
      <summary>
        <para>Creates a new SearchSelection.</para>
      </summary>
      <param name="selection">Current list of selected SearchItem indices.</param>
      <param name="filteredItems">List of SearchItems displayed in Search.</param>
      <param name="items">Filtered items.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchSelection.#ctor(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;)">
      <summary>
        <para>Creates a new SearchSelection.</para>
      </summary>
      <param name="selection">Current list of selected SearchItem indices.</param>
      <param name="filteredItems">List of SearchItems displayed in Search.</param>
      <param name="items">Filtered items.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchSelection.First">
      <summary>
        <para>Gets the first selected item in the selection.</para>
      </summary>
      <returns>
        <para>First selected item in selection. Returns null if no items are selected.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchSelection.GetEnumerator">
      <summary>
        <para>Gets an enumerator on the currently selected SearchItems.</para>
      </summary>
      <returns>
        <para>Enumerator on the currently selected SearchItems.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchSelection.Last">
      <summary>
        <para>Gets the last selected item in the selection.</para>
      </summary>
      <returns>
        <para>Last selected item in selection. Returns null if no items are selected.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchSelection.MaxIndex">
      <summary>
        <para>Highest selected index of any item in the selection.</para>
      </summary>
      <returns>
        <para>Returns the highest selected index.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchSelection.MinIndex">
      <summary>
        <para>Lowest selected index of any item in the selection.</para>
      </summary>
      <returns>
        <para>Returns the lowest selected index.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.SearchSelectorArgs">
      <summary>
        <para>Search selector arguments used when the search selector callback is invoked.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchSelectorArgs.current">
      <summary>
        <para>Current search item for which a value must be selected.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchSelectorAttribute">
      <summary>
        <para>Search selector attribute used to define how a custom value can be selected from a search item.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchSelectorAttribute.cacheable">
      <summary>
        <para>Set the cacheable property if you do not want the search backend to pull cached values from the property database.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchService">
      <summary>
        <para>Principal Search API to initiate searches and fetch results.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchService.CreateContext(System.String)">
      <summary>
        <para>Creates context from a list of search provider IDs.</para>
      </summary>
      <param name="searchText">Search Query.</param>
      <param name="provider">Search provider (This search provider does not need to be active or registered).</param>
      <param name="providerId">Unique search provider ID string (i.e. asset, scene, find, etc.)</param>
      <param name="providerIds">List of search provider IDs.</param>
      <param name="providers">List of search providers.</param>
      <param name="flags">Options defining how the query is performed.</param>
      <returns>
        <para>Returns a new SearchContext.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.CreateContext(System.String,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Creates context from a list of search provider IDs.</para>
      </summary>
      <param name="searchText">Search Query.</param>
      <param name="provider">Search provider (This search provider does not need to be active or registered).</param>
      <param name="providerId">Unique search provider ID string (i.e. asset, scene, find, etc.)</param>
      <param name="providerIds">List of search provider IDs.</param>
      <param name="providers">List of search providers.</param>
      <param name="flags">Options defining how the query is performed.</param>
      <returns>
        <para>Returns a new SearchContext.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.CreateContext(UnityEditor.Search.SearchProvider,System.String)">
      <summary>
        <para>Creates context from a list of search provider IDs.</para>
      </summary>
      <param name="searchText">Search Query.</param>
      <param name="provider">Search provider (This search provider does not need to be active or registered).</param>
      <param name="providerId">Unique search provider ID string (i.e. asset, scene, find, etc.)</param>
      <param name="providerIds">List of search provider IDs.</param>
      <param name="providers">List of search providers.</param>
      <param name="flags">Options defining how the query is performed.</param>
      <returns>
        <para>Returns a new SearchContext.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.CreateContext(System.String,System.String,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Creates context from a list of search provider IDs.</para>
      </summary>
      <param name="searchText">Search Query.</param>
      <param name="provider">Search provider (This search provider does not need to be active or registered).</param>
      <param name="providerId">Unique search provider ID string (i.e. asset, scene, find, etc.)</param>
      <param name="providerIds">List of search provider IDs.</param>
      <param name="providers">List of search providers.</param>
      <param name="flags">Options defining how the query is performed.</param>
      <returns>
        <para>Returns a new SearchContext.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.CreateContext(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Creates context from a list of search provider IDs.</para>
      </summary>
      <param name="searchText">Search Query.</param>
      <param name="provider">Search provider (This search provider does not need to be active or registered).</param>
      <param name="providerId">Unique search provider ID string (i.e. asset, scene, find, etc.)</param>
      <param name="providerIds">List of search provider IDs.</param>
      <param name="providers">List of search providers.</param>
      <param name="flags">Options defining how the query is performed.</param>
      <returns>
        <para>Returns a new SearchContext.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.CreateContext(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchProvider&gt;,System.String,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Creates context from a list of search provider IDs.</para>
      </summary>
      <param name="searchText">Search Query.</param>
      <param name="provider">Search provider (This search provider does not need to be active or registered).</param>
      <param name="providerId">Unique search provider ID string (i.e. asset, scene, find, etc.)</param>
      <param name="providerIds">List of search provider IDs.</param>
      <param name="providers">List of search providers.</param>
      <param name="flags">Options defining how the query is performed.</param>
      <returns>
        <para>Returns a new SearchContext.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.CreateIndex(System.String&amp;,UnityEditor.Search.IndexingOptions&amp;,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.Action`3&lt;System.String,System.String,System.Action&gt;)">
      <summary>
        <para>Create a new search index.</para>
      </summary>
      <param name="name">Unique name of the search index.</param>
      <param name="options">Indexing option set.</param>
      <param name="roots">Search index roots, for example "Assets" to index all Assets under Assets.</param>
      <param name="includes">Exclusive list of assets to be indexed. If this list is empty, everything will be indexed.</param>
      <param name="excludes">Patterns to exclude assets to be indexed under roots.</param>
      <param name="onIndexReady">Callback that gets invoked when the index is created and ready to be used.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchService.EnumerateDatabases">
      <summary>
        <para>Enumerate search databases.</para>
      </summary>
      <returns>
        <para>Search database interfaces.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.GetAction(UnityEditor.Search.SearchProvider,System.String)">
      <summary>
        <para>Returns the search action for a given search provider and search action ID.</para>
      </summary>
      <param name="provider">Search provider to look up.</param>
      <param name="actionId">Unique action ID within the search provider.</param>
      <returns>
        <para>The matching action.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.GetActiveProviders">
      <summary>
        <para>Returns all active providers.</para>
      </summary>
      <returns>
        <para>Enumerate all active providers.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.GetItems(UnityEditor.Search.SearchContext,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Initiates a search and returns all search items matching the search context. Other items can be found later using asynchronous searches.</para>
      </summary>
      <param name="context">The current search context.</param>
      <param name="options">Options defining how the query is performed.</param>
      <returns>
        <para>A list of search items matching the search query.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.GetProvider(System.String)">
      <summary>
        <para>Returns the data of a search provider given its ID.</para>
      </summary>
      <param name="providerId">Unique ID of the search provider.</param>
      <returns>
        <para>The matching search provider.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.IsIndexReady(System.String)">
      <summary>
        <para>Indicates if a search index is ready to be used.</para>
      </summary>
      <param name="name">Unique name of the index. This name usually matches the one displayed in the Search Index Manager or the one used to invoke SearchService.CreateIndex.</param>
      <returns>
        <para>Returns true if the search index is ready to be used.</para>
      </returns>
    </member>
    <member name="P:UnityEditor.Search.SearchService.OrderedProviders">
      <summary>
        <para>Returns the list of search providers sorted by priority.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchService.Providers">
      <summary>
        <para>Returns the list of all search providers (active or not).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchService.Refresh">
      <summary>
        <para>Clears everything and reloads all search providers. Use with care. Useful for unit tests.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchService.RefreshWindows">
      <summary>
        <para>Refresh all currently opened Search windows.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchService.Request(System.String,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Executes a search request that will fetch search results asynchronously.</para>
      </summary>
      <param name="searchText">Search query to be executed.</param>
      <param name="context">Search context used to track asynchronous requests. You need to dispose of the context yourself.</param>
      <param name="options">Options defining how the query is performed.</param>
      <returns>
        <para>Asynchronous list of search items.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.Request(UnityEditor.Search.SearchContext,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Executes a search request that will fetch search results asynchronously.</para>
      </summary>
      <param name="searchText">Search query to be executed.</param>
      <param name="context">Search context used to track asynchronous requests. You need to dispose of the context yourself.</param>
      <param name="options">Options defining how the query is performed.</param>
      <returns>
        <para>Asynchronous list of search items.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.Request(System.String,System.Action`2&lt;UnityEditor.Search.SearchContext,System.Collections.Generic.IList`1&lt;UnityEditor.Search.SearchItem&gt;&gt;,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Executes a search request and calls back the specified function when all results are available.</para>
      </summary>
      <param name="onSearchCompleted">Callback invoked when the search request is completed and all results are available.</param>
      <param name="searchText"></param>
      <param name="options"></param>
      <param name="context"></param>
    </member>
    <member name="M:UnityEditor.Search.SearchService.Request(UnityEditor.Search.SearchContext,System.Action`2&lt;UnityEditor.Search.SearchContext,System.Collections.Generic.IList`1&lt;UnityEditor.Search.SearchItem&gt;&gt;,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Executes a search request and calls back the specified function when all results are available.</para>
      </summary>
      <param name="onSearchCompleted">Callback invoked when the search request is completed and all results are available.</param>
      <param name="searchText"></param>
      <param name="options"></param>
      <param name="context"></param>
    </member>
    <member name="M:UnityEditor.Search.SearchService.Request(System.String,System.Action`2&lt;UnityEditor.Search.SearchContext,System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;&gt;,System.Action`1&lt;UnityEditor.Search.SearchContext&gt;,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Executes a search request and callbacks for every batch of incoming results. It is possible to get duplicate items, so filter the final list if needed.</para>
      </summary>
      <param name="onIncomingItems">Callback invoked everytime a batch of results are found and available.</param>
      <param name="onSearchCompleted">Callback invoked when the search request is completed.</param>
      <param name="searchText"></param>
      <param name="options"></param>
      <param name="context"></param>
    </member>
    <member name="M:UnityEditor.Search.SearchService.Request(UnityEditor.Search.SearchContext,System.Action`2&lt;UnityEditor.Search.SearchContext,System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;&gt;,System.Action`1&lt;UnityEditor.Search.SearchContext&gt;,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Executes a search request and callbacks for every batch of incoming results. It is possible to get duplicate items, so filter the final list if needed.</para>
      </summary>
      <param name="onIncomingItems">Callback invoked everytime a batch of results are found and available.</param>
      <param name="onSearchCompleted">Callback invoked when the search request is completed.</param>
      <param name="searchText"></param>
      <param name="options"></param>
      <param name="context"></param>
    </member>
    <member name="M:UnityEditor.Search.SearchService.SetActive(System.String,System.Boolean)">
      <summary>
        <para>Activates or deactivates a search provider. Call Refresh after this to take effect on the next search.</para>
      </summary>
      <param name="providerId">Search provider ID to activate or deactivate.</param>
      <param name="active">Activation state.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchService.ShowContextual(System.String[])">
      <summary>
        <para>Open the search window using a specific context (activating specific filters).</para>
      </summary>
      <param name="providerIds">Unique IDs of search providers to enable when opening the search view.</param>
      <returns>
        <para>Returns the search view window instance.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.ShowObjectPicker(System.Action`2&lt;UnityEngine.Object,System.Boolean&gt;,System.Action`1&lt;UnityEngine.Object&gt;,System.String,System.String,System.Type,System.Single,System.Single,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Open a Search Picker window for Unity objects.</para>
      </summary>
      <param name="selectHandler">Callback to trigger when a user selects an item.</param>
      <param name="trackingHandler">Callback to trigger when the user is modifying a Search selection (i.e. tracking the currently selected item).</param>
      <param name="searchText">Initial search text.</param>
      <param name="typeName">Type name of the object to select. Can be used to replace filterType.</param>
      <param name="filterType">Type of the object to select.</param>
      <param name="defaultWidth">Initial width of the window.</param>
      <param name="defaultHeight">Initial height of the window.</param>
      <param name="flags">Options defining how the query is performed.</param>
      <returns>
        <para>Returns the search view window instance.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.ShowPicker(UnityEditor.Search.SearchContext,System.Action`2&lt;UnityEditor.Search.SearchItem,System.Boolean&gt;,System.Action`1&lt;UnityEditor.Search.SearchItem&gt;,System.Func`2&lt;UnityEditor.Search.SearchItem,System.Boolean&gt;,System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;,System.String,System.Single,System.Single,System.Single,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Open a search item picker window.</para>
      </summary>
      <param name="context">Search context to start with.</param>
      <param name="selectHandler">Callback invoked when an item is selected.</param>
      <param name="trackingHandler">Callback invoked when an item is clicked without it being the final selection.</param>
      <param name="filterHandler">Callback invoked to filter search item results to display.</param>
      <param name="title">Topic to search.</param>
      <param name="itemSize">Initial result view item size.</param>
      <param name="defaultWidth">Initial width of the window.</param>
      <param name="defaultHeight">Initial height of the window.</param>
      <param name="subset">Initial set of items to be searched.</param>
      <param name="flags">Options defining how the query is performed.</param>
      <returns>
        <para>Creates a new search window.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.ShowPicker(UnityEditor.Search.SearchViewState)">
      <summary>
        <para>Open a Search Picker window.</para>
      </summary>
      <param name="viewState">Search view state used to open the Search Picker window.</param>
      <returns>
        <para>Creates a new search window.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.ShowWindow(UnityEditor.Search.SearchContext,System.String,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <para>Creates a new search window.</para>
      </summary>
      <param name="context">Search context to start with.</param>
      <param name="topic">Topic to search.</param>
      <param name="saveFilters">True if user search provider filters should be saved for next search session.</param>
      <param name="reuseExisting">True if the active providers should be saved for the next session.</param>
      <param name="multiselect">True if the search supports multi-selection.</param>
      <param name="defaultWidth">Initial width of the window.</param>
      <param name="defaultHeight">Initial height of the window.</param>
      <param name="dockable">If true, creates a dockable search window (that is closed when an item is activated). If false, it creates a dropdown (borderless, undockable and unmovable) version of the search window.</param>
      <returns>
        <para>Returns the search view window instance.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.ShowWindow(UnityEditor.Search.SearchViewState)">
      <summary>
        <para>Creates a new search window.</para>
      </summary>
      <param name="viewState">Search view state used to open the Search window.</param>
      <returns>
        <para>Returns the search view window instance.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.SearchSettings">
      <summary>
        <para>Search settings give access to the user global preferences regarding Search.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchSettings.searchItemFavorites">
      <summary>
        <para>Returns a list of all item IDs that are marked as favorite by the user for in the current project.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchSettings.AddItemFavorite(UnityEditor.Search.SearchItem)">
      <summary>
        <para>Mark a search item as a favorite.</para>
      </summary>
      <param name="item">Item to be marked as a favorite.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchSettings.RemoveItemFavorite(UnityEditor.Search.SearchItem)">
      <summary>
        <para>Remove an item from the favorites.</para>
      </summary>
      <param name="item">Item to be removed from favorites.</param>
    </member>
    <member name="T:UnityEditor.Search.SearchTable">
      <summary>
        <para>A search table configuration is used to define the columns when search results are displayed in table view.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchTable.columns">
      <summary>
        <para>Search columns displayed in table view.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchTable.id">
      <summary>
        <para>Unique id of the search table used for persistance.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchTable.name">
      <summary>
        <para>Display name of the search table used for serialization.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchTable.Clone(System.String)">
      <summary>
        <para>Creates a copy of the search table configuration.</para>
      </summary>
      <param name="newName">Name of the new table configuration.</param>
      <returns>
        <para>The newly created search table, ready to be saved.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchTable.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchColumn&gt;)">
      <summary>
        <para>Creates a new search table configuration.</para>
      </summary>
      <param name="id">Unique id, usually a GUID.</param>
      <param name="name">Name of the table.</param>
      <param name="columnModels">Set of initial columns.</param>
      <param name="other">Table setup to copy columns from.</param>
      <param name="newName">New name of the table if copied from an initial table configuration.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchTable.#ctor(System.String,System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchColumn&gt;)">
      <summary>
        <para>Creates a new search table configuration.</para>
      </summary>
      <param name="id">Unique id, usually a GUID.</param>
      <param name="name">Name of the table.</param>
      <param name="columnModels">Set of initial columns.</param>
      <param name="other">Table setup to copy columns from.</param>
      <param name="newName">New name of the table if copied from an initial table configuration.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchTable.#ctor(UnityEditor.Search.SearchTable,System.String)">
      <summary>
        <para>Creates a new search table configuration.</para>
      </summary>
      <param name="id">Unique id, usually a GUID.</param>
      <param name="name">Name of the table.</param>
      <param name="columnModels">Set of initial columns.</param>
      <param name="other">Table setup to copy columns from.</param>
      <param name="newName">New name of the table if copied from an initial table configuration.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchTable.InitFunctors">
      <summary>
        <para>Initialize all search columns functors based on their format provider.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchTable.LoadFromFile(System.String)">
      <summary>
        <para>Load a search table configuraiton from a JSON file.</para>
      </summary>
      <param name="stcPath">Absolute path of the JSON file on disk.</param>
      <returns>
        <para>Loaded search table configuration.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.SearchUtils">
      <summary>
        <para>Provides various utility functions that are used by SearchProvider.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchUtils.entrySeparators">
      <summary>
        <para>Separators used to split an entry into indexable tokens.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.CreateGroupProvider(UnityEditor.Search.SearchProvider,System.String,System.Int32,System.Boolean)">
      <summary>
        <para>Copy of a search provider to create a new group copy.</para>
      </summary>
      <param name="templateProvider">Search provider template to copy.</param>
      <param name="groupId">New group id. This id is also used as the display name for the group tab if displayed in the Search.ISearchView.</param>
      <param name="groupPriority">Priority used to order the group tab in the Search.ISearchView.</param>
      <param name="cacheProvider">Ask the system to cache the provider in case the function gets called with the same ID later.</param>
      <returns>
        <para>A new search provider that can be used temporarily for a given search session.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.CreateQuery(System.String&amp;,UnityEditor.Search.SearchContext,UnityEditor.Search.SearchTable)">
      <summary>
        <para>Creates a new search query.</para>
      </summary>
      <param name="name">Name of the query.</param>
      <param name="context">Search context used to execute the query.</param>
      <param name="tableConfig">Search table used to populate the table view. Can be null.</param>
      <returns>
        <para>Returns a new search query object.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.CreateSceneResult(UnityEditor.Search.SearchContext,UnityEditor.Search.SearchProvider,UnityEngine.GameObject)">
      <summary>
        <para>Creates a search item compatible with the scene provider.</para>
      </summary>
      <param name="context">Search context used to yield this item.</param>
      <param name="sceneProvider">Source search provider. Can be the scene provider obtained with SearchService.GetProvider using the id "scene".</param>
      <param name="go">Scene game object instance to create the new search item.</param>
      <returns>
        <para>Scene search item that can be yielded by your custom provider.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.EnumerateAllQueries">
      <summary>
        <para>Enumerate all user and project search queries.</para>
      </summary>
      <returns>
        <para>Search queries.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.FetchGameObjects(UnityEngine.SceneManagement.Scene)">
      <summary>
        <para>Utility function to fetch all the game objects in a particular scene.</para>
      </summary>
      <param name="scene">Scene to get objects from.</param>
      <returns>
        <para>The array of game objects in the scene.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.FetchGameObjects">
      <summary>
        <para>Utility function to fetch all the game objects in a particular scene.</para>
      </summary>
      <param name="scene">Scene to get objects from.</param>
      <returns>
        <para>The array of game objects in the scene.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.FindQuery(System.String)">
      <summary>
        <para>Find a given search query given its GUID.</para>
      </summary>
      <param name="guid">GUID of the search query.</param>
      <returns>
        <para>Search query. Null if the system found no match.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.FindShiftLeftVariations(System.String)">
      <summary>
        <para>Extract all variations on a word. As an example: the word hello would have the following variations: h, he, hel, hell, hello.</para>
      </summary>
      <param name="word">Word to extract variations from.</param>
      <returns>
        <para>List of variations for a word.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.FormatBytes(System.Int64)">
      <summary>
        <para>Formats a number into a file size in bytes string.</para>
      </summary>
      <param name="byteCount">Byte count.</param>
      <returns>
        <para>Formatted string.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.FormatCount(System.UInt64)">
      <summary>
        <para>Formats a number into a shorten number string.</para>
      </summary>
      <param name="count">Number to be formatted.</param>
      <returns>
        <para>Formatted string.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.FrameAssetFromPath(System.String)">
      <summary>
        <para>Ping an asset in the project browser.</para>
      </summary>
      <param name="path">Asset path.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.GetAssetPath(UnityEditor.Search.SearchItem&amp;)">
      <summary>
        <para>Returns the asset path of a search item if any.</para>
      </summary>
      <param name="item">Search item.</param>
      <returns>
        <para>Asset path of the item or null if none can be found.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.GetAssetPreviewFromPath(System.String,UnityEditor.Search.FetchPreviewOptions)">
      <summary>
        <para>Returns a preview texture to be used in the search view.</para>
      </summary>
      <param name="path">Asset path.</param>
      <param name="previewOptions">Additional preview options.</param>
      <param name="previewSize">Request size of the preview. This is useful for the DisplayMode.Grid view.</param>
      <returns>
        <para>Preview texture.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.GetAssetPreviewFromPath(System.String,UnityEngine.Vector2,UnityEditor.Search.FetchPreviewOptions)">
      <summary>
        <para>Returns a preview texture to be used in the search view.</para>
      </summary>
      <param name="path">Asset path.</param>
      <param name="previewOptions">Additional preview options.</param>
      <param name="previewSize">Request size of the preview. This is useful for the DisplayMode.Grid view.</param>
      <returns>
        <para>Preview texture.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.GetAssetThumbnailFromPath(System.String)">
      <summary>
        <para>Returns a thumbnail texture to be used in the search view.</para>
      </summary>
      <param name="path">Asset path.</param>
      <returns>
        <para>Thumbnail texture.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.GetHierarchyAssetPath(UnityEngine.GameObject,System.Boolean)">
      <summary>
        <para>Get the path of the scene (or prefab) containing a GameObject.</para>
      </summary>
      <param name="gameObject">GameObject to find the scene path.</param>
      <param name="prefabOnly">If true, will return a path only if the GameObject is a prefab.</param>
      <returns>
        <para>Returns the path of a scene or prefab.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.GetHierarchyPath(UnityEngine.GameObject,System.Boolean)">
      <summary>
        <para>Get the hierarchy path of a GameObject including the scene name if includeScene is set to true.</para>
      </summary>
      <param name="gameObject">GameObject to extract a path from.</param>
      <param name="includeScene">If true, will append the scene name to the path.</param>
      <returns>
        <para>Returns the path of a GameObject.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.GetMainAssetInstanceID(System.String)">
      <summary>
        <para>Returns an asset instance ID.</para>
      </summary>
      <param name="assetPath">Asset path.</param>
      <returns>
        <para>Instance ID.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.GetMainWindowCenteredPosition(UnityEngine.Vector2)">
      <summary>
        <para>Returns a UnityEngine.Rect to center a window on the main Unity Editor window.</para>
      </summary>
      <param name="size">Size of the window to be centered.</param>
      <returns>
        <para>Centered position.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.GetObjectPath(UnityEngine.Object)">
      <summary>
        <para>Get the path of a Unity Object. If it is a GameObject or a Component it is the &lt;see cref="SearchUtils.GetTransformPath(Transform)"/&gt;. Else it is the asset name.</para>
      </summary>
      <param name="obj">Object to obtain a path from.</param>
      <returns>
        <para>Returns the path of an object.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.GetSceneObjectPreview(UnityEngine.GameObject,UnityEngine.Vector2,UnityEditor.Search.FetchPreviewOptions,UnityEngine.Texture2D)">
      <summary>
        <para>Returns a scene object preview to be used in the search view.</para>
      </summary>
      <param name="obj">Scene object instance.</param>
      <param name="size">Preview size.</param>
      <param name="options">Preview options.</param>
      <param name="thumbnail">Any existing thumbnail in case we cannot obtain a scene object preview.</param>
      <returns>
        <para>Object preview or thumbnail fallback.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.GetTransformPath(UnityEngine.Transform)">
      <summary>
        <para>Format the pretty name of a Transform component by appending all the parent hierarchy names.</para>
      </summary>
      <param name="tform">Transform to extract name from.</param>
      <returns>
        <para>Returns a transform name using "/" as hierarchy separator.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.GetTypeIcon(System.Type&amp;)">
      <summary>
        <para>Returns a thumbnail for a given type that can be displayed in a search view. See SearchProvider.fetchThumbnail.</para>
      </summary>
      <param name="type">Type.</param>
      <returns>
        <para>Icon for that type.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.MatchSearchGroups(UnityEditor.Search.SearchContext,System.String,System.Boolean)">
      <summary>
        <para>Helper function to match a string against the SearchContext. This will try to match the search query against each token of content (similar to the AddComponent menu workflow).</para>
      </summary>
      <param name="context">Search context containing the searchQuery that search tries to match.</param>
      <param name="content">String content that is tokenized and used to match the search query.</param>
      <param name="ignoreCase">Perform matching while ignoring letter casing.</param>
      <returns>
        <para>If a match has occurred.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.OpenQuery(UnityEditor.Search.ISearchQuery,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Open a search view for a given query.</para>
      </summary>
      <param name="sq">Search query.</param>
      <param name="flags">Additional flags to execute the query.</param>
      <returns>
        <para>Search view if the query was successfully executed.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.PingAsset(System.String)">
      <summary>
        <para>Ping an object.</para>
      </summary>
      <param name="assetPath">Asset path.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.SelectMultipleItems(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;,System.Boolean)">
      <summary>
        <para>Select and ping multiple objects in the Project Browser.</para>
      </summary>
      <param name="items">Search Items to select and ping.</param>
      <param name="focusProjectBrowser">If true, will focus the project browser before pinging the objects.</param>
      <param name="pingSelection">If true, will ping the selected objects.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.SelectMultipleItems(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;,System.Boolean,System.Boolean)">
      <summary>
        <para>Select and ping multiple objects in the Project Browser.</para>
      </summary>
      <param name="items">Search Items to select and ping.</param>
      <param name="focusProjectBrowser">If true, will focus the project browser before pinging the objects.</param>
      <param name="pingSelection">If true, will ping the selected objects.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.ShowColumnEditor(UnityEditor.IMGUI.Controls.MultiColumnHeaderState/Column,System.Action`1&lt;UnityEditor.IMGUI.Controls.MultiColumnHeaderState/Column&gt;)">
      <summary>
        <para>Opens an auxiliary column editor window to allow the user to edit search column properties.</para>
      </summary>
      <param name="column">Search column.</param>
      <param name="editHandler">Handler to be notified if the column was edited.</param>
      <returns>
        <para>Instance of the editor window. This can be used to manually close the opened window.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.ShowColumnSelector(System.Action`2&lt;System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchColumn&gt;,System.Int32&gt;,System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchColumn&gt;,UnityEngine.Vector2,System.Int32)">
      <summary>
        <para>Opens an auxiliary column selector window to allow the user to search for a column to be added.</para>
      </summary>
      <param name="columnsAddedHandler">Select handler invoked when columns are selected.</param>
      <param name="columns">A set of existing columns. This set can help populate the column selector.</param>
      <param name="mousePosition">Mouse position when the window needs to be opened.</param>
      <param name="activeColumnIndex">Any active column index that we pass back to the select handler.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.ShowIconPicker(System.Action`2&lt;UnityEngine.Texture2D,System.Boolean&gt;)">
      <summary>
        <para>Opens a search picker to select an icon.</para>
      </summary>
      <param name="iconSelectedHandler">Select handler invoked if the user selects an icon.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.SplitCamelCase(System.String)">
      <summary>
        <para>Tokenize a string each capital letter.</para>
      </summary>
      <param name="source">Word to split according to camelCase.</param>
      <returns>
        <para>Camel case tokens.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.SplitEntryComponents(System.String,System.Char[])">
      <summary>
        <para>Split an entry according to a specified list of separators.</para>
      </summary>
      <param name="entry">Entry to split.</param>
      <param name="entrySeparators">List of separators that indicate split points.</param>
      <returns>
        <para>Returns list of tokens in lowercase.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.SplitFileEntryComponents(System.String,System.Char[]&amp;)">
      <summary>
        <para>Split a file entry according to a list of separators and find all the variations on the entry name.</para>
      </summary>
      <param name="path">Path to tokenize.</param>
      <param name="entrySeparators">Entry separators used to tokenize the path.</param>
      <returns>
        <para>Returns list of tokens and variations in lowercase.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.StartDrag(UnityEngine.Object[],System.String)">
      <summary>
        <para>Utility function used to initiate a drag operation from a search view.</para>
      </summary>
      <param name="label">Drag label.</param>
      <param name="objects">Objects being dragged.</param>
      <param name="paths">Asset paths being dragged.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.StartDrag(UnityEngine.Object[],System.String[],System.String)">
      <summary>
        <para>Utility function used to initiate a drag operation from a search view.</para>
      </summary>
      <param name="label">Drag label.</param>
      <param name="objects">Objects being dragged.</param>
      <param name="paths">Asset paths being dragged.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.TryParse(System.String,T&amp;)">
      <summary>
        <para>Try to parse an expression into a number.</para>
      </summary>
      <param name="expression">Expression to be parsed.</param>
      <param name="result">Type of the numeric value.</param>
      <returns>
        <para>Returns true if the parsing succeed.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.SearchValue">
      <summary>
        <para>Search value is used to extend a query engine with custom type parsers and filters to search results by value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchValue.boolean">
      <summary>
        <para>Boolean value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.floatNumber">
      <summary>
        <para>Number value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.invalid">
      <summary>
        <para>Represent an invalid search value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.number">
      <summary>
        <para>Number value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.text">
      <summary>
        <para>Text representation of the value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.type">
      <summary>
        <para>Indicates the concrete type of the search value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchValue.valid">
      <summary>
        <para>Indicates if the search value is valid.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchValue.SetupEngine(UnityEditor.Search.QueryEngine`1&lt;T&gt;)">
      <summary>
        <para>Extended a query engine to work with dynamic search values.</para>
      </summary>
      <param name="queryEngine">Query engine to add extended search value filters and parsers.</param>
    </member>
    <member name="T:UnityEditor.Search.SearchValue.ValueType">
      <summary>
        <para>Search value supported types.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Bool">
      <summary>
        <para>Indicates that the search value is a Boolean value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Color">
      <summary>
        <para>Indicates that the search value is a UnityEngine.Color value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Enum">
      <summary>
        <para>Indicates that the search value is an enum value holding the text and integer representation of the Enum.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Nil">
      <summary>
        <para>Indicates that the search value is null.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Number">
      <summary>
        <para>Indicates that the search value is a numeric value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Object">
      <summary>
        <para>Indicates that the search value is an UnityEngine.Object.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Text">
      <summary>
        <para>Indicates that the search value is a text value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Vector2">
      <summary>
        <para>Indicates that the search value hold a UnityEngine.Vector2 value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Vector3">
      <summary>
        <para>Indicates that the search value hold a UnityEngine.Vector3 value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Vector4">
      <summary>
        <para>Indicates that the search value hold a UnityEngine.Vector4 value.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchViewState">
      <summary>
        <para>Search view state is used to create new Search windows. See SearchService.ShowWindow.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchViewState.context">
      <summary>
        <para>Search context used to populate the search view.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchViewState.defaultSize">
      <summary>
        <para>Determine the default search view size when it first opens.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchViewState.excludeClearItem">
      <summary>
        <para>Set to true to hide the None item when in picker mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchViewState.flags">
      <summary>
        <para>Various search view options.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchViewState.group">
      <summary>
        <para>Indicates the group or tab to be selected when the Search window opens.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchViewState.groupChanged">
      <summary>
        <para>External handler used to be notified when the user changes the current group/tab.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchViewState.hasQueryPanel">
      <summary>
        <para>Is the SearchViewState allows for the left side Query panel to be shown.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchViewState.hasWindowSize">
      <summary>
        <para>Determines if the search view was opened with a predefined size. If false, then it means the search view was opened the previous window size it was last closed with.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchViewState.hideAllGroup">
      <summary>
        <para>Determine if the All group/tab should be hidden.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchViewState.hideTabs">
      <summary>
        <para>Indicates if the search tabs (group providers) should be hidden or shown.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchViewState.ignoreSaveSearches">
      <summary>
        <para>If true, the search view will not load previous saved searches.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchViewState.isQueryPanelVisible">
      <summary>
        <para>Is the Left side query panel shown?</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchViewState.itemSize">
      <summary>
        <para>Indicates the item size to be used when the Search window opens.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchViewState.position">
      <summary>
        <para>If defined, indicates the location of the new Search window when it opens.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchViewState.queryBuilderEnabled">
      <summary>
        <para>If true, the search view will be opened in builder mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchViewState.selectHandler">
      <summary>
        <para>External handler triggered when the user has selected an item in picker mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchViewState.sessionId">
      <summary>
        <para>Unique session ID generated by the system each time a search view is opened.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchViewState.tableConfig">
      <summary>
        <para>Access the search table configuration used if in table view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchViewState.text">
      <summary>
        <para>Text used to initialize the search view.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchViewState.title">
      <summary>
        <para>Indicates the search topic title.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchViewState.trackingHandler">
      <summary>
        <para>External handler triggered each time the user clicks on an item in the search view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchViewState.windowSize">
      <summary>
        <para>Determine the size the search view was opened with.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchViewState.windowTitle">
      <summary>
        <para>If defined, this title will be used to open a new search view and sets the EditorWindow._titleContent.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchViewState.CreatePickerState(System.String,UnityEditor.Search.SearchContext,System.Action`2&lt;UnityEngine.Object,System.Boolean&gt;,System.Action`1&lt;UnityEngine.Object&gt;,System.String,System.Type,UnityEngine.Search.SearchViewFlags)">
      <summary>
        <para>Create a SearchViewState specially setup to show an Object Picker.</para>
      </summary>
      <param name="title">Title of the picker window.</param>
      <param name="context">SearchContext used to setup whcih SearchProvider and initial query are setup for this Picker.</param>
      <param name="selectObjectHandler">Selector Callback.</param>
      <param name="trackingObjectHandler">Callbacks triggeeds when the select selects an item.</param>
      <param name="typeName">Name of the type of assets or components we want to pick.</param>
      <param name="filterType">Type of the items we want to pick.</param>
      <param name="flags">Flags specifying how the picker view should be displayed.</param>
      <param name="selectHandler">Selector Callback.</param>
      <param name="trackingHandler">Callbacks triggeeds when the select selects an item.</param>
      <param name="filterHandler">Filtering calback.</param>
      <returns>
        <para>Returns a view state use to open an Object picker.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchViewState.CreatePickerState(System.String,UnityEditor.Search.SearchContext,System.Action`2&lt;UnityEditor.Search.SearchItem,System.Boolean&gt;,System.Action`1&lt;UnityEditor.Search.SearchItem&gt;,System.Func`2&lt;UnityEditor.Search.SearchItem,System.Boolean&gt;,UnityEngine.Search.SearchViewFlags)">
      <summary>
        <para>Create a SearchViewState specially setup to show an Object Picker.</para>
      </summary>
      <param name="title">Title of the picker window.</param>
      <param name="context">SearchContext used to setup whcih SearchProvider and initial query are setup for this Picker.</param>
      <param name="selectObjectHandler">Selector Callback.</param>
      <param name="trackingObjectHandler">Callbacks triggeeds when the select selects an item.</param>
      <param name="typeName">Name of the type of assets or components we want to pick.</param>
      <param name="filterType">Type of the items we want to pick.</param>
      <param name="flags">Flags specifying how the picker view should be displayed.</param>
      <param name="selectHandler">Selector Callback.</param>
      <param name="trackingHandler">Callbacks triggeeds when the select selects an item.</param>
      <param name="filterHandler">Filtering calback.</param>
      <returns>
        <para>Returns a view state use to open an Object picker.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchViewState.#ctor(UnityEditor.Search.SearchContext)">
      <summary>
        <para>Create search view flags used to create a new Search window.</para>
      </summary>
      <param name="context">Initial search context.</param>
      <param name="flags">Initial search view flags.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchViewState.#ctor(UnityEditor.Search.SearchContext,UnityEngine.Search.SearchViewFlags)">
      <summary>
        <para>Create search view flags used to create a new Search window.</para>
      </summary>
      <param name="context">Initial search context.</param>
      <param name="flags">Initial search view flags.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchViewState.#ctor(UnityEditor.Search.SearchContext,UnityEditor.Search.SearchTable,UnityEngine.Search.SearchViewFlags)">
      <summary>
        <para>Creates a search view that will be opened in table view.</para>
      </summary>
      <param name="context">Initial search context.</param>
      <param name="tableConfig">Initial search table configuration.</param>
      <param name="flags">Initial search view flags.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchViewState.#ctor(UnityEditor.Search.SearchContext,System.Action`2&lt;UnityEngine.Object,System.Boolean&gt;,System.Action`1&lt;UnityEngine.Object&gt;,System.String,System.Type)">
      <summary>
        <para>Creates a search view state that will be used to open a search picker using SearchService.ShowPicker.</para>
      </summary>
      <param name="context">Initial search context.</param>
      <param name="selectObjectHandler">Handler executed when the user has selected an object.</param>
      <param name="trackingObjectHandler">Handler executed when the user clicks on an item in the search view.</param>
      <param name="typeName">String type name used to filter items in the search results. This parameter can be defined if the concrete Type cannot be accessed.</param>
      <param name="filterType">Concrete type used to filter items in the search results.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchViewState.#ctor(UnityEditor.Search.SearchContext,System.Action`2&lt;UnityEditor.Search.SearchItem,System.Boolean&gt;)">
      <summary>
        <para>Creates a search view state that will be used to open a search picker using SearchService.ShowPicker.</para>
      </summary>
      <param name="context">Initial search context.</param>
      <param name="selectHandler">Handler executed when the user has selected an search result.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchViewState.GetProviderIds">
      <summary>
        <para>Returns all the search provider ids in the current search context.</para>
      </summary>
      <returns>
        <para>All unique search provider ids.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchViewState.GetProviderTypes">
      <summary>
        <para>Returns all the search provider types in the current search context.</para>
      </summary>
      <returns>
        <para>All search provider types.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchViewState.HasFlag(UnityEngine.Search.SearchViewFlags)">
      <summary>
        <para>Checks if the search view was defined with specific set of flags.</para>
      </summary>
      <param name="f">Search view flags to be checked.</param>
      <param name="flags"></param>
      <returns>
        <para>Returns true if the search view flags are defined in the current search view state.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchViewState.LoadDefaults">
      <summary>
        <para>Returns a newly created default search view state.</para>
      </summary>
      <returns>
        <para>New search view state that can be used to open a new search window.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchViewState.ToString">
      <summary>
        <para>Convert SearchViewState to a string.</para>
      </summary>
      <returns>
        <para>String representation of a SearchViewState.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.ShowDetailsOptions">
      <summary>
        <para>Defines what details are shown in the preview inspector panel for the search view.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ShowDetailsOptions.Actions">
      <summary>
        <para>Shows selected item possible actions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ShowDetailsOptions.Default">
      <summary>
        <para>Default set of options used when SearchProvider.showDetails is set to true.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ShowDetailsOptions.DefaultGroup">
      <summary>
        <para>Indicates that the provider will always be displayed as a group (tab) even if the result set is empty.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ShowDetailsOptions.Description">
      <summary>
        <para>Show an extended item description.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ShowDetailsOptions.Inspector">
      <summary>
        <para>Show an embedded inspector for the selected object.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ShowDetailsOptions.InspectorWithoutHeader">
      <summary>
        <para>Show an embedded inspector for the selected object. Won't show the editor header. </para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ShowDetailsOptions.ListView">
      <summary>
        <para>Indicates that this search provider wants to display its items in a list view if possible.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ShowDetailsOptions.None">
      <summary>
        <para>No options are defined.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ShowDetailsOptions.Preview">
      <summary>
        <para>Show a large preview.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.StringView">
      <summary>
        <para>Structure that holds a view on a string, with a specified range of [startIndex, endIndex[.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.StringView.baseString">
      <summary>
        <para>The base string which this Search.StringView|StringView references.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.StringView.empty">
      <summary>
        <para>An empty Search.StringView|StringView.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.StringView.endIndex">
      <summary>
        <para>The end index.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.StringView.length">
      <summary>
        <para>The length of this Search.StringView|StringView.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.StringView.nil">
      <summary>
        <para>A null Search.StringView|StringView.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.StringView.startIndex">
      <summary>
        <para>The start index.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.StringView.valid">
      <summary>
        <para>Boolean indicating if the Search.StringView|StringView is valid.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.StringView.Contains(System.Char,System.StringComparison)">
      <summary>
        <para>Checks if a character is contained in the Search.StringView|StringView.</para>
      </summary>
      <param name="c">A character.</param>
      <param name="ordinal">A string comparison option.</param>
      <returns>
        <para>True if the character is found, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.StringView.Contains(System.String,System.StringComparison)">
      <summary>
        <para>Checks if a string is contained in the Search.StringView|StringView.</para>
      </summary>
      <param name="s">A string.</param>
      <param name="ordinal">A string comparison option.</param>
      <returns>
        <para>True if the string is found, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.StringView.Contains(UnityEditor.Search.StringView,System.StringComparison)">
      <summary>
        <para>Checks if a Search.StringView|StringView is contained in the Search.StringView|StringView.</para>
      </summary>
      <param name="s">A Search.StringView|StringView.</param>
      <param name="ordinal">A string comparison option.</param>
      <returns>
        <para>True if the Search.StringView|StringView is found, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.StringView.#ctor(System.String)">
      <summary>
        <para>Constructs a Search.StringView|StringView over an entire string.</para>
      </summary>
      <param name="baseString">The base string.</param>
    </member>
    <member name="M:UnityEditor.Search.StringView.#ctor(System.String,System.Int32)">
      <summary>
        <para>Constructs a Search.StringView|StringView from a string, starting at index startIndex.</para>
      </summary>
      <param name="baseString">The base string.</param>
      <param name="startIndex">The starting index of the view.</param>
    </member>
    <member name="M:UnityEditor.Search.StringView.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Constructs a Search.StringView|StringView from a string, starting at index startIndex and ending at, but not including, index endIndex.</para>
      </summary>
      <param name="baseString">The base string.</param>
      <param name="startIndex">The starting index of the view.</param>
      <param name="endIndex">The exclusive ending index of the view.</param>
    </member>
    <member name="M:UnityEditor.Search.StringView.EndsWith(System.Char,System.StringComparison)">
      <summary>
        <para>Checks if the Search.StringView|StringView ends with the character c.</para>
      </summary>
      <param name="c">A character.</param>
      <param name="sc">A string comparison option.</param>
      <returns>
        <para>True if the Search.StringView|StringView ends with c, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.StringView.EndsWith(System.String,System.StringComparison)">
      <summary>
        <para>Checks if the Search.StringView|StringView ends with the string v.</para>
      </summary>
      <param name="v">A string.</param>
      <param name="sc">A string comparison option.</param>
      <returns>
        <para>True if the Search.StringView|StringView ends with v, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.StringView.Equals(System.Object)">
      <summary>
        <para>Checks if the Search.StringView|StringView is equal to the object.</para>
      </summary>
      <param name="other">An object.</param>
      <returns>
        <para>True if they are equal, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.StringView.Equals(System.String,System.StringComparison)">
      <summary>
        <para>Checks if the Search.StringView|StringView is equal to the string.</para>
      </summary>
      <param name="other">A string.</param>
      <param name="comparisonOptions">A string comparison option.</param>
      <returns>
        <para>True if they are equal, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.StringView.Equals(UnityEditor.Search.StringView,System.StringComparison)">
      <summary>
        <para>Checks if the Search.StringView|StringView is equal to another Search.StringView|StringView.</para>
      </summary>
      <param name="other">A Search.StringView|StringView.</param>
      <param name="comparisonOptions">A string comparison option.</param>
      <returns>
        <para>True if they are equal, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.StringView.Equals(UnityEditor.Search.StringView)">
      <summary>
        <para>Checks if the Search.StringView|StringView is equal to another Search.StringView|StringView.</para>
      </summary>
      <param name="other">A Search.StringView|StringView.</param>
      <returns>
        <para>True if they are equal, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.StringView.GetEnumerator">
      <summary>
        <para>Gets a character enumerator over this Search.StringView|StringView.</para>
      </summary>
      <returns>
        <para>A character enumerator over this Search.StringView|StringView.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.StringView.GetHashCode">
      <summary>
        <para>Gets the hashcode of this Search.StringView|StringView.</para>
      </summary>
      <returns>
        <para>The hashcode.</para>
      </returns>
    </member>
    <member name="?:UnityEditor.Search.StringView.implop_bool(stringView)(UnityEditor.Search.StringView)">
      <summary>
        <para>Implicit boolean conversion operator.</para>
      </summary>
      <param name="sv">A Search.StringView|StringView.</param>
    </member>
    <member name="M:UnityEditor.Search.StringView.IndexOf(UnityEditor.Search.StringView,System.StringComparison)">
      <summary>
        <para>Returns the index of the first occurence of another Search.StringView|StringView within this one.</para>
      </summary>
      <param name="other">A Search.StringView|StringView.</param>
      <param name="sc">A string comparision option.</param>
      <returns>
        <para>The first index where the Search.StringView|StringView is found, otherwise -1.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.StringView.IndexOf(System.String,System.StringComparison)">
      <summary>
        <para>Returns the index of the first occurence of a string within the Search.StringView|StringView.</para>
      </summary>
      <param name="other">A string.</param>
      <param name="sc">A string comparision option.</param>
      <returns>
        <para>The first index where the string is found, otherwise -1.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.StringView.IndexOf(System.Char,System.StringComparison)">
      <summary>
        <para>Returns the index of the first occurence of a character within the Search.StringView|StringView.</para>
      </summary>
      <param name="other">A character.</param>
      <param name="sc">A string comparision option.</param>
      <returns>
        <para>The first index where the character is found, otherwise -1.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.StringView.LastIndexOf(UnityEditor.Search.StringView,System.StringComparison)">
      <summary>
        <para>Returns the index of the last occurence of another Search.StringView|StringView within this one.</para>
      </summary>
      <param name="other">A Search.StringView|StringView.</param>
      <param name="sc">A string comparision option.</param>
      <returns>
        <para>The last index where the Search.StringView|StringView is found, otherwise -1.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.StringView.LastIndexOf(System.String,System.StringComparison)">
      <summary>
        <para>Returns the index of the last occurence of a string within the Search.StringView|StringView.</para>
      </summary>
      <param name="other">A string.</param>
      <param name="sc">A string comparision option.</param>
      <returns>
        <para>The last index where the string is found, otherwise -1.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.StringView.LastIndexOf(System.Char,System.StringComparison)">
      <summary>
        <para>Returns the index of the last occurence of a character within the Search.StringView|StringView.</para>
      </summary>
      <param name="other">A character.</param>
      <param name="sc">A string comparision option.</param>
      <returns>
        <para>The last index where the character is found, otherwise -1.</para>
      </returns>
    </member>
    <member name="?:UnityEditor.Search.StringView.op_Equal(UnityEditor.Search.StringView,UnityEditor.Search.StringView)">
      <summary>
        <para>The equals operator.</para>
      </summary>
      <param name="lhs">A Search.StringView|StringView.</param>
      <param name="rhs">A Search.StringView|StringView.</param>
    </member>
    <member name="?:UnityEditor.Search.StringView.op_Equal(UnityEditor.Search.StringView,System.String)">
      <summary>
        <para>The equals operator.</para>
      </summary>
      <param name="lhs">A Search.StringView|StringView.</param>
      <param name="rhs">A string.</param>
    </member>
    <member name="?:UnityEditor.Search.StringView.op_Equal(System.String,UnityEditor.Search.StringView)">
      <summary>
        <para>The equals operator.</para>
      </summary>
      <param name="lhs">A string.</param>
      <param name="rhs">A Search.StringView|StringView.</param>
    </member>
    <member name="?:UnityEditor.Search.StringView.op_NotEqual(UnityEditor.Search.StringView,UnityEditor.Search.StringView)">
      <summary>
        <para>The not equals operator.</para>
      </summary>
      <param name="lhs">A Search.StringView|StringView.</param>
      <param name="rhs">A Search.StringView|StringView.</param>
    </member>
    <member name="?:UnityEditor.Search.StringView.op_NotEqual(UnityEditor.Search.StringView,System.String)">
      <summary>
        <para>The not equals operator.</para>
      </summary>
      <param name="lhs">A Search.StringView|StringView.</param>
      <param name="rhs">A string.</param>
    </member>
    <member name="?:UnityEditor.Search.StringView.op_NotEqual(System.String,UnityEditor.Search.StringView)">
      <summary>
        <para>The not equals operator.</para>
      </summary>
      <param name="lhs">A string.</param>
      <param name="rhs">A Search.StringView|StringView.</param>
    </member>
    <member name="M:UnityEditor.Search.StringView.StartsWith(System.Char,System.StringComparison)">
      <summary>
        <para>Checks if the Search.StringView|StringView starts with the character c.</para>
      </summary>
      <param name="c">A character.</param>
      <param name="stringComparison">A string comparison option.</param>
      <returns>
        <para>True if the Search.StringView|StringView starts with c, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.StringView.StartsWith(System.String,System.StringComparison)">
      <summary>
        <para>Checks if the Search.StringView|StringView starts with the string v.</para>
      </summary>
      <param name="v">A string.</param>
      <param name="sc">A string comparison option.</param>
      <returns>
        <para>True if the Search.StringView|StringView starts with v, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.StringView.Substring(System.Int32)">
      <summary>
        <para>Returns a substring of the current Search.StringView|StringView, starting at index start and until the end of the Search.StringView|StringView.</para>
      </summary>
      <param name="start">The starting index.</param>
      <returns>
        <para>A new Search.StringView|StringView.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.StringView.Substring(System.Int32,System.Int32)">
      <summary>
        <para>Returns a substring of the current Search.StringView|StringView, starting at index start and with the specified length.</para>
      </summary>
      <param name="start">The starting index.</param>
      <param name="length">The length of the substring.</param>
      <returns>
        <para>A new Search.StringView|StringView.</para>
      </returns>
    </member>
    <member name="P:UnityEditor.Search.StringView.this">
      <summary>
        <para>Gets the character at a specified position in the current Search.StringView|StringView.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.StringView.ToString">
      <summary>
        <para>Converts the current Search.StringView|StringView into a string.</para>
      </summary>
      <returns>
        <para>A new string.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.StringView.Trim(System.Char[])">
      <summary>
        <para>Returns a new Search.StringView|StringView in which all leading and trailing occurrences of a set of specified characters from the current Search.StringView|StringView are removed.</para>
      </summary>
      <param name="chrs">A set of characters to remove.</param>
      <returns>
        <para>A new Search.StringView|StringView.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.TextCursorPlacement">
      <summary>
        <para>Where to place the cursor in the text. (see ISearchView.SetSearchText).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.TextCursorPlacement.Default">
      <summary>
        <para>Do not move the cursor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.TextCursorPlacement.MoveAutoComplete">
      <summary>
        <para>Default cursor position (end of the line of text).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.TextCursorPlacement.MoveLineEnd">
      <summary>
        <para>Move the cursor to the end of the line of text.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.TextCursorPlacement.MoveLineStart">
      <summary>
        <para>Move the cursor to the beginning of the line of text.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.TextCursorPlacement.MoveToEndOfPreviousWord">
      <summary>
        <para>Move the cursor to the end of the previous word.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.TextCursorPlacement.MoveToStartOfNextWord">
      <summary>
        <para>Move the cursor to the start of the previous word.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.TextCursorPlacement.MoveWordLeft">
      <summary>
        <para>Move the cursor one word to the left.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.TextCursorPlacement.MoveWordRight">
      <summary>
        <para>Move the cursor one word to the right.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.TextCursorPlacement.None">
      <summary>
        <para>Do not move the cursor.</para>
      </summary>
    </member>
  </members>
</doc>
