<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<doc>
  <members>
    <assembly>
      <name>UnityEngine.AssetBundleModule</name>
    </assembly>
    <member name="T:UnityEngine.AssetBundle">
      <summary>
        <para>API for accessing the content of AssetBundle files.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AssetBundle.isStreamedSceneAssetBundle">
      <summary>
        <para>Return true if the AssetBundle contains Unity Scene files</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AssetBundle.memoryBudgetKB">
      <summary>
        <para>Controls the size of the shared AssetBundle loading cache. Default value is 1MB. </para>
      </summary>
    </member>
    <member name="M:UnityEngine.AssetBundle.Contains(System.String)">
      <summary>
        <para>Check if an AssetBundle contains a specific object.</para>
      </summary>
      <param name="name"></param>
    </member>
    <member name="M:UnityEngine.AssetBundle.CreateFromFile(System.String)">
      <summary>
        <para>Loads an asset bundle from a disk.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEngine.AssetBundle.CreateFromMemory(System.Byte[])">
      <summary>
        <para>Asynchronously create an AssetBundle from a memory region.</para>
      </summary>
      <param name="binary"></param>
    </member>
    <member name="M:UnityEngine.AssetBundle.CreateFromMemoryImmediate(System.Byte[])">
      <summary>
        <para>Synchronously create an AssetBundle from a memory region.</para>
      </summary>
      <param name="binary"></param>
    </member>
    <member name="M:UnityEngine.AssetBundle.GetAllAssetNames">
      <summary>
        <para>Return all Asset names in the AssetBundle.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AssetBundle.GetAllLoadedAssetBundles">
      <summary>
        <para>Get an enumeration of all the currently loaded AssetBundles.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AssetBundle.GetAllScenePaths">
      <summary>
        <para>Return all the names of Scenes in the AssetBundle.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAllAssets(System.Type)">
      <summary>
        <para>Loads all Assets contained in the AssetBundle synchronously.</para>
      </summary>
      <param name="type">When specified only main or visible objects that derive from the provided type are returned.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAllAssets">
      <summary>
        <para>Loads all Assets contained in the AssetBundle synchronously.</para>
      </summary>
      <param name="type">When specified only main or visible objects that derive from the provided type are returned.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAllAssets">
      <summary>
        <para>Loads all Assets contained in the AssetBundle synchronously.</para>
      </summary>
      <param name="type">When specified only main or visible objects that derive from the provided type are returned.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAllAssetsAsync">
      <summary>
        <para>Loads all Assets contained in the AssetBundle asynchronously.</para>
      </summary>
      <param name="type">When specified only main or visible objects that derive from the provided type are returned.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAllAssetsAsync(System.Type)">
      <summary>
        <para>Loads all Assets contained in the AssetBundle asynchronously.</para>
      </summary>
      <param name="type">When specified only main or visible objects that derive from the provided type are returned.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAllAssetsAsync">
      <summary>
        <para>Loads all Assets contained in the AssetBundle asynchronously.</para>
      </summary>
      <param name="type">When specified only main or visible objects that derive from the provided type are returned.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAsset(System.String)">
      <summary>
        <para>Synchronously loads an Asset from the AssetBundle.</para>
      </summary>
      <param name="name">Name of the Asset.  For the most precise matching this should be the relative path of the Asset that was built into the AssetBundle, including the file extension.
                The relative path and file extension are optional, and Assets can be found and loaded based on the filename alone.  However this opens the potential for unexpected results if the filename is not unique within the AssetBundle.
                At build time it is also possible to specify a name for the Asset using AssetBundleBuild.addressableNames.  In that case that specified name will be expected to load the Asset instead of the Asset path.
                </param>
      <param name="type">The provided type will be checked against the Asset's main object, and if that is not compatible it will be matched against visible objects within the Asset.
                Not all nested objects are visible, for example this will not work to directly retrieve a Transform, MonoBehaviour or other Component.
                In cases where there are multiple matches for the name argument, the requested type can determine which Asset to load.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAsset(System.String,System.Type)">
      <summary>
        <para>Synchronously loads an Asset from the AssetBundle.</para>
      </summary>
      <param name="name">Name of the Asset.  For the most precise matching this should be the relative path of the Asset that was built into the AssetBundle, including the file extension.
                The relative path and file extension are optional, and Assets can be found and loaded based on the filename alone.  However this opens the potential for unexpected results if the filename is not unique within the AssetBundle.
                At build time it is also possible to specify a name for the Asset using AssetBundleBuild.addressableNames.  In that case that specified name will be expected to load the Asset instead of the Asset path.
                </param>
      <param name="type">The provided type will be checked against the Asset's main object, and if that is not compatible it will be matched against visible objects within the Asset.
                Not all nested objects are visible, for example this will not work to directly retrieve a Transform, MonoBehaviour or other Component.
                In cases where there are multiple matches for the name argument, the requested type can determine which Asset to load.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAsset(System.String)">
      <summary>
        <para>Synchronously loads an Asset from the AssetBundle.</para>
      </summary>
      <param name="name">Name of the Asset.  For the most precise matching this should be the relative path of the Asset that was built into the AssetBundle, including the file extension.
                The relative path and file extension are optional, and Assets can be found and loaded based on the filename alone.  However this opens the potential for unexpected results if the filename is not unique within the AssetBundle.
                At build time it is also possible to specify a name for the Asset using AssetBundleBuild.addressableNames.  In that case that specified name will be expected to load the Asset instead of the Asset path.
                </param>
      <param name="type">The provided type will be checked against the Asset's main object, and if that is not compatible it will be matched against visible objects within the Asset.
                Not all nested objects are visible, for example this will not work to directly retrieve a Transform, MonoBehaviour or other Component.
                In cases where there are multiple matches for the name argument, the requested type can determine which Asset to load.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAssetAsync(System.String)">
      <summary>
        <para>Asynchronously loads an Asset from the bundle.</para>
      </summary>
      <param name="name">Name of the Asset.  For the most precise matching this should be the relative path of the Asset that was built into the AssetBundle, including the file extension.
                The relative path and file extension are optional, and Assets can be found and loaded based on the filename alone.  However this opens the potential for unexpected results if the filename is not unique within the AssetBundle.
                At build time it is also possible to specify a name for the Asset using AssetBundleBuild.addressableNames.  In that case that specified name will be expected to load the Asset instead of the Asset path.
                </param>
      <param name="type">The provided type will be checked against the Asset's main object, and if that is not compatible it will be matched against visible objects within the Asset.
                Not all nested objects are visible, for example this will not work to directly retrieve a Transform, MonoBehaviour or other Component.
                In cases where there are multiple matches for the name argument, the requested type can determine which Asset to load.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAssetAsync(System.String)">
      <summary>
        <para>Asynchronously loads an Asset from the bundle.</para>
      </summary>
      <param name="name">Name of the Asset.  For the most precise matching this should be the relative path of the Asset that was built into the AssetBundle, including the file extension.
                The relative path and file extension are optional, and Assets can be found and loaded based on the filename alone.  However this opens the potential for unexpected results if the filename is not unique within the AssetBundle.
                At build time it is also possible to specify a name for the Asset using AssetBundleBuild.addressableNames.  In that case that specified name will be expected to load the Asset instead of the Asset path.
                </param>
      <param name="type">The provided type will be checked against the Asset's main object, and if that is not compatible it will be matched against visible objects within the Asset.
                Not all nested objects are visible, for example this will not work to directly retrieve a Transform, MonoBehaviour or other Component.
                In cases where there are multiple matches for the name argument, the requested type can determine which Asset to load.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAssetAsync(System.String,System.Type)">
      <summary>
        <para>Asynchronously loads an Asset from the bundle.</para>
      </summary>
      <param name="name">Name of the Asset.  For the most precise matching this should be the relative path of the Asset that was built into the AssetBundle, including the file extension.
                The relative path and file extension are optional, and Assets can be found and loaded based on the filename alone.  However this opens the potential for unexpected results if the filename is not unique within the AssetBundle.
                At build time it is also possible to specify a name for the Asset using AssetBundleBuild.addressableNames.  In that case that specified name will be expected to load the Asset instead of the Asset path.
                </param>
      <param name="type">The provided type will be checked against the Asset's main object, and if that is not compatible it will be matched against visible objects within the Asset.
                Not all nested objects are visible, for example this will not work to directly retrieve a Transform, MonoBehaviour or other Component.
                In cases where there are multiple matches for the name argument, the requested type can determine which Asset to load.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAssetWithSubAssets(System.String)">
      <summary>
        <para>Loads Asset and sub Assets from the AssetBundle synchronously.</para>
      </summary>
      <param name="name">Name of the Asset.</param>
      <param name="type">Type to load.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAssetWithSubAssets(System.String,System.Type)">
      <summary>
        <para>Loads Asset and sub Assets from the AssetBundle synchronously.</para>
      </summary>
      <param name="name">Name of the Asset.</param>
      <param name="type">Type to load.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAssetWithSubAssets(System.String)">
      <summary>
        <para>Loads Asset and sub Assets from the AssetBundle synchronously.</para>
      </summary>
      <param name="name">Name of the Asset.</param>
      <param name="type">Type to load.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAssetWithSubAssetsAsync(System.String)">
      <summary>
        <para>Loads Asset and sub Assets from the AssetBundle asynchronously.</para>
      </summary>
      <param name="name">Name of the Asset.</param>
      <param name="type">Type to load.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAssetWithSubAssetsAsync(System.String)">
      <summary>
        <para>Loads Asset and sub Assets from the AssetBundle asynchronously.</para>
      </summary>
      <param name="name">Name of the Asset.</param>
      <param name="type">Type to load.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAssetWithSubAssetsAsync(System.String,System.Type)">
      <summary>
        <para>Loads Asset and sub Assets from the AssetBundle asynchronously.</para>
      </summary>
      <param name="name">Name of the Asset.</param>
      <param name="type">Type to load.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadFromFile(System.String)">
      <summary>
        <para>Synchronously loads an AssetBundle from a file on disk.</para>
      </summary>
      <param name="path">Path of the file on disk.</param>
      <param name="crc">An optional CRC-32 checksum of the uncompressed content. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match.</param>
      <param name="offset">An optional byte offset. This value specifies where to start reading the AssetBundle from.</param>
      <returns>
        <para>Loaded AssetBundle object or null if failed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadFromFile(System.String,System.UInt32)">
      <summary>
        <para>Synchronously loads an AssetBundle from a file on disk.</para>
      </summary>
      <param name="path">Path of the file on disk.</param>
      <param name="crc">An optional CRC-32 checksum of the uncompressed content. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match.</param>
      <param name="offset">An optional byte offset. This value specifies where to start reading the AssetBundle from.</param>
      <returns>
        <para>Loaded AssetBundle object or null if failed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadFromFile(System.String,System.UInt32,System.UInt64)">
      <summary>
        <para>Synchronously loads an AssetBundle from a file on disk.</para>
      </summary>
      <param name="path">Path of the file on disk.</param>
      <param name="crc">An optional CRC-32 checksum of the uncompressed content. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match.</param>
      <param name="offset">An optional byte offset. This value specifies where to start reading the AssetBundle from.</param>
      <returns>
        <para>Loaded AssetBundle object or null if failed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadFromFileAsync(System.String)">
      <summary>
        <para>Asynchronously loads an AssetBundle from a file on disk.</para>
      </summary>
      <param name="path">Path of the file on disk.</param>
      <param name="crc">An optional CRC-32 checksum of the uncompressed content. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match.</param>
      <param name="offset">An optional byte offset. This value specifies where to start reading the AssetBundle from.</param>
      <returns>
        <para>Asynchronous load request for an AssetBundle. Use AssetBundleCreateRequest.assetBundle property to get an AssetBundle once it is loaded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadFromFileAsync(System.String,System.UInt32)">
      <summary>
        <para>Asynchronously loads an AssetBundle from a file on disk.</para>
      </summary>
      <param name="path">Path of the file on disk.</param>
      <param name="crc">An optional CRC-32 checksum of the uncompressed content. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match.</param>
      <param name="offset">An optional byte offset. This value specifies where to start reading the AssetBundle from.</param>
      <returns>
        <para>Asynchronous load request for an AssetBundle. Use AssetBundleCreateRequest.assetBundle property to get an AssetBundle once it is loaded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadFromFileAsync(System.String,System.UInt32,System.UInt64)">
      <summary>
        <para>Asynchronously loads an AssetBundle from a file on disk.</para>
      </summary>
      <param name="path">Path of the file on disk.</param>
      <param name="crc">An optional CRC-32 checksum of the uncompressed content. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match.</param>
      <param name="offset">An optional byte offset. This value specifies where to start reading the AssetBundle from.</param>
      <returns>
        <para>Asynchronous load request for an AssetBundle. Use AssetBundleCreateRequest.assetBundle property to get an AssetBundle once it is loaded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadFromMemory(System.Byte[])">
      <summary>
        <para>Synchronously load an AssetBundle from a memory region.</para>
      </summary>
      <param name="binary">Array of bytes with the AssetBundle data.</param>
      <param name="crc">An optional CRC-32 checksum of the uncompressed content. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match.</param>
      <returns>
        <para>Loaded AssetBundle object or null if failed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadFromMemory(System.Byte[],System.UInt32)">
      <summary>
        <para>Synchronously load an AssetBundle from a memory region.</para>
      </summary>
      <param name="binary">Array of bytes with the AssetBundle data.</param>
      <param name="crc">An optional CRC-32 checksum of the uncompressed content. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match.</param>
      <returns>
        <para>Loaded AssetBundle object or null if failed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadFromMemoryAsync(System.Byte[])">
      <summary>
        <para>Asynchronously load an AssetBundle from a memory region.</para>
      </summary>
      <param name="binary">Array of bytes with the AssetBundle data.</param>
      <param name="crc">An optional CRC-32 checksum of the uncompressed content. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match.</param>
      <returns>
        <para>Asynchronous load request for an AssetBundle. Use AssetBundleCreateRequest.assetBundle property to get an AssetBundle once it is loaded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadFromMemoryAsync(System.Byte[],System.UInt32)">
      <summary>
        <para>Asynchronously load an AssetBundle from a memory region.</para>
      </summary>
      <param name="binary">Array of bytes with the AssetBundle data.</param>
      <param name="crc">An optional CRC-32 checksum of the uncompressed content. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match.</param>
      <returns>
        <para>Asynchronous load request for an AssetBundle. Use AssetBundleCreateRequest.assetBundle property to get an AssetBundle once it is loaded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadFromStream(System.IO.Stream)">
      <summary>
        <para>Synchronously loads an AssetBundle from a managed Stream.</para>
      </summary>
      <param name="stream">The managed Stream object. Unity calls Read(), Seek() and the Length property on this object to load the AssetBundle data.</param>
      <param name="crc">An optional CRC-32 checksum of the uncompressed content.</param>
      <param name="managedReadBufferSize">You can use this to override the size of the read buffer Unity uses while loading data. The default size is 32KB.</param>
      <returns>
        <para>The loaded AssetBundle object or null when the object fails to load.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadFromStream(System.IO.Stream,System.UInt32)">
      <summary>
        <para>Synchronously loads an AssetBundle from a managed Stream.</para>
      </summary>
      <param name="stream">The managed Stream object. Unity calls Read(), Seek() and the Length property on this object to load the AssetBundle data.</param>
      <param name="crc">An optional CRC-32 checksum of the uncompressed content.</param>
      <param name="managedReadBufferSize">You can use this to override the size of the read buffer Unity uses while loading data. The default size is 32KB.</param>
      <returns>
        <para>The loaded AssetBundle object or null when the object fails to load.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadFromStream(System.IO.Stream,System.UInt32,System.UInt32)">
      <summary>
        <para>Synchronously loads an AssetBundle from a managed Stream.</para>
      </summary>
      <param name="stream">The managed Stream object. Unity calls Read(), Seek() and the Length property on this object to load the AssetBundle data.</param>
      <param name="crc">An optional CRC-32 checksum of the uncompressed content.</param>
      <param name="managedReadBufferSize">You can use this to override the size of the read buffer Unity uses while loading data. The default size is 32KB.</param>
      <returns>
        <para>The loaded AssetBundle object or null when the object fails to load.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadFromStreamAsync(System.IO.Stream)">
      <summary>
        <para>Asynchronously loads an AssetBundle from a managed Stream.</para>
      </summary>
      <param name="stream">The managed Stream object. Unity calls Read(), Seek() and the Length property on this object to load the AssetBundle data.</param>
      <param name="crc">An optional CRC-32 checksum of the uncompressed content.</param>
      <param name="managedReadBufferSize">You can use this to override the size of the read buffer Unity uses while loading data. The default size is 32KB.</param>
      <returns>
        <para>Asynchronous load request for an AssetBundle. Use AssetBundleCreateRequest.assetBundle property to get an AssetBundle once it is loaded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadFromStreamAsync(System.IO.Stream,System.UInt32)">
      <summary>
        <para>Asynchronously loads an AssetBundle from a managed Stream.</para>
      </summary>
      <param name="stream">The managed Stream object. Unity calls Read(), Seek() and the Length property on this object to load the AssetBundle data.</param>
      <param name="crc">An optional CRC-32 checksum of the uncompressed content.</param>
      <param name="managedReadBufferSize">You can use this to override the size of the read buffer Unity uses while loading data. The default size is 32KB.</param>
      <returns>
        <para>Asynchronous load request for an AssetBundle. Use AssetBundleCreateRequest.assetBundle property to get an AssetBundle once it is loaded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadFromStreamAsync(System.IO.Stream,System.UInt32,System.UInt32)">
      <summary>
        <para>Asynchronously loads an AssetBundle from a managed Stream.</para>
      </summary>
      <param name="stream">The managed Stream object. Unity calls Read(), Seek() and the Length property on this object to load the AssetBundle data.</param>
      <param name="crc">An optional CRC-32 checksum of the uncompressed content.</param>
      <param name="managedReadBufferSize">You can use this to override the size of the read buffer Unity uses while loading data. The default size is 32KB.</param>
      <returns>
        <para>Asynchronous load request for an AssetBundle. Use AssetBundleCreateRequest.assetBundle property to get an AssetBundle once it is loaded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AssetBundle.RecompressAssetBundleAsync(System.String,System.String,UnityEngine.BuildCompression,System.UInt32,UnityEngine.ThreadPriority)">
      <summary>
        <para>Asynchronously recompress a downloaded/stored AssetBundle from one BuildCompression to another.</para>
      </summary>
      <param name="inputPath">Path to the AssetBundle to recompress.</param>
      <param name="outputPath">Path to the recompressed AssetBundle to be generated. Can be the same as inputPath.</param>
      <param name="method">The compression method, level and blocksize to use during recompression. Only some BuildCompression types are supported (see note).</param>
      <param name="expectedCRC">CRC of the AssetBundle to test against. Testing this requires additional file reading and computation. Pass in 0 to skip this check. Unity does not compute a CRC when the source and destination BuildCompression are the same, so no CRC verification takes place (see note).</param>
      <param name="priority">The priority at which the recompression operation should run. This sets thread priority during the operation and does not effect the order in which operations are performed. Recompression operations run on a background worker thread.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.Unload(System.Boolean)">
      <summary>
        <para>Unloads an AssetBundle freeing its data.</para>
      </summary>
      <param name="unloadAllLoadedObjects">Determines whether the current instances of objects loaded from the AssetBundle will also be unloaded.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.UnloadAllAssetBundles(System.Boolean)">
      <summary>
        <para>Unloads all currently loaded AssetBundles.</para>
      </summary>
      <param name="unloadAllObjects">Determines whether the current instances of objects loaded from AssetBundles will also be unloaded.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.UnloadAsync(System.Boolean)">
      <summary>
        <para>Unloads assets in the bundle.</para>
      </summary>
      <param name="unloadAllLoadedObjects"></param>
      <returns>
        <para>Asynchronous unload request for an AssetBundle.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.AssetBundleCreateRequest">
      <summary>
        <para>Asynchronous load request for an AssetBundle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AssetBundleCreateRequest.assetBundle">
      <summary>
        <para>Asset object being loaded (Read Only).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AssetBundleLoadResult">
      <summary>
        <para>The result of an Asset Bundle Load or Recompress Operation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AssetBundleLoadResult.AlreadyLoaded">
      <summary>
        <para>The Asset Bundle is already loaded.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AssetBundleLoadResult.Cancelled">
      <summary>
        <para>The operation was cancelled.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AssetBundleLoadResult.FailedCache">
      <summary>
        <para>The Asset Bundle was not successfully cached.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AssetBundleLoadResult.FailedDecompression">
      <summary>
        <para>Failed to decompress the Asset Bundle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AssetBundleLoadResult.FailedDeleteRecompressionTarget">
      <summary>
        <para>The target path given for the Recompression operation could not be deleted for swap with recompressed bundle file.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AssetBundleLoadResult.FailedRead">
      <summary>
        <para>Failed to read the Asset Bundle file.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AssetBundleLoadResult.FailedWrite">
      <summary>
        <para>Failed to write to the file system.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AssetBundleLoadResult.NoSerializedData">
      <summary>
        <para>The Asset Bundle does not contain any serialized data. It may be empty, or corrupt.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AssetBundleLoadResult.NotCompatible">
      <summary>
        <para>The AssetBundle is incompatible with this version of Unity.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AssetBundleLoadResult.NotMatchingCrc">
      <summary>
        <para>The decompressed Asset data did not match the precomputed CRC. This may suggest that the AssetBundle did not download correctly.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AssetBundleLoadResult.NotValidAssetBundle">
      <summary>
        <para>This does not appear to be a valid Asset Bundle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AssetBundleLoadResult.RecompressionTargetExistsButNotArchive">
      <summary>
        <para>The target path given for the Recompression operation exists but is not an Archive container.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AssetBundleLoadResult.RecompressionTargetIsLoaded">
      <summary>
        <para>The target path given for the Recompression operation is an Archive that is currently loaded.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AssetBundleLoadResult.Success">
      <summary>
        <para>The operation completed successfully.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AssetBundleManifest">
      <summary>
        <para>Manifest for all the AssetBundles in the build.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AssetBundleManifest.GetAllAssetBundles">
      <summary>
        <para>Get all the AssetBundles in the manifest.</para>
      </summary>
      <returns>
        <para>An array of asset bundle names.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AssetBundleManifest.GetAllAssetBundlesWithVariant">
      <summary>
        <para>Get all the AssetBundles with variant in the manifest.</para>
      </summary>
      <returns>
        <para>An array of asset bundle names.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AssetBundleManifest.GetAllDependencies(System.String)">
      <summary>
        <para>Get all the dependent AssetBundles for the given AssetBundle.</para>
      </summary>
      <param name="assetBundleName">Name of the asset bundle.</param>
    </member>
    <member name="M:UnityEngine.AssetBundleManifest.GetAssetBundleHash(System.String)">
      <summary>
        <para>Get the hash for the given AssetBundle.</para>
      </summary>
      <param name="assetBundleName">Name of the asset bundle.</param>
      <returns>
        <para>The 128-bit hash for the asset bundle.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AssetBundleManifest.GetDirectDependencies(System.String)">
      <summary>
        <para>Get the direct dependent AssetBundles for the given AssetBundle.</para>
      </summary>
      <param name="assetBundleName">Name of the asset bundle.</param>
      <returns>
        <para>Array of asset bundle names this asset bundle depends on.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.AssetBundleRecompressOperation">
      <summary>
        <para>Asynchronous AssetBundle recompression from one compression method and level to another.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AssetBundleRecompressOperation.humanReadableResult">
      <summary>
        <para>A string describing the recompression operation result (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AssetBundleRecompressOperation.inputPath">
      <summary>
        <para>Path of the AssetBundle being recompressed (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AssetBundleRecompressOperation.outputPath">
      <summary>
        <para>Path of the resulting recompressed AssetBundle (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AssetBundleRecompressOperation.result">
      <summary>
        <para>Result of the recompression operation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AssetBundleRecompressOperation.success">
      <summary>
        <para>True if the recompress operation is complete and was successful, otherwise false (Read Only).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AssetBundleRequest">
      <summary>
        <para>Asynchronous load request from an AssetBundle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AssetBundleRequest.allAssets">
      <summary>
        <para>Asset objects with sub assets being loaded. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AssetBundleRequest.asset">
      <summary>
        <para>Asset object being loaded (Read Only).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AssetBundleUnloadOperation">
      <summary>
        <para>Async unload operation for an AssetBundle.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AssetBundleUnloadOperation.WaitForCompletion">
      <summary>
        <para>Synchronously waits for the operation to complete.</para>
      </summary>
    </member>
    <member name="A:UnityEngine.AssetBundleModule">
      <summary>
        <para>The AssetBundle module implements the AssetBundle class and related APIs to load data from AssetBundles.</para>
      </summary>
    </member>
  </members>
</doc>
